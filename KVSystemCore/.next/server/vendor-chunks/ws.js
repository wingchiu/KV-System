"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/ws";
exports.ids = ["vendor-chunks/ws"];
exports.modules = {

/***/ "(ssr)/./node_modules/ws/index.js":
/*!**********************************!*\
  !*** ./node_modules/ws/index.js ***!
  \**********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\r\n\r\nconst WebSocket = __webpack_require__(/*! ./lib/websocket */ \"(ssr)/./node_modules/ws/lib/websocket.js\");\r\n\r\nWebSocket.createWebSocketStream = __webpack_require__(/*! ./lib/stream */ \"(ssr)/./node_modules/ws/lib/stream.js\");\r\nWebSocket.Server = __webpack_require__(/*! ./lib/websocket-server */ \"(ssr)/./node_modules/ws/lib/websocket-server.js\");\r\nWebSocket.Receiver = __webpack_require__(/*! ./lib/receiver */ \"(ssr)/./node_modules/ws/lib/receiver.js\");\r\nWebSocket.Sender = __webpack_require__(/*! ./lib/sender */ \"(ssr)/./node_modules/ws/lib/sender.js\");\r\n\r\nWebSocket.WebSocket = WebSocket;\r\nWebSocket.WebSocketServer = WebSocket.Server;\r\n\r\nmodule.exports = WebSocket;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd3MvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLGtCQUFrQixtQkFBTyxDQUFDLGlFQUFpQjtBQUMzQztBQUNBLGtDQUFrQyxtQkFBTyxDQUFDLDJEQUFjO0FBQ3hELG1CQUFtQixtQkFBTyxDQUFDLCtFQUF3QjtBQUNuRCxxQkFBcUIsbUJBQU8sQ0FBQywrREFBZ0I7QUFDN0MsbUJBQW1CLG1CQUFPLENBQUMsMkRBQWM7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3B1YmxpY2lzLWt2LXN5c3RlbS8uL25vZGVfbW9kdWxlcy93cy9pbmRleC5qcz84ZDZkIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcclxuXHJcbmNvbnN0IFdlYlNvY2tldCA9IHJlcXVpcmUoJy4vbGliL3dlYnNvY2tldCcpO1xyXG5cclxuV2ViU29ja2V0LmNyZWF0ZVdlYlNvY2tldFN0cmVhbSA9IHJlcXVpcmUoJy4vbGliL3N0cmVhbScpO1xyXG5XZWJTb2NrZXQuU2VydmVyID0gcmVxdWlyZSgnLi9saWIvd2Vic29ja2V0LXNlcnZlcicpO1xyXG5XZWJTb2NrZXQuUmVjZWl2ZXIgPSByZXF1aXJlKCcuL2xpYi9yZWNlaXZlcicpO1xyXG5XZWJTb2NrZXQuU2VuZGVyID0gcmVxdWlyZSgnLi9saWIvc2VuZGVyJyk7XHJcblxyXG5XZWJTb2NrZXQuV2ViU29ja2V0ID0gV2ViU29ja2V0O1xyXG5XZWJTb2NrZXQuV2ViU29ja2V0U2VydmVyID0gV2ViU29ja2V0LlNlcnZlcjtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gV2ViU29ja2V0O1xyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ws/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ws/lib/buffer-util.js":
/*!********************************************!*\
  !*** ./node_modules/ws/lib/buffer-util.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\r\n\r\nconst { EMPTY_BUFFER } = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/ws/lib/constants.js\");\r\n\r\nconst FastBuffer = Buffer[Symbol.species];\r\n\r\n/**\r\n * Merges an array of buffers into a new buffer.\r\n *\r\n * @param {Buffer[]} list The array of buffers to concat\r\n * @param {Number} totalLength The total length of buffers in the list\r\n * @return {Buffer} The resulting buffer\r\n * @public\r\n */\r\nfunction concat(list, totalLength) {\r\n  if (list.length === 0) return EMPTY_BUFFER;\r\n  if (list.length === 1) return list[0];\r\n\r\n  const target = Buffer.allocUnsafe(totalLength);\r\n  let offset = 0;\r\n\r\n  for (let i = 0; i < list.length; i++) {\r\n    const buf = list[i];\r\n    target.set(buf, offset);\r\n    offset += buf.length;\r\n  }\r\n\r\n  if (offset < totalLength) {\r\n    return new FastBuffer(target.buffer, target.byteOffset, offset);\r\n  }\r\n\r\n  return target;\r\n}\r\n\r\n/**\r\n * Masks a buffer using the given mask.\r\n *\r\n * @param {Buffer} source The buffer to mask\r\n * @param {Buffer} mask The mask to use\r\n * @param {Buffer} output The buffer where to store the result\r\n * @param {Number} offset The offset at which to start writing\r\n * @param {Number} length The number of bytes to mask.\r\n * @public\r\n */\r\nfunction _mask(source, mask, output, offset, length) {\r\n  for (let i = 0; i < length; i++) {\r\n    output[offset + i] = source[i] ^ mask[i & 3];\r\n  }\r\n}\r\n\r\n/**\r\n * Unmasks a buffer using the given mask.\r\n *\r\n * @param {Buffer} buffer The buffer to unmask\r\n * @param {Buffer} mask The mask to use\r\n * @public\r\n */\r\nfunction _unmask(buffer, mask) {\r\n  for (let i = 0; i < buffer.length; i++) {\r\n    buffer[i] ^= mask[i & 3];\r\n  }\r\n}\r\n\r\n/**\r\n * Converts a buffer to an `ArrayBuffer`.\r\n *\r\n * @param {Buffer} buf The buffer to convert\r\n * @return {ArrayBuffer} Converted buffer\r\n * @public\r\n */\r\nfunction toArrayBuffer(buf) {\r\n  if (buf.length === buf.buffer.byteLength) {\r\n    return buf.buffer;\r\n  }\r\n\r\n  return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.length);\r\n}\r\n\r\n/**\r\n * Converts `data` to a `Buffer`.\r\n *\r\n * @param {*} data The data to convert\r\n * @return {Buffer} The buffer\r\n * @throws {TypeError}\r\n * @public\r\n */\r\nfunction toBuffer(data) {\r\n  toBuffer.readOnly = true;\r\n\r\n  if (Buffer.isBuffer(data)) return data;\r\n\r\n  let buf;\r\n\r\n  if (data instanceof ArrayBuffer) {\r\n    buf = new FastBuffer(data);\r\n  } else if (ArrayBuffer.isView(data)) {\r\n    buf = new FastBuffer(data.buffer, data.byteOffset, data.byteLength);\r\n  } else {\r\n    buf = Buffer.from(data);\r\n    toBuffer.readOnly = false;\r\n  }\r\n\r\n  return buf;\r\n}\r\n\r\nmodule.exports = {\r\n  concat,\r\n  mask: _mask,\r\n  toArrayBuffer,\r\n  toBuffer,\r\n  unmask: _unmask\r\n};\r\n\r\n/* istanbul ignore else  */\r\nif (!process.env.WS_NO_BUFFER_UTIL) {\r\n  try {\r\n    const bufferUtil = __webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'bufferutil'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\r\n\r\n    module.exports.mask = function (source, mask, output, offset, length) {\r\n      if (length < 48) _mask(source, mask, output, offset, length);\r\n      else bufferUtil.mask(source, mask, output, offset, length);\r\n    };\r\n\r\n    module.exports.unmask = function (buffer, mask) {\r\n      if (buffer.length < 32) _unmask(buffer, mask);\r\n      else bufferUtil.unmask(buffer, mask);\r\n    };\r\n  } catch (e) {\r\n    // Continue regardless of the error.\r\n  }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd3MvbGliL2J1ZmZlci11dGlsLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSxRQUFRLGVBQWUsRUFBRSxtQkFBTyxDQUFDLDZEQUFhO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsVUFBVTtBQUNyQixXQUFXLFFBQVE7QUFDbkIsWUFBWSxRQUFRO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixpQkFBaUI7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsWUFBWTtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkI7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLG1CQUFtQjtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixZQUFZLGFBQWE7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEdBQUc7QUFDZCxZQUFZLFFBQVE7QUFDcEIsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLG1CQUFPLENBQUMseUlBQVk7QUFDM0M7QUFDQSxJQUFJLG1CQUFtQjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUkscUJBQXFCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wdWJsaWNpcy1rdi1zeXN0ZW0vLi9ub2RlX21vZHVsZXMvd3MvbGliL2J1ZmZlci11dGlsLmpzPzA1MWUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xyXG5cclxuY29uc3QgeyBFTVBUWV9CVUZGRVIgfSA9IHJlcXVpcmUoJy4vY29uc3RhbnRzJyk7XHJcblxyXG5jb25zdCBGYXN0QnVmZmVyID0gQnVmZmVyW1N5bWJvbC5zcGVjaWVzXTtcclxuXHJcbi8qKlxyXG4gKiBNZXJnZXMgYW4gYXJyYXkgb2YgYnVmZmVycyBpbnRvIGEgbmV3IGJ1ZmZlci5cclxuICpcclxuICogQHBhcmFtIHtCdWZmZXJbXX0gbGlzdCBUaGUgYXJyYXkgb2YgYnVmZmVycyB0byBjb25jYXRcclxuICogQHBhcmFtIHtOdW1iZXJ9IHRvdGFsTGVuZ3RoIFRoZSB0b3RhbCBsZW5ndGggb2YgYnVmZmVycyBpbiB0aGUgbGlzdFxyXG4gKiBAcmV0dXJuIHtCdWZmZXJ9IFRoZSByZXN1bHRpbmcgYnVmZmVyXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmZ1bmN0aW9uIGNvbmNhdChsaXN0LCB0b3RhbExlbmd0aCkge1xyXG4gIGlmIChsaXN0Lmxlbmd0aCA9PT0gMCkgcmV0dXJuIEVNUFRZX0JVRkZFUjtcclxuICBpZiAobGlzdC5sZW5ndGggPT09IDEpIHJldHVybiBsaXN0WzBdO1xyXG5cclxuICBjb25zdCB0YXJnZXQgPSBCdWZmZXIuYWxsb2NVbnNhZmUodG90YWxMZW5ndGgpO1xyXG4gIGxldCBvZmZzZXQgPSAwO1xyXG5cclxuICBmb3IgKGxldCBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcclxuICAgIGNvbnN0IGJ1ZiA9IGxpc3RbaV07XHJcbiAgICB0YXJnZXQuc2V0KGJ1Ziwgb2Zmc2V0KTtcclxuICAgIG9mZnNldCArPSBidWYubGVuZ3RoO1xyXG4gIH1cclxuXHJcbiAgaWYgKG9mZnNldCA8IHRvdGFsTGVuZ3RoKSB7XHJcbiAgICByZXR1cm4gbmV3IEZhc3RCdWZmZXIodGFyZ2V0LmJ1ZmZlciwgdGFyZ2V0LmJ5dGVPZmZzZXQsIG9mZnNldCk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gdGFyZ2V0O1xyXG59XHJcblxyXG4vKipcclxuICogTWFza3MgYSBidWZmZXIgdXNpbmcgdGhlIGdpdmVuIG1hc2suXHJcbiAqXHJcbiAqIEBwYXJhbSB7QnVmZmVyfSBzb3VyY2UgVGhlIGJ1ZmZlciB0byBtYXNrXHJcbiAqIEBwYXJhbSB7QnVmZmVyfSBtYXNrIFRoZSBtYXNrIHRvIHVzZVxyXG4gKiBAcGFyYW0ge0J1ZmZlcn0gb3V0cHV0IFRoZSBidWZmZXIgd2hlcmUgdG8gc3RvcmUgdGhlIHJlc3VsdFxyXG4gKiBAcGFyYW0ge051bWJlcn0gb2Zmc2V0IFRoZSBvZmZzZXQgYXQgd2hpY2ggdG8gc3RhcnQgd3JpdGluZ1xyXG4gKiBAcGFyYW0ge051bWJlcn0gbGVuZ3RoIFRoZSBudW1iZXIgb2YgYnl0ZXMgdG8gbWFzay5cclxuICogQHB1YmxpY1xyXG4gKi9cclxuZnVuY3Rpb24gX21hc2soc291cmNlLCBtYXNrLCBvdXRwdXQsIG9mZnNldCwgbGVuZ3RoKSB7XHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xyXG4gICAgb3V0cHV0W29mZnNldCArIGldID0gc291cmNlW2ldIF4gbWFza1tpICYgM107XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogVW5tYXNrcyBhIGJ1ZmZlciB1c2luZyB0aGUgZ2l2ZW4gbWFzay5cclxuICpcclxuICogQHBhcmFtIHtCdWZmZXJ9IGJ1ZmZlciBUaGUgYnVmZmVyIHRvIHVubWFza1xyXG4gKiBAcGFyYW0ge0J1ZmZlcn0gbWFzayBUaGUgbWFzayB0byB1c2VcclxuICogQHB1YmxpY1xyXG4gKi9cclxuZnVuY3Rpb24gX3VubWFzayhidWZmZXIsIG1hc2spIHtcclxuICBmb3IgKGxldCBpID0gMDsgaSA8IGJ1ZmZlci5sZW5ndGg7IGkrKykge1xyXG4gICAgYnVmZmVyW2ldIF49IG1hc2tbaSAmIDNdO1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIENvbnZlcnRzIGEgYnVmZmVyIHRvIGFuIGBBcnJheUJ1ZmZlcmAuXHJcbiAqXHJcbiAqIEBwYXJhbSB7QnVmZmVyfSBidWYgVGhlIGJ1ZmZlciB0byBjb252ZXJ0XHJcbiAqIEByZXR1cm4ge0FycmF5QnVmZmVyfSBDb252ZXJ0ZWQgYnVmZmVyXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmZ1bmN0aW9uIHRvQXJyYXlCdWZmZXIoYnVmKSB7XHJcbiAgaWYgKGJ1Zi5sZW5ndGggPT09IGJ1Zi5idWZmZXIuYnl0ZUxlbmd0aCkge1xyXG4gICAgcmV0dXJuIGJ1Zi5idWZmZXI7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gYnVmLmJ1ZmZlci5zbGljZShidWYuYnl0ZU9mZnNldCwgYnVmLmJ5dGVPZmZzZXQgKyBidWYubGVuZ3RoKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIENvbnZlcnRzIGBkYXRhYCB0byBhIGBCdWZmZXJgLlxyXG4gKlxyXG4gKiBAcGFyYW0geyp9IGRhdGEgVGhlIGRhdGEgdG8gY29udmVydFxyXG4gKiBAcmV0dXJuIHtCdWZmZXJ9IFRoZSBidWZmZXJcclxuICogQHRocm93cyB7VHlwZUVycm9yfVxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5mdW5jdGlvbiB0b0J1ZmZlcihkYXRhKSB7XHJcbiAgdG9CdWZmZXIucmVhZE9ubHkgPSB0cnVlO1xyXG5cclxuICBpZiAoQnVmZmVyLmlzQnVmZmVyKGRhdGEpKSByZXR1cm4gZGF0YTtcclxuXHJcbiAgbGV0IGJ1ZjtcclxuXHJcbiAgaWYgKGRhdGEgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xyXG4gICAgYnVmID0gbmV3IEZhc3RCdWZmZXIoZGF0YSk7XHJcbiAgfSBlbHNlIGlmIChBcnJheUJ1ZmZlci5pc1ZpZXcoZGF0YSkpIHtcclxuICAgIGJ1ZiA9IG5ldyBGYXN0QnVmZmVyKGRhdGEuYnVmZmVyLCBkYXRhLmJ5dGVPZmZzZXQsIGRhdGEuYnl0ZUxlbmd0aCk7XHJcbiAgfSBlbHNlIHtcclxuICAgIGJ1ZiA9IEJ1ZmZlci5mcm9tKGRhdGEpO1xyXG4gICAgdG9CdWZmZXIucmVhZE9ubHkgPSBmYWxzZTtcclxuICB9XHJcblxyXG4gIHJldHVybiBidWY7XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gIGNvbmNhdCxcclxuICBtYXNrOiBfbWFzayxcclxuICB0b0FycmF5QnVmZmVyLFxyXG4gIHRvQnVmZmVyLFxyXG4gIHVubWFzazogX3VubWFza1xyXG59O1xyXG5cclxuLyogaXN0YW5idWwgaWdub3JlIGVsc2UgICovXHJcbmlmICghcHJvY2Vzcy5lbnYuV1NfTk9fQlVGRkVSX1VUSUwpIHtcclxuICB0cnkge1xyXG4gICAgY29uc3QgYnVmZmVyVXRpbCA9IHJlcXVpcmUoJ2J1ZmZlcnV0aWwnKTtcclxuXHJcbiAgICBtb2R1bGUuZXhwb3J0cy5tYXNrID0gZnVuY3Rpb24gKHNvdXJjZSwgbWFzaywgb3V0cHV0LCBvZmZzZXQsIGxlbmd0aCkge1xyXG4gICAgICBpZiAobGVuZ3RoIDwgNDgpIF9tYXNrKHNvdXJjZSwgbWFzaywgb3V0cHV0LCBvZmZzZXQsIGxlbmd0aCk7XHJcbiAgICAgIGVsc2UgYnVmZmVyVXRpbC5tYXNrKHNvdXJjZSwgbWFzaywgb3V0cHV0LCBvZmZzZXQsIGxlbmd0aCk7XHJcbiAgICB9O1xyXG5cclxuICAgIG1vZHVsZS5leHBvcnRzLnVubWFzayA9IGZ1bmN0aW9uIChidWZmZXIsIG1hc2spIHtcclxuICAgICAgaWYgKGJ1ZmZlci5sZW5ndGggPCAzMikgX3VubWFzayhidWZmZXIsIG1hc2spO1xyXG4gICAgICBlbHNlIGJ1ZmZlclV0aWwudW5tYXNrKGJ1ZmZlciwgbWFzayk7XHJcbiAgICB9O1xyXG4gIH0gY2F0Y2ggKGUpIHtcclxuICAgIC8vIENvbnRpbnVlIHJlZ2FyZGxlc3Mgb2YgdGhlIGVycm9yLlxyXG4gIH1cclxufVxyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ws/lib/buffer-util.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ws/lib/constants.js":
/*!******************************************!*\
  !*** ./node_modules/ws/lib/constants.js ***!
  \******************************************/
/***/ ((module) => {

eval("\r\n\r\nconst BINARY_TYPES = ['nodebuffer', 'arraybuffer', 'fragments'];\r\nconst hasBlob = typeof Blob !== 'undefined';\r\n\r\nif (hasBlob) BINARY_TYPES.push('blob');\r\n\r\nmodule.exports = {\r\n  BINARY_TYPES,\r\n  EMPTY_BUFFER: Buffer.alloc(0),\r\n  GUID: '258EAFA5-E914-47DA-95CA-C5AB0DC85B11',\r\n  hasBlob,\r\n  kForOnEventAttribute: Symbol('kIsForOnEventAttribute'),\r\n  kListener: Symbol('kListener'),\r\n  kStatusCode: Symbol('status-code'),\r\n  kWebSocket: Symbol('websocket'),\r\n  NOOP: () => {}\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd3MvbGliL2NvbnN0YW50cy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wdWJsaWNpcy1rdi1zeXN0ZW0vLi9ub2RlX21vZHVsZXMvd3MvbGliL2NvbnN0YW50cy5qcz8wNWNkIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcclxuXHJcbmNvbnN0IEJJTkFSWV9UWVBFUyA9IFsnbm9kZWJ1ZmZlcicsICdhcnJheWJ1ZmZlcicsICdmcmFnbWVudHMnXTtcclxuY29uc3QgaGFzQmxvYiA9IHR5cGVvZiBCbG9iICE9PSAndW5kZWZpbmVkJztcclxuXHJcbmlmIChoYXNCbG9iKSBCSU5BUllfVFlQRVMucHVzaCgnYmxvYicpO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgQklOQVJZX1RZUEVTLFxyXG4gIEVNUFRZX0JVRkZFUjogQnVmZmVyLmFsbG9jKDApLFxyXG4gIEdVSUQ6ICcyNThFQUZBNS1FOTE0LTQ3REEtOTVDQS1DNUFCMERDODVCMTEnLFxyXG4gIGhhc0Jsb2IsXHJcbiAga0Zvck9uRXZlbnRBdHRyaWJ1dGU6IFN5bWJvbCgna0lzRm9yT25FdmVudEF0dHJpYnV0ZScpLFxyXG4gIGtMaXN0ZW5lcjogU3ltYm9sKCdrTGlzdGVuZXInKSxcclxuICBrU3RhdHVzQ29kZTogU3ltYm9sKCdzdGF0dXMtY29kZScpLFxyXG4gIGtXZWJTb2NrZXQ6IFN5bWJvbCgnd2Vic29ja2V0JyksXHJcbiAgTk9PUDogKCkgPT4ge31cclxufTtcclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ws/lib/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ws/lib/event-target.js":
/*!*********************************************!*\
  !*** ./node_modules/ws/lib/event-target.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\r\n\r\nconst { kForOnEventAttribute, kListener } = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/ws/lib/constants.js\");\r\n\r\nconst kCode = Symbol('kCode');\r\nconst kData = Symbol('kData');\r\nconst kError = Symbol('kError');\r\nconst kMessage = Symbol('kMessage');\r\nconst kReason = Symbol('kReason');\r\nconst kTarget = Symbol('kTarget');\r\nconst kType = Symbol('kType');\r\nconst kWasClean = Symbol('kWasClean');\r\n\r\n/**\r\n * Class representing an event.\r\n */\r\nclass Event {\r\n  /**\r\n   * Create a new `Event`.\r\n   *\r\n   * @param {String} type The name of the event\r\n   * @throws {TypeError} If the `type` argument is not specified\r\n   */\r\n  constructor(type) {\r\n    this[kTarget] = null;\r\n    this[kType] = type;\r\n  }\r\n\r\n  /**\r\n   * @type {*}\r\n   */\r\n  get target() {\r\n    return this[kTarget];\r\n  }\r\n\r\n  /**\r\n   * @type {String}\r\n   */\r\n  get type() {\r\n    return this[kType];\r\n  }\r\n}\r\n\r\nObject.defineProperty(Event.prototype, 'target', { enumerable: true });\r\nObject.defineProperty(Event.prototype, 'type', { enumerable: true });\r\n\r\n/**\r\n * Class representing a close event.\r\n *\r\n * @extends Event\r\n */\r\nclass CloseEvent extends Event {\r\n  /**\r\n   * Create a new `CloseEvent`.\r\n   *\r\n   * @param {String} type The name of the event\r\n   * @param {Object} [options] A dictionary object that allows for setting\r\n   *     attributes via object members of the same name\r\n   * @param {Number} [options.code=0] The status code explaining why the\r\n   *     connection was closed\r\n   * @param {String} [options.reason=''] A human-readable string explaining why\r\n   *     the connection was closed\r\n   * @param {Boolean} [options.wasClean=false] Indicates whether or not the\r\n   *     connection was cleanly closed\r\n   */\r\n  constructor(type, options = {}) {\r\n    super(type);\r\n\r\n    this[kCode] = options.code === undefined ? 0 : options.code;\r\n    this[kReason] = options.reason === undefined ? '' : options.reason;\r\n    this[kWasClean] = options.wasClean === undefined ? false : options.wasClean;\r\n  }\r\n\r\n  /**\r\n   * @type {Number}\r\n   */\r\n  get code() {\r\n    return this[kCode];\r\n  }\r\n\r\n  /**\r\n   * @type {String}\r\n   */\r\n  get reason() {\r\n    return this[kReason];\r\n  }\r\n\r\n  /**\r\n   * @type {Boolean}\r\n   */\r\n  get wasClean() {\r\n    return this[kWasClean];\r\n  }\r\n}\r\n\r\nObject.defineProperty(CloseEvent.prototype, 'code', { enumerable: true });\r\nObject.defineProperty(CloseEvent.prototype, 'reason', { enumerable: true });\r\nObject.defineProperty(CloseEvent.prototype, 'wasClean', { enumerable: true });\r\n\r\n/**\r\n * Class representing an error event.\r\n *\r\n * @extends Event\r\n */\r\nclass ErrorEvent extends Event {\r\n  /**\r\n   * Create a new `ErrorEvent`.\r\n   *\r\n   * @param {String} type The name of the event\r\n   * @param {Object} [options] A dictionary object that allows for setting\r\n   *     attributes via object members of the same name\r\n   * @param {*} [options.error=null] The error that generated this event\r\n   * @param {String} [options.message=''] The error message\r\n   */\r\n  constructor(type, options = {}) {\r\n    super(type);\r\n\r\n    this[kError] = options.error === undefined ? null : options.error;\r\n    this[kMessage] = options.message === undefined ? '' : options.message;\r\n  }\r\n\r\n  /**\r\n   * @type {*}\r\n   */\r\n  get error() {\r\n    return this[kError];\r\n  }\r\n\r\n  /**\r\n   * @type {String}\r\n   */\r\n  get message() {\r\n    return this[kMessage];\r\n  }\r\n}\r\n\r\nObject.defineProperty(ErrorEvent.prototype, 'error', { enumerable: true });\r\nObject.defineProperty(ErrorEvent.prototype, 'message', { enumerable: true });\r\n\r\n/**\r\n * Class representing a message event.\r\n *\r\n * @extends Event\r\n */\r\nclass MessageEvent extends Event {\r\n  /**\r\n   * Create a new `MessageEvent`.\r\n   *\r\n   * @param {String} type The name of the event\r\n   * @param {Object} [options] A dictionary object that allows for setting\r\n   *     attributes via object members of the same name\r\n   * @param {*} [options.data=null] The message content\r\n   */\r\n  constructor(type, options = {}) {\r\n    super(type);\r\n\r\n    this[kData] = options.data === undefined ? null : options.data;\r\n  }\r\n\r\n  /**\r\n   * @type {*}\r\n   */\r\n  get data() {\r\n    return this[kData];\r\n  }\r\n}\r\n\r\nObject.defineProperty(MessageEvent.prototype, 'data', { enumerable: true });\r\n\r\n/**\r\n * This provides methods for emulating the `EventTarget` interface. It's not\r\n * meant to be used directly.\r\n *\r\n * @mixin\r\n */\r\nconst EventTarget = {\r\n  /**\r\n   * Register an event listener.\r\n   *\r\n   * @param {String} type A string representing the event type to listen for\r\n   * @param {(Function|Object)} handler The listener to add\r\n   * @param {Object} [options] An options object specifies characteristics about\r\n   *     the event listener\r\n   * @param {Boolean} [options.once=false] A `Boolean` indicating that the\r\n   *     listener should be invoked at most once after being added. If `true`,\r\n   *     the listener would be automatically removed when invoked.\r\n   * @public\r\n   */\r\n  addEventListener(type, handler, options = {}) {\r\n    for (const listener of this.listeners(type)) {\r\n      if (\r\n        !options[kForOnEventAttribute] &&\r\n        listener[kListener] === handler &&\r\n        !listener[kForOnEventAttribute]\r\n      ) {\r\n        return;\r\n      }\r\n    }\r\n\r\n    let wrapper;\r\n\r\n    if (type === 'message') {\r\n      wrapper = function onMessage(data, isBinary) {\r\n        const event = new MessageEvent('message', {\r\n          data: isBinary ? data : data.toString()\r\n        });\r\n\r\n        event[kTarget] = this;\r\n        callListener(handler, this, event);\r\n      };\r\n    } else if (type === 'close') {\r\n      wrapper = function onClose(code, message) {\r\n        const event = new CloseEvent('close', {\r\n          code,\r\n          reason: message.toString(),\r\n          wasClean: this._closeFrameReceived && this._closeFrameSent\r\n        });\r\n\r\n        event[kTarget] = this;\r\n        callListener(handler, this, event);\r\n      };\r\n    } else if (type === 'error') {\r\n      wrapper = function onError(error) {\r\n        const event = new ErrorEvent('error', {\r\n          error,\r\n          message: error.message\r\n        });\r\n\r\n        event[kTarget] = this;\r\n        callListener(handler, this, event);\r\n      };\r\n    } else if (type === 'open') {\r\n      wrapper = function onOpen() {\r\n        const event = new Event('open');\r\n\r\n        event[kTarget] = this;\r\n        callListener(handler, this, event);\r\n      };\r\n    } else {\r\n      return;\r\n    }\r\n\r\n    wrapper[kForOnEventAttribute] = !!options[kForOnEventAttribute];\r\n    wrapper[kListener] = handler;\r\n\r\n    if (options.once) {\r\n      this.once(type, wrapper);\r\n    } else {\r\n      this.on(type, wrapper);\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Remove an event listener.\r\n   *\r\n   * @param {String} type A string representing the event type to remove\r\n   * @param {(Function|Object)} handler The listener to remove\r\n   * @public\r\n   */\r\n  removeEventListener(type, handler) {\r\n    for (const listener of this.listeners(type)) {\r\n      if (listener[kListener] === handler && !listener[kForOnEventAttribute]) {\r\n        this.removeListener(type, listener);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nmodule.exports = {\r\n  CloseEvent,\r\n  ErrorEvent,\r\n  Event,\r\n  EventTarget,\r\n  MessageEvent\r\n};\r\n\r\n/**\r\n * Call an event listener\r\n *\r\n * @param {(Function|Object)} listener The listener to call\r\n * @param {*} thisArg The value to use as `this`` when calling the listener\r\n * @param {Event} event The event to pass to the listener\r\n * @private\r\n */\r\nfunction callListener(listener, thisArg, event) {\r\n  if (typeof listener === 'object' && listener.handleEvent) {\r\n    listener.handleEvent.call(listener, event);\r\n  } else {\r\n    listener.call(thisArg, event);\r\n  }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ws/lib/event-target.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ws/lib/extension.js":
/*!******************************************!*\
  !*** ./node_modules/ws/lib/extension.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\r\n\r\nconst { tokenChars } = __webpack_require__(/*! ./validation */ \"(ssr)/./node_modules/ws/lib/validation.js\");\r\n\r\n/**\r\n * Adds an offer to the map of extension offers or a parameter to the map of\r\n * parameters.\r\n *\r\n * @param {Object} dest The map of extension offers or parameters\r\n * @param {String} name The extension or parameter name\r\n * @param {(Object|Boolean|String)} elem The extension parameters or the\r\n *     parameter value\r\n * @private\r\n */\r\nfunction push(dest, name, elem) {\r\n  if (dest[name] === undefined) dest[name] = [elem];\r\n  else dest[name].push(elem);\r\n}\r\n\r\n/**\r\n * Parses the `Sec-WebSocket-Extensions` header into an object.\r\n *\r\n * @param {String} header The field value of the header\r\n * @return {Object} The parsed object\r\n * @public\r\n */\r\nfunction parse(header) {\r\n  const offers = Object.create(null);\r\n  let params = Object.create(null);\r\n  let mustUnescape = false;\r\n  let isEscaping = false;\r\n  let inQuotes = false;\r\n  let extensionName;\r\n  let paramName;\r\n  let start = -1;\r\n  let code = -1;\r\n  let end = -1;\r\n  let i = 0;\r\n\r\n  for (; i < header.length; i++) {\r\n    code = header.charCodeAt(i);\r\n\r\n    if (extensionName === undefined) {\r\n      if (end === -1 && tokenChars[code] === 1) {\r\n        if (start === -1) start = i;\r\n      } else if (\r\n        i !== 0 &&\r\n        (code === 0x20 /* ' ' */ || code === 0x09) /* '\\t' */\r\n      ) {\r\n        if (end === -1 && start !== -1) end = i;\r\n      } else if (code === 0x3b /* ';' */ || code === 0x2c /* ',' */) {\r\n        if (start === -1) {\r\n          throw new SyntaxError(`Unexpected character at index ${i}`);\r\n        }\r\n\r\n        if (end === -1) end = i;\r\n        const name = header.slice(start, end);\r\n        if (code === 0x2c) {\r\n          push(offers, name, params);\r\n          params = Object.create(null);\r\n        } else {\r\n          extensionName = name;\r\n        }\r\n\r\n        start = end = -1;\r\n      } else {\r\n        throw new SyntaxError(`Unexpected character at index ${i}`);\r\n      }\r\n    } else if (paramName === undefined) {\r\n      if (end === -1 && tokenChars[code] === 1) {\r\n        if (start === -1) start = i;\r\n      } else if (code === 0x20 || code === 0x09) {\r\n        if (end === -1 && start !== -1) end = i;\r\n      } else if (code === 0x3b || code === 0x2c) {\r\n        if (start === -1) {\r\n          throw new SyntaxError(`Unexpected character at index ${i}`);\r\n        }\r\n\r\n        if (end === -1) end = i;\r\n        push(params, header.slice(start, end), true);\r\n        if (code === 0x2c) {\r\n          push(offers, extensionName, params);\r\n          params = Object.create(null);\r\n          extensionName = undefined;\r\n        }\r\n\r\n        start = end = -1;\r\n      } else if (code === 0x3d /* '=' */ && start !== -1 && end === -1) {\r\n        paramName = header.slice(start, i);\r\n        start = end = -1;\r\n      } else {\r\n        throw new SyntaxError(`Unexpected character at index ${i}`);\r\n      }\r\n    } else {\r\n      //\r\n      // The value of a quoted-string after unescaping must conform to the\r\n      // token ABNF, so only token characters are valid.\r\n      // Ref: https://tools.ietf.org/html/rfc6455#section-9.1\r\n      //\r\n      if (isEscaping) {\r\n        if (tokenChars[code] !== 1) {\r\n          throw new SyntaxError(`Unexpected character at index ${i}`);\r\n        }\r\n        if (start === -1) start = i;\r\n        else if (!mustUnescape) mustUnescape = true;\r\n        isEscaping = false;\r\n      } else if (inQuotes) {\r\n        if (tokenChars[code] === 1) {\r\n          if (start === -1) start = i;\r\n        } else if (code === 0x22 /* '\"' */ && start !== -1) {\r\n          inQuotes = false;\r\n          end = i;\r\n        } else if (code === 0x5c /* '\\' */) {\r\n          isEscaping = true;\r\n        } else {\r\n          throw new SyntaxError(`Unexpected character at index ${i}`);\r\n        }\r\n      } else if (code === 0x22 && header.charCodeAt(i - 1) === 0x3d) {\r\n        inQuotes = true;\r\n      } else if (end === -1 && tokenChars[code] === 1) {\r\n        if (start === -1) start = i;\r\n      } else if (start !== -1 && (code === 0x20 || code === 0x09)) {\r\n        if (end === -1) end = i;\r\n      } else if (code === 0x3b || code === 0x2c) {\r\n        if (start === -1) {\r\n          throw new SyntaxError(`Unexpected character at index ${i}`);\r\n        }\r\n\r\n        if (end === -1) end = i;\r\n        let value = header.slice(start, end);\r\n        if (mustUnescape) {\r\n          value = value.replace(/\\\\/g, '');\r\n          mustUnescape = false;\r\n        }\r\n        push(params, paramName, value);\r\n        if (code === 0x2c) {\r\n          push(offers, extensionName, params);\r\n          params = Object.create(null);\r\n          extensionName = undefined;\r\n        }\r\n\r\n        paramName = undefined;\r\n        start = end = -1;\r\n      } else {\r\n        throw new SyntaxError(`Unexpected character at index ${i}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  if (start === -1 || inQuotes || code === 0x20 || code === 0x09) {\r\n    throw new SyntaxError('Unexpected end of input');\r\n  }\r\n\r\n  if (end === -1) end = i;\r\n  const token = header.slice(start, end);\r\n  if (extensionName === undefined) {\r\n    push(offers, token, params);\r\n  } else {\r\n    if (paramName === undefined) {\r\n      push(params, token, true);\r\n    } else if (mustUnescape) {\r\n      push(params, paramName, token.replace(/\\\\/g, ''));\r\n    } else {\r\n      push(params, paramName, token);\r\n    }\r\n    push(offers, extensionName, params);\r\n  }\r\n\r\n  return offers;\r\n}\r\n\r\n/**\r\n * Builds the `Sec-WebSocket-Extensions` header field value.\r\n *\r\n * @param {Object} extensions The map of extensions and parameters to format\r\n * @return {String} A string representing the given object\r\n * @public\r\n */\r\nfunction format(extensions) {\r\n  return Object.keys(extensions)\r\n    .map((extension) => {\r\n      let configurations = extensions[extension];\r\n      if (!Array.isArray(configurations)) configurations = [configurations];\r\n      return configurations\r\n        .map((params) => {\r\n          return [extension]\r\n            .concat(\r\n              Object.keys(params).map((k) => {\r\n                let values = params[k];\r\n                if (!Array.isArray(values)) values = [values];\r\n                return values\r\n                  .map((v) => (v === true ? k : `${k}=${v}`))\r\n                  .join('; ');\r\n              })\r\n            )\r\n            .join('; ');\r\n        })\r\n        .join(', ');\r\n    })\r\n    .join(', ');\r\n}\r\n\r\nmodule.exports = { format, parse };\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ws/lib/extension.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ws/lib/limiter.js":
/*!****************************************!*\
  !*** ./node_modules/ws/lib/limiter.js ***!
  \****************************************/
/***/ ((module) => {

eval("\r\n\r\nconst kDone = Symbol('kDone');\r\nconst kRun = Symbol('kRun');\r\n\r\n/**\r\n * A very simple job queue with adjustable concurrency. Adapted from\r\n * https://github.com/STRML/async-limiter\r\n */\r\nclass Limiter {\r\n  /**\r\n   * Creates a new `Limiter`.\r\n   *\r\n   * @param {Number} [concurrency=Infinity] The maximum number of jobs allowed\r\n   *     to run concurrently\r\n   */\r\n  constructor(concurrency) {\r\n    this[kDone] = () => {\r\n      this.pending--;\r\n      this[kRun]();\r\n    };\r\n    this.concurrency = concurrency || Infinity;\r\n    this.jobs = [];\r\n    this.pending = 0;\r\n  }\r\n\r\n  /**\r\n   * Adds a job to the queue.\r\n   *\r\n   * @param {Function} job The job to run\r\n   * @public\r\n   */\r\n  add(job) {\r\n    this.jobs.push(job);\r\n    this[kRun]();\r\n  }\r\n\r\n  /**\r\n   * Removes a job from the queue and runs it if possible.\r\n   *\r\n   * @private\r\n   */\r\n  [kRun]() {\r\n    if (this.pending === this.concurrency) return;\r\n\r\n    if (this.jobs.length) {\r\n      const job = this.jobs.shift();\r\n\r\n      this.pending++;\r\n      job(this[kDone]);\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = Limiter;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd3MvbGliL2xpbWl0ZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxVQUFVO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHVibGljaXMta3Ytc3lzdGVtLy4vbm9kZV9tb2R1bGVzL3dzL2xpYi9saW1pdGVyLmpzPzg5NWMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xyXG5cclxuY29uc3Qga0RvbmUgPSBTeW1ib2woJ2tEb25lJyk7XHJcbmNvbnN0IGtSdW4gPSBTeW1ib2woJ2tSdW4nKTtcclxuXHJcbi8qKlxyXG4gKiBBIHZlcnkgc2ltcGxlIGpvYiBxdWV1ZSB3aXRoIGFkanVzdGFibGUgY29uY3VycmVuY3kuIEFkYXB0ZWQgZnJvbVxyXG4gKiBodHRwczovL2dpdGh1Yi5jb20vU1RSTUwvYXN5bmMtbGltaXRlclxyXG4gKi9cclxuY2xhc3MgTGltaXRlciB7XHJcbiAgLyoqXHJcbiAgICogQ3JlYXRlcyBhIG5ldyBgTGltaXRlcmAuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmN1cnJlbmN5PUluZmluaXR5XSBUaGUgbWF4aW11bSBudW1iZXIgb2Ygam9icyBhbGxvd2VkXHJcbiAgICogICAgIHRvIHJ1biBjb25jdXJyZW50bHlcclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvcihjb25jdXJyZW5jeSkge1xyXG4gICAgdGhpc1trRG9uZV0gPSAoKSA9PiB7XHJcbiAgICAgIHRoaXMucGVuZGluZy0tO1xyXG4gICAgICB0aGlzW2tSdW5dKCk7XHJcbiAgICB9O1xyXG4gICAgdGhpcy5jb25jdXJyZW5jeSA9IGNvbmN1cnJlbmN5IHx8IEluZmluaXR5O1xyXG4gICAgdGhpcy5qb2JzID0gW107XHJcbiAgICB0aGlzLnBlbmRpbmcgPSAwO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQWRkcyBhIGpvYiB0byB0aGUgcXVldWUuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBqb2IgVGhlIGpvYiB0byBydW5cclxuICAgKiBAcHVibGljXHJcbiAgICovXHJcbiAgYWRkKGpvYikge1xyXG4gICAgdGhpcy5qb2JzLnB1c2goam9iKTtcclxuICAgIHRoaXNba1J1bl0oKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlbW92ZXMgYSBqb2IgZnJvbSB0aGUgcXVldWUgYW5kIHJ1bnMgaXQgaWYgcG9zc2libGUuXHJcbiAgICpcclxuICAgKiBAcHJpdmF0ZVxyXG4gICAqL1xyXG4gIFtrUnVuXSgpIHtcclxuICAgIGlmICh0aGlzLnBlbmRpbmcgPT09IHRoaXMuY29uY3VycmVuY3kpIHJldHVybjtcclxuXHJcbiAgICBpZiAodGhpcy5qb2JzLmxlbmd0aCkge1xyXG4gICAgICBjb25zdCBqb2IgPSB0aGlzLmpvYnMuc2hpZnQoKTtcclxuXHJcbiAgICAgIHRoaXMucGVuZGluZysrO1xyXG4gICAgICBqb2IodGhpc1trRG9uZV0pO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBMaW1pdGVyO1xyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ws/lib/limiter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ws/lib/permessage-deflate.js":
/*!***************************************************!*\
  !*** ./node_modules/ws/lib/permessage-deflate.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\r\n\r\nconst zlib = __webpack_require__(/*! zlib */ \"zlib\");\r\n\r\nconst bufferUtil = __webpack_require__(/*! ./buffer-util */ \"(ssr)/./node_modules/ws/lib/buffer-util.js\");\r\nconst Limiter = __webpack_require__(/*! ./limiter */ \"(ssr)/./node_modules/ws/lib/limiter.js\");\r\nconst { kStatusCode } = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/ws/lib/constants.js\");\r\n\r\nconst FastBuffer = Buffer[Symbol.species];\r\nconst TRAILER = Buffer.from([0x00, 0x00, 0xff, 0xff]);\r\nconst kPerMessageDeflate = Symbol('permessage-deflate');\r\nconst kTotalLength = Symbol('total-length');\r\nconst kCallback = Symbol('callback');\r\nconst kBuffers = Symbol('buffers');\r\nconst kError = Symbol('error');\r\n\r\n//\r\n// We limit zlib concurrency, which prevents severe memory fragmentation\r\n// as documented in https://github.com/nodejs/node/issues/8871#issuecomment-250915913\r\n// and https://github.com/websockets/ws/issues/1202\r\n//\r\n// Intentionally global; it's the global thread pool that's an issue.\r\n//\r\nlet zlibLimiter;\r\n\r\n/**\r\n * permessage-deflate implementation.\r\n */\r\nclass PerMessageDeflate {\r\n  /**\r\n   * Creates a PerMessageDeflate instance.\r\n   *\r\n   * @param {Object} [options] Configuration options\r\n   * @param {(Boolean|Number)} [options.clientMaxWindowBits] Advertise support\r\n   *     for, or request, a custom client window size\r\n   * @param {Boolean} [options.clientNoContextTakeover=false] Advertise/\r\n   *     acknowledge disabling of client context takeover\r\n   * @param {Number} [options.concurrencyLimit=10] The number of concurrent\r\n   *     calls to zlib\r\n   * @param {(Boolean|Number)} [options.serverMaxWindowBits] Request/confirm the\r\n   *     use of a custom server window size\r\n   * @param {Boolean} [options.serverNoContextTakeover=false] Request/accept\r\n   *     disabling of server context takeover\r\n   * @param {Number} [options.threshold=1024] Size (in bytes) below which\r\n   *     messages should not be compressed if context takeover is disabled\r\n   * @param {Object} [options.zlibDeflateOptions] Options to pass to zlib on\r\n   *     deflate\r\n   * @param {Object} [options.zlibInflateOptions] Options to pass to zlib on\r\n   *     inflate\r\n   * @param {Boolean} [isServer=false] Create the instance in either server or\r\n   *     client mode\r\n   * @param {Number} [maxPayload=0] The maximum allowed message length\r\n   */\r\n  constructor(options, isServer, maxPayload) {\r\n    this._maxPayload = maxPayload | 0;\r\n    this._options = options || {};\r\n    this._threshold =\r\n      this._options.threshold !== undefined ? this._options.threshold : 1024;\r\n    this._isServer = !!isServer;\r\n    this._deflate = null;\r\n    this._inflate = null;\r\n\r\n    this.params = null;\r\n\r\n    if (!zlibLimiter) {\r\n      const concurrency =\r\n        this._options.concurrencyLimit !== undefined\r\n          ? this._options.concurrencyLimit\r\n          : 10;\r\n      zlibLimiter = new Limiter(concurrency);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @type {String}\r\n   */\r\n  static get extensionName() {\r\n    return 'permessage-deflate';\r\n  }\r\n\r\n  /**\r\n   * Create an extension negotiation offer.\r\n   *\r\n   * @return {Object} Extension parameters\r\n   * @public\r\n   */\r\n  offer() {\r\n    const params = {};\r\n\r\n    if (this._options.serverNoContextTakeover) {\r\n      params.server_no_context_takeover = true;\r\n    }\r\n    if (this._options.clientNoContextTakeover) {\r\n      params.client_no_context_takeover = true;\r\n    }\r\n    if (this._options.serverMaxWindowBits) {\r\n      params.server_max_window_bits = this._options.serverMaxWindowBits;\r\n    }\r\n    if (this._options.clientMaxWindowBits) {\r\n      params.client_max_window_bits = this._options.clientMaxWindowBits;\r\n    } else if (this._options.clientMaxWindowBits == null) {\r\n      params.client_max_window_bits = true;\r\n    }\r\n\r\n    return params;\r\n  }\r\n\r\n  /**\r\n   * Accept an extension negotiation offer/response.\r\n   *\r\n   * @param {Array} configurations The extension negotiation offers/reponse\r\n   * @return {Object} Accepted configuration\r\n   * @public\r\n   */\r\n  accept(configurations) {\r\n    configurations = this.normalizeParams(configurations);\r\n\r\n    this.params = this._isServer\r\n      ? this.acceptAsServer(configurations)\r\n      : this.acceptAsClient(configurations);\r\n\r\n    return this.params;\r\n  }\r\n\r\n  /**\r\n   * Releases all resources used by the extension.\r\n   *\r\n   * @public\r\n   */\r\n  cleanup() {\r\n    if (this._inflate) {\r\n      this._inflate.close();\r\n      this._inflate = null;\r\n    }\r\n\r\n    if (this._deflate) {\r\n      const callback = this._deflate[kCallback];\r\n\r\n      this._deflate.close();\r\n      this._deflate = null;\r\n\r\n      if (callback) {\r\n        callback(\r\n          new Error(\r\n            'The deflate stream was closed while data was being processed'\r\n          )\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   *  Accept an extension negotiation offer.\r\n   *\r\n   * @param {Array} offers The extension negotiation offers\r\n   * @return {Object} Accepted configuration\r\n   * @private\r\n   */\r\n  acceptAsServer(offers) {\r\n    const opts = this._options;\r\n    const accepted = offers.find((params) => {\r\n      if (\r\n        (opts.serverNoContextTakeover === false &&\r\n          params.server_no_context_takeover) ||\r\n        (params.server_max_window_bits &&\r\n          (opts.serverMaxWindowBits === false ||\r\n            (typeof opts.serverMaxWindowBits === 'number' &&\r\n              opts.serverMaxWindowBits > params.server_max_window_bits))) ||\r\n        (typeof opts.clientMaxWindowBits === 'number' &&\r\n          !params.client_max_window_bits)\r\n      ) {\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n\r\n    if (!accepted) {\r\n      throw new Error('None of the extension offers can be accepted');\r\n    }\r\n\r\n    if (opts.serverNoContextTakeover) {\r\n      accepted.server_no_context_takeover = true;\r\n    }\r\n    if (opts.clientNoContextTakeover) {\r\n      accepted.client_no_context_takeover = true;\r\n    }\r\n    if (typeof opts.serverMaxWindowBits === 'number') {\r\n      accepted.server_max_window_bits = opts.serverMaxWindowBits;\r\n    }\r\n    if (typeof opts.clientMaxWindowBits === 'number') {\r\n      accepted.client_max_window_bits = opts.clientMaxWindowBits;\r\n    } else if (\r\n      accepted.client_max_window_bits === true ||\r\n      opts.clientMaxWindowBits === false\r\n    ) {\r\n      delete accepted.client_max_window_bits;\r\n    }\r\n\r\n    return accepted;\r\n  }\r\n\r\n  /**\r\n   * Accept the extension negotiation response.\r\n   *\r\n   * @param {Array} response The extension negotiation response\r\n   * @return {Object} Accepted configuration\r\n   * @private\r\n   */\r\n  acceptAsClient(response) {\r\n    const params = response[0];\r\n\r\n    if (\r\n      this._options.clientNoContextTakeover === false &&\r\n      params.client_no_context_takeover\r\n    ) {\r\n      throw new Error('Unexpected parameter \"client_no_context_takeover\"');\r\n    }\r\n\r\n    if (!params.client_max_window_bits) {\r\n      if (typeof this._options.clientMaxWindowBits === 'number') {\r\n        params.client_max_window_bits = this._options.clientMaxWindowBits;\r\n      }\r\n    } else if (\r\n      this._options.clientMaxWindowBits === false ||\r\n      (typeof this._options.clientMaxWindowBits === 'number' &&\r\n        params.client_max_window_bits > this._options.clientMaxWindowBits)\r\n    ) {\r\n      throw new Error(\r\n        'Unexpected or invalid parameter \"client_max_window_bits\"'\r\n      );\r\n    }\r\n\r\n    return params;\r\n  }\r\n\r\n  /**\r\n   * Normalize parameters.\r\n   *\r\n   * @param {Array} configurations The extension negotiation offers/reponse\r\n   * @return {Array} The offers/response with normalized parameters\r\n   * @private\r\n   */\r\n  normalizeParams(configurations) {\r\n    configurations.forEach((params) => {\r\n      Object.keys(params).forEach((key) => {\r\n        let value = params[key];\r\n\r\n        if (value.length > 1) {\r\n          throw new Error(`Parameter \"${key}\" must have only a single value`);\r\n        }\r\n\r\n        value = value[0];\r\n\r\n        if (key === 'client_max_window_bits') {\r\n          if (value !== true) {\r\n            const num = +value;\r\n            if (!Number.isInteger(num) || num < 8 || num > 15) {\r\n              throw new TypeError(\r\n                `Invalid value for parameter \"${key}\": ${value}`\r\n              );\r\n            }\r\n            value = num;\r\n          } else if (!this._isServer) {\r\n            throw new TypeError(\r\n              `Invalid value for parameter \"${key}\": ${value}`\r\n            );\r\n          }\r\n        } else if (key === 'server_max_window_bits') {\r\n          const num = +value;\r\n          if (!Number.isInteger(num) || num < 8 || num > 15) {\r\n            throw new TypeError(\r\n              `Invalid value for parameter \"${key}\": ${value}`\r\n            );\r\n          }\r\n          value = num;\r\n        } else if (\r\n          key === 'client_no_context_takeover' ||\r\n          key === 'server_no_context_takeover'\r\n        ) {\r\n          if (value !== true) {\r\n            throw new TypeError(\r\n              `Invalid value for parameter \"${key}\": ${value}`\r\n            );\r\n          }\r\n        } else {\r\n          throw new Error(`Unknown parameter \"${key}\"`);\r\n        }\r\n\r\n        params[key] = value;\r\n      });\r\n    });\r\n\r\n    return configurations;\r\n  }\r\n\r\n  /**\r\n   * Decompress data. Concurrency limited.\r\n   *\r\n   * @param {Buffer} data Compressed data\r\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\r\n   * @param {Function} callback Callback\r\n   * @public\r\n   */\r\n  decompress(data, fin, callback) {\r\n    zlibLimiter.add((done) => {\r\n      this._decompress(data, fin, (err, result) => {\r\n        done();\r\n        callback(err, result);\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Compress data. Concurrency limited.\r\n   *\r\n   * @param {(Buffer|String)} data Data to compress\r\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\r\n   * @param {Function} callback Callback\r\n   * @public\r\n   */\r\n  compress(data, fin, callback) {\r\n    zlibLimiter.add((done) => {\r\n      this._compress(data, fin, (err, result) => {\r\n        done();\r\n        callback(err, result);\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Decompress data.\r\n   *\r\n   * @param {Buffer} data Compressed data\r\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\r\n   * @param {Function} callback Callback\r\n   * @private\r\n   */\r\n  _decompress(data, fin, callback) {\r\n    const endpoint = this._isServer ? 'client' : 'server';\r\n\r\n    if (!this._inflate) {\r\n      const key = `${endpoint}_max_window_bits`;\r\n      const windowBits =\r\n        typeof this.params[key] !== 'number'\r\n          ? zlib.Z_DEFAULT_WINDOWBITS\r\n          : this.params[key];\r\n\r\n      this._inflate = zlib.createInflateRaw({\r\n        ...this._options.zlibInflateOptions,\r\n        windowBits\r\n      });\r\n      this._inflate[kPerMessageDeflate] = this;\r\n      this._inflate[kTotalLength] = 0;\r\n      this._inflate[kBuffers] = [];\r\n      this._inflate.on('error', inflateOnError);\r\n      this._inflate.on('data', inflateOnData);\r\n    }\r\n\r\n    this._inflate[kCallback] = callback;\r\n\r\n    this._inflate.write(data);\r\n    if (fin) this._inflate.write(TRAILER);\r\n\r\n    this._inflate.flush(() => {\r\n      const err = this._inflate[kError];\r\n\r\n      if (err) {\r\n        this._inflate.close();\r\n        this._inflate = null;\r\n        callback(err);\r\n        return;\r\n      }\r\n\r\n      const data = bufferUtil.concat(\r\n        this._inflate[kBuffers],\r\n        this._inflate[kTotalLength]\r\n      );\r\n\r\n      if (this._inflate._readableState.endEmitted) {\r\n        this._inflate.close();\r\n        this._inflate = null;\r\n      } else {\r\n        this._inflate[kTotalLength] = 0;\r\n        this._inflate[kBuffers] = [];\r\n\r\n        if (fin && this.params[`${endpoint}_no_context_takeover`]) {\r\n          this._inflate.reset();\r\n        }\r\n      }\r\n\r\n      callback(null, data);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Compress data.\r\n   *\r\n   * @param {(Buffer|String)} data Data to compress\r\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\r\n   * @param {Function} callback Callback\r\n   * @private\r\n   */\r\n  _compress(data, fin, callback) {\r\n    const endpoint = this._isServer ? 'server' : 'client';\r\n\r\n    if (!this._deflate) {\r\n      const key = `${endpoint}_max_window_bits`;\r\n      const windowBits =\r\n        typeof this.params[key] !== 'number'\r\n          ? zlib.Z_DEFAULT_WINDOWBITS\r\n          : this.params[key];\r\n\r\n      this._deflate = zlib.createDeflateRaw({\r\n        ...this._options.zlibDeflateOptions,\r\n        windowBits\r\n      });\r\n\r\n      this._deflate[kTotalLength] = 0;\r\n      this._deflate[kBuffers] = [];\r\n\r\n      this._deflate.on('data', deflateOnData);\r\n    }\r\n\r\n    this._deflate[kCallback] = callback;\r\n\r\n    this._deflate.write(data);\r\n    this._deflate.flush(zlib.Z_SYNC_FLUSH, () => {\r\n      if (!this._deflate) {\r\n        //\r\n        // The deflate stream was closed while data was being processed.\r\n        //\r\n        return;\r\n      }\r\n\r\n      let data = bufferUtil.concat(\r\n        this._deflate[kBuffers],\r\n        this._deflate[kTotalLength]\r\n      );\r\n\r\n      if (fin) {\r\n        data = new FastBuffer(data.buffer, data.byteOffset, data.length - 4);\r\n      }\r\n\r\n      //\r\n      // Ensure that the callback will not be called again in\r\n      // `PerMessageDeflate#cleanup()`.\r\n      //\r\n      this._deflate[kCallback] = null;\r\n\r\n      this._deflate[kTotalLength] = 0;\r\n      this._deflate[kBuffers] = [];\r\n\r\n      if (fin && this.params[`${endpoint}_no_context_takeover`]) {\r\n        this._deflate.reset();\r\n      }\r\n\r\n      callback(null, data);\r\n    });\r\n  }\r\n}\r\n\r\nmodule.exports = PerMessageDeflate;\r\n\r\n/**\r\n * The listener of the `zlib.DeflateRaw` stream `'data'` event.\r\n *\r\n * @param {Buffer} chunk A chunk of data\r\n * @private\r\n */\r\nfunction deflateOnData(chunk) {\r\n  this[kBuffers].push(chunk);\r\n  this[kTotalLength] += chunk.length;\r\n}\r\n\r\n/**\r\n * The listener of the `zlib.InflateRaw` stream `'data'` event.\r\n *\r\n * @param {Buffer} chunk A chunk of data\r\n * @private\r\n */\r\nfunction inflateOnData(chunk) {\r\n  this[kTotalLength] += chunk.length;\r\n\r\n  if (\r\n    this[kPerMessageDeflate]._maxPayload < 1 ||\r\n    this[kTotalLength] <= this[kPerMessageDeflate]._maxPayload\r\n  ) {\r\n    this[kBuffers].push(chunk);\r\n    return;\r\n  }\r\n\r\n  this[kError] = new RangeError('Max payload size exceeded');\r\n  this[kError].code = 'WS_ERR_UNSUPPORTED_MESSAGE_LENGTH';\r\n  this[kError][kStatusCode] = 1009;\r\n  this.removeListener('data', inflateOnData);\r\n  this.reset();\r\n}\r\n\r\n/**\r\n * The listener of the `zlib.InflateRaw` stream `'error'` event.\r\n *\r\n * @param {Error} err The emitted error\r\n * @private\r\n */\r\nfunction inflateOnError(err) {\r\n  //\r\n  // There is no need to call `Zlib#close()` as the handle is automatically\r\n  // closed when an error is emitted.\r\n  //\r\n  this[kPerMessageDeflate]._inflate = null;\r\n  err[kStatusCode] = 1007;\r\n  this[kCallback](err);\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd3MvbGliL3Blcm1lc3NhZ2UtZGVmbGF0ZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0EsYUFBYSxtQkFBTyxDQUFDLGtCQUFNO0FBQzNCO0FBQ0EsbUJBQW1CLG1CQUFPLENBQUMsaUVBQWU7QUFDMUMsZ0JBQWdCLG1CQUFPLENBQUMseURBQVc7QUFDbkMsUUFBUSxjQUFjLEVBQUUsbUJBQU8sQ0FBQyw2REFBYTtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsa0JBQWtCO0FBQy9CO0FBQ0EsYUFBYSxTQUFTO0FBQ3RCO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCO0FBQ0EsYUFBYSxrQkFBa0I7QUFDL0I7QUFDQSxhQUFhLFNBQVM7QUFDdEI7QUFDQSxhQUFhLFFBQVE7QUFDckI7QUFDQSxhQUFhLFFBQVE7QUFDckI7QUFDQSxhQUFhLFFBQVE7QUFDckI7QUFDQSxhQUFhLFNBQVM7QUFDdEI7QUFDQSxhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsUUFBUTtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLE9BQU87QUFDcEIsY0FBYyxRQUFRO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsT0FBTztBQUNwQixjQUFjLFFBQVE7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxPQUFPO0FBQ3BCLGNBQWMsUUFBUTtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLE9BQU87QUFDcEIsY0FBYyxPQUFPO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3Q0FBd0MsSUFBSTtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnREFBZ0QsSUFBSSxLQUFLLE1BQU07QUFDL0Q7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0EsOENBQThDLElBQUksS0FBSyxNQUFNO0FBQzdEO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0EsOENBQThDLElBQUksS0FBSyxNQUFNO0FBQzdEO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDLElBQUksS0FBSyxNQUFNO0FBQzdEO0FBQ0E7QUFDQSxVQUFVO0FBQ1YsZ0RBQWdELElBQUk7QUFDcEQ7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixhQUFhLFNBQVM7QUFDdEIsYUFBYSxVQUFVO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxpQkFBaUI7QUFDOUIsYUFBYSxTQUFTO0FBQ3RCLGFBQWEsVUFBVTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixhQUFhLFNBQVM7QUFDdEIsYUFBYSxVQUFVO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixTQUFTO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyxTQUFTO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsaUJBQWlCO0FBQzlCLGFBQWEsU0FBUztBQUN0QixhQUFhLFVBQVU7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLFNBQVM7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0MsU0FBUztBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3B1YmxpY2lzLWt2LXN5c3RlbS8uL25vZGVfbW9kdWxlcy93cy9saWIvcGVybWVzc2FnZS1kZWZsYXRlLmpzPzlmMzUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xyXG5cclxuY29uc3QgemxpYiA9IHJlcXVpcmUoJ3psaWInKTtcclxuXHJcbmNvbnN0IGJ1ZmZlclV0aWwgPSByZXF1aXJlKCcuL2J1ZmZlci11dGlsJyk7XHJcbmNvbnN0IExpbWl0ZXIgPSByZXF1aXJlKCcuL2xpbWl0ZXInKTtcclxuY29uc3QgeyBrU3RhdHVzQ29kZSB9ID0gcmVxdWlyZSgnLi9jb25zdGFudHMnKTtcclxuXHJcbmNvbnN0IEZhc3RCdWZmZXIgPSBCdWZmZXJbU3ltYm9sLnNwZWNpZXNdO1xyXG5jb25zdCBUUkFJTEVSID0gQnVmZmVyLmZyb20oWzB4MDAsIDB4MDAsIDB4ZmYsIDB4ZmZdKTtcclxuY29uc3Qga1Blck1lc3NhZ2VEZWZsYXRlID0gU3ltYm9sKCdwZXJtZXNzYWdlLWRlZmxhdGUnKTtcclxuY29uc3Qga1RvdGFsTGVuZ3RoID0gU3ltYm9sKCd0b3RhbC1sZW5ndGgnKTtcclxuY29uc3Qga0NhbGxiYWNrID0gU3ltYm9sKCdjYWxsYmFjaycpO1xyXG5jb25zdCBrQnVmZmVycyA9IFN5bWJvbCgnYnVmZmVycycpO1xyXG5jb25zdCBrRXJyb3IgPSBTeW1ib2woJ2Vycm9yJyk7XHJcblxyXG4vL1xyXG4vLyBXZSBsaW1pdCB6bGliIGNvbmN1cnJlbmN5LCB3aGljaCBwcmV2ZW50cyBzZXZlcmUgbWVtb3J5IGZyYWdtZW50YXRpb25cclxuLy8gYXMgZG9jdW1lbnRlZCBpbiBodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL25vZGUvaXNzdWVzLzg4NzEjaXNzdWVjb21tZW50LTI1MDkxNTkxM1xyXG4vLyBhbmQgaHR0cHM6Ly9naXRodWIuY29tL3dlYnNvY2tldHMvd3MvaXNzdWVzLzEyMDJcclxuLy9cclxuLy8gSW50ZW50aW9uYWxseSBnbG9iYWw7IGl0J3MgdGhlIGdsb2JhbCB0aHJlYWQgcG9vbCB0aGF0J3MgYW4gaXNzdWUuXHJcbi8vXHJcbmxldCB6bGliTGltaXRlcjtcclxuXHJcbi8qKlxyXG4gKiBwZXJtZXNzYWdlLWRlZmxhdGUgaW1wbGVtZW50YXRpb24uXHJcbiAqL1xyXG5jbGFzcyBQZXJNZXNzYWdlRGVmbGF0ZSB7XHJcbiAgLyoqXHJcbiAgICogQ3JlYXRlcyBhIFBlck1lc3NhZ2VEZWZsYXRlIGluc3RhbmNlLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSBDb25maWd1cmF0aW9uIG9wdGlvbnNcclxuICAgKiBAcGFyYW0geyhCb29sZWFufE51bWJlcil9IFtvcHRpb25zLmNsaWVudE1heFdpbmRvd0JpdHNdIEFkdmVydGlzZSBzdXBwb3J0XHJcbiAgICogICAgIGZvciwgb3IgcmVxdWVzdCwgYSBjdXN0b20gY2xpZW50IHdpbmRvdyBzaXplXHJcbiAgICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5jbGllbnROb0NvbnRleHRUYWtlb3Zlcj1mYWxzZV0gQWR2ZXJ0aXNlL1xyXG4gICAqICAgICBhY2tub3dsZWRnZSBkaXNhYmxpbmcgb2YgY2xpZW50IGNvbnRleHQgdGFrZW92ZXJcclxuICAgKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMuY29uY3VycmVuY3lMaW1pdD0xMF0gVGhlIG51bWJlciBvZiBjb25jdXJyZW50XHJcbiAgICogICAgIGNhbGxzIHRvIHpsaWJcclxuICAgKiBAcGFyYW0geyhCb29sZWFufE51bWJlcil9IFtvcHRpb25zLnNlcnZlck1heFdpbmRvd0JpdHNdIFJlcXVlc3QvY29uZmlybSB0aGVcclxuICAgKiAgICAgdXNlIG9mIGEgY3VzdG9tIHNlcnZlciB3aW5kb3cgc2l6ZVxyXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMuc2VydmVyTm9Db250ZXh0VGFrZW92ZXI9ZmFsc2VdIFJlcXVlc3QvYWNjZXB0XHJcbiAgICogICAgIGRpc2FibGluZyBvZiBzZXJ2ZXIgY29udGV4dCB0YWtlb3ZlclxyXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy50aHJlc2hvbGQ9MTAyNF0gU2l6ZSAoaW4gYnl0ZXMpIGJlbG93IHdoaWNoXHJcbiAgICogICAgIG1lc3NhZ2VzIHNob3VsZCBub3QgYmUgY29tcHJlc3NlZCBpZiBjb250ZXh0IHRha2VvdmVyIGlzIGRpc2FibGVkXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zLnpsaWJEZWZsYXRlT3B0aW9uc10gT3B0aW9ucyB0byBwYXNzIHRvIHpsaWIgb25cclxuICAgKiAgICAgZGVmbGF0ZVxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucy56bGliSW5mbGF0ZU9wdGlvbnNdIE9wdGlvbnMgdG8gcGFzcyB0byB6bGliIG9uXHJcbiAgICogICAgIGluZmxhdGVcclxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtpc1NlcnZlcj1mYWxzZV0gQ3JlYXRlIHRoZSBpbnN0YW5jZSBpbiBlaXRoZXIgc2VydmVyIG9yXHJcbiAgICogICAgIGNsaWVudCBtb2RlXHJcbiAgICogQHBhcmFtIHtOdW1iZXJ9IFttYXhQYXlsb2FkPTBdIFRoZSBtYXhpbXVtIGFsbG93ZWQgbWVzc2FnZSBsZW5ndGhcclxuICAgKi9cclxuICBjb25zdHJ1Y3RvcihvcHRpb25zLCBpc1NlcnZlciwgbWF4UGF5bG9hZCkge1xyXG4gICAgdGhpcy5fbWF4UGF5bG9hZCA9IG1heFBheWxvYWQgfCAwO1xyXG4gICAgdGhpcy5fb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XHJcbiAgICB0aGlzLl90aHJlc2hvbGQgPVxyXG4gICAgICB0aGlzLl9vcHRpb25zLnRocmVzaG9sZCAhPT0gdW5kZWZpbmVkID8gdGhpcy5fb3B0aW9ucy50aHJlc2hvbGQgOiAxMDI0O1xyXG4gICAgdGhpcy5faXNTZXJ2ZXIgPSAhIWlzU2VydmVyO1xyXG4gICAgdGhpcy5fZGVmbGF0ZSA9IG51bGw7XHJcbiAgICB0aGlzLl9pbmZsYXRlID0gbnVsbDtcclxuXHJcbiAgICB0aGlzLnBhcmFtcyA9IG51bGw7XHJcblxyXG4gICAgaWYgKCF6bGliTGltaXRlcikge1xyXG4gICAgICBjb25zdCBjb25jdXJyZW5jeSA9XHJcbiAgICAgICAgdGhpcy5fb3B0aW9ucy5jb25jdXJyZW5jeUxpbWl0ICE9PSB1bmRlZmluZWRcclxuICAgICAgICAgID8gdGhpcy5fb3B0aW9ucy5jb25jdXJyZW5jeUxpbWl0XHJcbiAgICAgICAgICA6IDEwO1xyXG4gICAgICB6bGliTGltaXRlciA9IG5ldyBMaW1pdGVyKGNvbmN1cnJlbmN5KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEB0eXBlIHtTdHJpbmd9XHJcbiAgICovXHJcbiAgc3RhdGljIGdldCBleHRlbnNpb25OYW1lKCkge1xyXG4gICAgcmV0dXJuICdwZXJtZXNzYWdlLWRlZmxhdGUnO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ3JlYXRlIGFuIGV4dGVuc2lvbiBuZWdvdGlhdGlvbiBvZmZlci5cclxuICAgKlxyXG4gICAqIEByZXR1cm4ge09iamVjdH0gRXh0ZW5zaW9uIHBhcmFtZXRlcnNcclxuICAgKiBAcHVibGljXHJcbiAgICovXHJcbiAgb2ZmZXIoKSB7XHJcbiAgICBjb25zdCBwYXJhbXMgPSB7fTtcclxuXHJcbiAgICBpZiAodGhpcy5fb3B0aW9ucy5zZXJ2ZXJOb0NvbnRleHRUYWtlb3Zlcikge1xyXG4gICAgICBwYXJhbXMuc2VydmVyX25vX2NvbnRleHRfdGFrZW92ZXIgPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXMuX29wdGlvbnMuY2xpZW50Tm9Db250ZXh0VGFrZW92ZXIpIHtcclxuICAgICAgcGFyYW1zLmNsaWVudF9ub19jb250ZXh0X3Rha2VvdmVyID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIGlmICh0aGlzLl9vcHRpb25zLnNlcnZlck1heFdpbmRvd0JpdHMpIHtcclxuICAgICAgcGFyYW1zLnNlcnZlcl9tYXhfd2luZG93X2JpdHMgPSB0aGlzLl9vcHRpb25zLnNlcnZlck1heFdpbmRvd0JpdHM7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpcy5fb3B0aW9ucy5jbGllbnRNYXhXaW5kb3dCaXRzKSB7XHJcbiAgICAgIHBhcmFtcy5jbGllbnRfbWF4X3dpbmRvd19iaXRzID0gdGhpcy5fb3B0aW9ucy5jbGllbnRNYXhXaW5kb3dCaXRzO1xyXG4gICAgfSBlbHNlIGlmICh0aGlzLl9vcHRpb25zLmNsaWVudE1heFdpbmRvd0JpdHMgPT0gbnVsbCkge1xyXG4gICAgICBwYXJhbXMuY2xpZW50X21heF93aW5kb3dfYml0cyA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHBhcmFtcztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEFjY2VwdCBhbiBleHRlbnNpb24gbmVnb3RpYXRpb24gb2ZmZXIvcmVzcG9uc2UuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge0FycmF5fSBjb25maWd1cmF0aW9ucyBUaGUgZXh0ZW5zaW9uIG5lZ290aWF0aW9uIG9mZmVycy9yZXBvbnNlXHJcbiAgICogQHJldHVybiB7T2JqZWN0fSBBY2NlcHRlZCBjb25maWd1cmF0aW9uXHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIGFjY2VwdChjb25maWd1cmF0aW9ucykge1xyXG4gICAgY29uZmlndXJhdGlvbnMgPSB0aGlzLm5vcm1hbGl6ZVBhcmFtcyhjb25maWd1cmF0aW9ucyk7XHJcblxyXG4gICAgdGhpcy5wYXJhbXMgPSB0aGlzLl9pc1NlcnZlclxyXG4gICAgICA/IHRoaXMuYWNjZXB0QXNTZXJ2ZXIoY29uZmlndXJhdGlvbnMpXHJcbiAgICAgIDogdGhpcy5hY2NlcHRBc0NsaWVudChjb25maWd1cmF0aW9ucyk7XHJcblxyXG4gICAgcmV0dXJuIHRoaXMucGFyYW1zO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmVsZWFzZXMgYWxsIHJlc291cmNlcyB1c2VkIGJ5IHRoZSBleHRlbnNpb24uXHJcbiAgICpcclxuICAgKiBAcHVibGljXHJcbiAgICovXHJcbiAgY2xlYW51cCgpIHtcclxuICAgIGlmICh0aGlzLl9pbmZsYXRlKSB7XHJcbiAgICAgIHRoaXMuX2luZmxhdGUuY2xvc2UoKTtcclxuICAgICAgdGhpcy5faW5mbGF0ZSA9IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMuX2RlZmxhdGUpIHtcclxuICAgICAgY29uc3QgY2FsbGJhY2sgPSB0aGlzLl9kZWZsYXRlW2tDYWxsYmFja107XHJcblxyXG4gICAgICB0aGlzLl9kZWZsYXRlLmNsb3NlKCk7XHJcbiAgICAgIHRoaXMuX2RlZmxhdGUgPSBudWxsO1xyXG5cclxuICAgICAgaWYgKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgY2FsbGJhY2soXHJcbiAgICAgICAgICBuZXcgRXJyb3IoXHJcbiAgICAgICAgICAgICdUaGUgZGVmbGF0ZSBzdHJlYW0gd2FzIGNsb3NlZCB3aGlsZSBkYXRhIHdhcyBiZWluZyBwcm9jZXNzZWQnXHJcbiAgICAgICAgICApXHJcbiAgICAgICAgKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogIEFjY2VwdCBhbiBleHRlbnNpb24gbmVnb3RpYXRpb24gb2ZmZXIuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge0FycmF5fSBvZmZlcnMgVGhlIGV4dGVuc2lvbiBuZWdvdGlhdGlvbiBvZmZlcnNcclxuICAgKiBAcmV0dXJuIHtPYmplY3R9IEFjY2VwdGVkIGNvbmZpZ3VyYXRpb25cclxuICAgKiBAcHJpdmF0ZVxyXG4gICAqL1xyXG4gIGFjY2VwdEFzU2VydmVyKG9mZmVycykge1xyXG4gICAgY29uc3Qgb3B0cyA9IHRoaXMuX29wdGlvbnM7XHJcbiAgICBjb25zdCBhY2NlcHRlZCA9IG9mZmVycy5maW5kKChwYXJhbXMpID0+IHtcclxuICAgICAgaWYgKFxyXG4gICAgICAgIChvcHRzLnNlcnZlck5vQ29udGV4dFRha2VvdmVyID09PSBmYWxzZSAmJlxyXG4gICAgICAgICAgcGFyYW1zLnNlcnZlcl9ub19jb250ZXh0X3Rha2VvdmVyKSB8fFxyXG4gICAgICAgIChwYXJhbXMuc2VydmVyX21heF93aW5kb3dfYml0cyAmJlxyXG4gICAgICAgICAgKG9wdHMuc2VydmVyTWF4V2luZG93Qml0cyA9PT0gZmFsc2UgfHxcclxuICAgICAgICAgICAgKHR5cGVvZiBvcHRzLnNlcnZlck1heFdpbmRvd0JpdHMgPT09ICdudW1iZXInICYmXHJcbiAgICAgICAgICAgICAgb3B0cy5zZXJ2ZXJNYXhXaW5kb3dCaXRzID4gcGFyYW1zLnNlcnZlcl9tYXhfd2luZG93X2JpdHMpKSkgfHxcclxuICAgICAgICAodHlwZW9mIG9wdHMuY2xpZW50TWF4V2luZG93Qml0cyA9PT0gJ251bWJlcicgJiZcclxuICAgICAgICAgICFwYXJhbXMuY2xpZW50X21heF93aW5kb3dfYml0cylcclxuICAgICAgKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH0pO1xyXG5cclxuICAgIGlmICghYWNjZXB0ZWQpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdOb25lIG9mIHRoZSBleHRlbnNpb24gb2ZmZXJzIGNhbiBiZSBhY2NlcHRlZCcpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChvcHRzLnNlcnZlck5vQ29udGV4dFRha2VvdmVyKSB7XHJcbiAgICAgIGFjY2VwdGVkLnNlcnZlcl9ub19jb250ZXh0X3Rha2VvdmVyID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIGlmIChvcHRzLmNsaWVudE5vQ29udGV4dFRha2VvdmVyKSB7XHJcbiAgICAgIGFjY2VwdGVkLmNsaWVudF9ub19jb250ZXh0X3Rha2VvdmVyID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIGlmICh0eXBlb2Ygb3B0cy5zZXJ2ZXJNYXhXaW5kb3dCaXRzID09PSAnbnVtYmVyJykge1xyXG4gICAgICBhY2NlcHRlZC5zZXJ2ZXJfbWF4X3dpbmRvd19iaXRzID0gb3B0cy5zZXJ2ZXJNYXhXaW5kb3dCaXRzO1xyXG4gICAgfVxyXG4gICAgaWYgKHR5cGVvZiBvcHRzLmNsaWVudE1heFdpbmRvd0JpdHMgPT09ICdudW1iZXInKSB7XHJcbiAgICAgIGFjY2VwdGVkLmNsaWVudF9tYXhfd2luZG93X2JpdHMgPSBvcHRzLmNsaWVudE1heFdpbmRvd0JpdHM7XHJcbiAgICB9IGVsc2UgaWYgKFxyXG4gICAgICBhY2NlcHRlZC5jbGllbnRfbWF4X3dpbmRvd19iaXRzID09PSB0cnVlIHx8XHJcbiAgICAgIG9wdHMuY2xpZW50TWF4V2luZG93Qml0cyA9PT0gZmFsc2VcclxuICAgICkge1xyXG4gICAgICBkZWxldGUgYWNjZXB0ZWQuY2xpZW50X21heF93aW5kb3dfYml0cztcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gYWNjZXB0ZWQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBBY2NlcHQgdGhlIGV4dGVuc2lvbiBuZWdvdGlhdGlvbiByZXNwb25zZS5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7QXJyYXl9IHJlc3BvbnNlIFRoZSBleHRlbnNpb24gbmVnb3RpYXRpb24gcmVzcG9uc2VcclxuICAgKiBAcmV0dXJuIHtPYmplY3R9IEFjY2VwdGVkIGNvbmZpZ3VyYXRpb25cclxuICAgKiBAcHJpdmF0ZVxyXG4gICAqL1xyXG4gIGFjY2VwdEFzQ2xpZW50KHJlc3BvbnNlKSB7XHJcbiAgICBjb25zdCBwYXJhbXMgPSByZXNwb25zZVswXTtcclxuXHJcbiAgICBpZiAoXHJcbiAgICAgIHRoaXMuX29wdGlvbnMuY2xpZW50Tm9Db250ZXh0VGFrZW92ZXIgPT09IGZhbHNlICYmXHJcbiAgICAgIHBhcmFtcy5jbGllbnRfbm9fY29udGV4dF90YWtlb3ZlclxyXG4gICAgKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignVW5leHBlY3RlZCBwYXJhbWV0ZXIgXCJjbGllbnRfbm9fY29udGV4dF90YWtlb3ZlclwiJyk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCFwYXJhbXMuY2xpZW50X21heF93aW5kb3dfYml0cykge1xyXG4gICAgICBpZiAodHlwZW9mIHRoaXMuX29wdGlvbnMuY2xpZW50TWF4V2luZG93Qml0cyA9PT0gJ251bWJlcicpIHtcclxuICAgICAgICBwYXJhbXMuY2xpZW50X21heF93aW5kb3dfYml0cyA9IHRoaXMuX29wdGlvbnMuY2xpZW50TWF4V2luZG93Qml0cztcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIGlmIChcclxuICAgICAgdGhpcy5fb3B0aW9ucy5jbGllbnRNYXhXaW5kb3dCaXRzID09PSBmYWxzZSB8fFxyXG4gICAgICAodHlwZW9mIHRoaXMuX29wdGlvbnMuY2xpZW50TWF4V2luZG93Qml0cyA9PT0gJ251bWJlcicgJiZcclxuICAgICAgICBwYXJhbXMuY2xpZW50X21heF93aW5kb3dfYml0cyA+IHRoaXMuX29wdGlvbnMuY2xpZW50TWF4V2luZG93Qml0cylcclxuICAgICkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXHJcbiAgICAgICAgJ1VuZXhwZWN0ZWQgb3IgaW52YWxpZCBwYXJhbWV0ZXIgXCJjbGllbnRfbWF4X3dpbmRvd19iaXRzXCInXHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHBhcmFtcztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIE5vcm1hbGl6ZSBwYXJhbWV0ZXJzLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtBcnJheX0gY29uZmlndXJhdGlvbnMgVGhlIGV4dGVuc2lvbiBuZWdvdGlhdGlvbiBvZmZlcnMvcmVwb25zZVxyXG4gICAqIEByZXR1cm4ge0FycmF5fSBUaGUgb2ZmZXJzL3Jlc3BvbnNlIHdpdGggbm9ybWFsaXplZCBwYXJhbWV0ZXJzXHJcbiAgICogQHByaXZhdGVcclxuICAgKi9cclxuICBub3JtYWxpemVQYXJhbXMoY29uZmlndXJhdGlvbnMpIHtcclxuICAgIGNvbmZpZ3VyYXRpb25zLmZvckVhY2goKHBhcmFtcykgPT4ge1xyXG4gICAgICBPYmplY3Qua2V5cyhwYXJhbXMpLmZvckVhY2goKGtleSkgPT4ge1xyXG4gICAgICAgIGxldCB2YWx1ZSA9IHBhcmFtc1trZXldO1xyXG5cclxuICAgICAgICBpZiAodmFsdWUubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBQYXJhbWV0ZXIgXCIke2tleX1cIiBtdXN0IGhhdmUgb25seSBhIHNpbmdsZSB2YWx1ZWApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFsdWUgPSB2YWx1ZVswXTtcclxuXHJcbiAgICAgICAgaWYgKGtleSA9PT0gJ2NsaWVudF9tYXhfd2luZG93X2JpdHMnKSB7XHJcbiAgICAgICAgICBpZiAodmFsdWUgIT09IHRydWUpIHtcclxuICAgICAgICAgICAgY29uc3QgbnVtID0gK3ZhbHVlO1xyXG4gICAgICAgICAgICBpZiAoIU51bWJlci5pc0ludGVnZXIobnVtKSB8fCBudW0gPCA4IHx8IG51bSA+IDE1KSB7XHJcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcclxuICAgICAgICAgICAgICAgIGBJbnZhbGlkIHZhbHVlIGZvciBwYXJhbWV0ZXIgXCIke2tleX1cIjogJHt2YWx1ZX1gXHJcbiAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YWx1ZSA9IG51bTtcclxuICAgICAgICAgIH0gZWxzZSBpZiAoIXRoaXMuX2lzU2VydmVyKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXHJcbiAgICAgICAgICAgICAgYEludmFsaWQgdmFsdWUgZm9yIHBhcmFtZXRlciBcIiR7a2V5fVwiOiAke3ZhbHVlfWBcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ3NlcnZlcl9tYXhfd2luZG93X2JpdHMnKSB7XHJcbiAgICAgICAgICBjb25zdCBudW0gPSArdmFsdWU7XHJcbiAgICAgICAgICBpZiAoIU51bWJlci5pc0ludGVnZXIobnVtKSB8fCBudW0gPCA4IHx8IG51bSA+IDE1KSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXHJcbiAgICAgICAgICAgICAgYEludmFsaWQgdmFsdWUgZm9yIHBhcmFtZXRlciBcIiR7a2V5fVwiOiAke3ZhbHVlfWBcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHZhbHVlID0gbnVtO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoXHJcbiAgICAgICAgICBrZXkgPT09ICdjbGllbnRfbm9fY29udGV4dF90YWtlb3ZlcicgfHxcclxuICAgICAgICAgIGtleSA9PT0gJ3NlcnZlcl9ub19jb250ZXh0X3Rha2VvdmVyJ1xyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgaWYgKHZhbHVlICE9PSB0cnVlKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXHJcbiAgICAgICAgICAgICAgYEludmFsaWQgdmFsdWUgZm9yIHBhcmFtZXRlciBcIiR7a2V5fVwiOiAke3ZhbHVlfWBcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmtub3duIHBhcmFtZXRlciBcIiR7a2V5fVwiYCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwYXJhbXNba2V5XSA9IHZhbHVlO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiBjb25maWd1cmF0aW9ucztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIERlY29tcHJlc3MgZGF0YS4gQ29uY3VycmVuY3kgbGltaXRlZC5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7QnVmZmVyfSBkYXRhIENvbXByZXNzZWQgZGF0YVxyXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gZmluIFNwZWNpZmllcyB3aGV0aGVyIG9yIG5vdCB0aGlzIGlzIHRoZSBsYXN0IGZyYWdtZW50XHJcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGJhY2tcclxuICAgKiBAcHVibGljXHJcbiAgICovXHJcbiAgZGVjb21wcmVzcyhkYXRhLCBmaW4sIGNhbGxiYWNrKSB7XHJcbiAgICB6bGliTGltaXRlci5hZGQoKGRvbmUpID0+IHtcclxuICAgICAgdGhpcy5fZGVjb21wcmVzcyhkYXRhLCBmaW4sIChlcnIsIHJlc3VsdCkgPT4ge1xyXG4gICAgICAgIGRvbmUoKTtcclxuICAgICAgICBjYWxsYmFjayhlcnIsIHJlc3VsdCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDb21wcmVzcyBkYXRhLiBDb25jdXJyZW5jeSBsaW1pdGVkLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHsoQnVmZmVyfFN0cmluZyl9IGRhdGEgRGF0YSB0byBjb21wcmVzc1xyXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gZmluIFNwZWNpZmllcyB3aGV0aGVyIG9yIG5vdCB0aGlzIGlzIHRoZSBsYXN0IGZyYWdtZW50XHJcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGJhY2tcclxuICAgKiBAcHVibGljXHJcbiAgICovXHJcbiAgY29tcHJlc3MoZGF0YSwgZmluLCBjYWxsYmFjaykge1xyXG4gICAgemxpYkxpbWl0ZXIuYWRkKChkb25lKSA9PiB7XHJcbiAgICAgIHRoaXMuX2NvbXByZXNzKGRhdGEsIGZpbiwgKGVyciwgcmVzdWx0KSA9PiB7XHJcbiAgICAgICAgZG9uZSgpO1xyXG4gICAgICAgIGNhbGxiYWNrKGVyciwgcmVzdWx0KTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIERlY29tcHJlc3MgZGF0YS5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7QnVmZmVyfSBkYXRhIENvbXByZXNzZWQgZGF0YVxyXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gZmluIFNwZWNpZmllcyB3aGV0aGVyIG9yIG5vdCB0aGlzIGlzIHRoZSBsYXN0IGZyYWdtZW50XHJcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGJhY2tcclxuICAgKiBAcHJpdmF0ZVxyXG4gICAqL1xyXG4gIF9kZWNvbXByZXNzKGRhdGEsIGZpbiwgY2FsbGJhY2spIHtcclxuICAgIGNvbnN0IGVuZHBvaW50ID0gdGhpcy5faXNTZXJ2ZXIgPyAnY2xpZW50JyA6ICdzZXJ2ZXInO1xyXG5cclxuICAgIGlmICghdGhpcy5faW5mbGF0ZSkge1xyXG4gICAgICBjb25zdCBrZXkgPSBgJHtlbmRwb2ludH1fbWF4X3dpbmRvd19iaXRzYDtcclxuICAgICAgY29uc3Qgd2luZG93Qml0cyA9XHJcbiAgICAgICAgdHlwZW9mIHRoaXMucGFyYW1zW2tleV0gIT09ICdudW1iZXInXHJcbiAgICAgICAgICA/IHpsaWIuWl9ERUZBVUxUX1dJTkRPV0JJVFNcclxuICAgICAgICAgIDogdGhpcy5wYXJhbXNba2V5XTtcclxuXHJcbiAgICAgIHRoaXMuX2luZmxhdGUgPSB6bGliLmNyZWF0ZUluZmxhdGVSYXcoe1xyXG4gICAgICAgIC4uLnRoaXMuX29wdGlvbnMuemxpYkluZmxhdGVPcHRpb25zLFxyXG4gICAgICAgIHdpbmRvd0JpdHNcclxuICAgICAgfSk7XHJcbiAgICAgIHRoaXMuX2luZmxhdGVba1Blck1lc3NhZ2VEZWZsYXRlXSA9IHRoaXM7XHJcbiAgICAgIHRoaXMuX2luZmxhdGVba1RvdGFsTGVuZ3RoXSA9IDA7XHJcbiAgICAgIHRoaXMuX2luZmxhdGVba0J1ZmZlcnNdID0gW107XHJcbiAgICAgIHRoaXMuX2luZmxhdGUub24oJ2Vycm9yJywgaW5mbGF0ZU9uRXJyb3IpO1xyXG4gICAgICB0aGlzLl9pbmZsYXRlLm9uKCdkYXRhJywgaW5mbGF0ZU9uRGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5faW5mbGF0ZVtrQ2FsbGJhY2tdID0gY2FsbGJhY2s7XHJcblxyXG4gICAgdGhpcy5faW5mbGF0ZS53cml0ZShkYXRhKTtcclxuICAgIGlmIChmaW4pIHRoaXMuX2luZmxhdGUud3JpdGUoVFJBSUxFUik7XHJcblxyXG4gICAgdGhpcy5faW5mbGF0ZS5mbHVzaCgoKSA9PiB7XHJcbiAgICAgIGNvbnN0IGVyciA9IHRoaXMuX2luZmxhdGVba0Vycm9yXTtcclxuXHJcbiAgICAgIGlmIChlcnIpIHtcclxuICAgICAgICB0aGlzLl9pbmZsYXRlLmNsb3NlKCk7XHJcbiAgICAgICAgdGhpcy5faW5mbGF0ZSA9IG51bGw7XHJcbiAgICAgICAgY2FsbGJhY2soZXJyKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnN0IGRhdGEgPSBidWZmZXJVdGlsLmNvbmNhdChcclxuICAgICAgICB0aGlzLl9pbmZsYXRlW2tCdWZmZXJzXSxcclxuICAgICAgICB0aGlzLl9pbmZsYXRlW2tUb3RhbExlbmd0aF1cclxuICAgICAgKTtcclxuXHJcbiAgICAgIGlmICh0aGlzLl9pbmZsYXRlLl9yZWFkYWJsZVN0YXRlLmVuZEVtaXR0ZWQpIHtcclxuICAgICAgICB0aGlzLl9pbmZsYXRlLmNsb3NlKCk7XHJcbiAgICAgICAgdGhpcy5faW5mbGF0ZSA9IG51bGw7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhpcy5faW5mbGF0ZVtrVG90YWxMZW5ndGhdID0gMDtcclxuICAgICAgICB0aGlzLl9pbmZsYXRlW2tCdWZmZXJzXSA9IFtdO1xyXG5cclxuICAgICAgICBpZiAoZmluICYmIHRoaXMucGFyYW1zW2Ake2VuZHBvaW50fV9ub19jb250ZXh0X3Rha2VvdmVyYF0pIHtcclxuICAgICAgICAgIHRoaXMuX2luZmxhdGUucmVzZXQoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNhbGxiYWNrKG51bGwsIGRhdGEpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDb21wcmVzcyBkYXRhLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHsoQnVmZmVyfFN0cmluZyl9IGRhdGEgRGF0YSB0byBjb21wcmVzc1xyXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gZmluIFNwZWNpZmllcyB3aGV0aGVyIG9yIG5vdCB0aGlzIGlzIHRoZSBsYXN0IGZyYWdtZW50XHJcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGJhY2tcclxuICAgKiBAcHJpdmF0ZVxyXG4gICAqL1xyXG4gIF9jb21wcmVzcyhkYXRhLCBmaW4sIGNhbGxiYWNrKSB7XHJcbiAgICBjb25zdCBlbmRwb2ludCA9IHRoaXMuX2lzU2VydmVyID8gJ3NlcnZlcicgOiAnY2xpZW50JztcclxuXHJcbiAgICBpZiAoIXRoaXMuX2RlZmxhdGUpIHtcclxuICAgICAgY29uc3Qga2V5ID0gYCR7ZW5kcG9pbnR9X21heF93aW5kb3dfYml0c2A7XHJcbiAgICAgIGNvbnN0IHdpbmRvd0JpdHMgPVxyXG4gICAgICAgIHR5cGVvZiB0aGlzLnBhcmFtc1trZXldICE9PSAnbnVtYmVyJ1xyXG4gICAgICAgICAgPyB6bGliLlpfREVGQVVMVF9XSU5ET1dCSVRTXHJcbiAgICAgICAgICA6IHRoaXMucGFyYW1zW2tleV07XHJcblxyXG4gICAgICB0aGlzLl9kZWZsYXRlID0gemxpYi5jcmVhdGVEZWZsYXRlUmF3KHtcclxuICAgICAgICAuLi50aGlzLl9vcHRpb25zLnpsaWJEZWZsYXRlT3B0aW9ucyxcclxuICAgICAgICB3aW5kb3dCaXRzXHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgdGhpcy5fZGVmbGF0ZVtrVG90YWxMZW5ndGhdID0gMDtcclxuICAgICAgdGhpcy5fZGVmbGF0ZVtrQnVmZmVyc10gPSBbXTtcclxuXHJcbiAgICAgIHRoaXMuX2RlZmxhdGUub24oJ2RhdGEnLCBkZWZsYXRlT25EYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLl9kZWZsYXRlW2tDYWxsYmFja10gPSBjYWxsYmFjaztcclxuXHJcbiAgICB0aGlzLl9kZWZsYXRlLndyaXRlKGRhdGEpO1xyXG4gICAgdGhpcy5fZGVmbGF0ZS5mbHVzaCh6bGliLlpfU1lOQ19GTFVTSCwgKCkgPT4ge1xyXG4gICAgICBpZiAoIXRoaXMuX2RlZmxhdGUpIHtcclxuICAgICAgICAvL1xyXG4gICAgICAgIC8vIFRoZSBkZWZsYXRlIHN0cmVhbSB3YXMgY2xvc2VkIHdoaWxlIGRhdGEgd2FzIGJlaW5nIHByb2Nlc3NlZC5cclxuICAgICAgICAvL1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgbGV0IGRhdGEgPSBidWZmZXJVdGlsLmNvbmNhdChcclxuICAgICAgICB0aGlzLl9kZWZsYXRlW2tCdWZmZXJzXSxcclxuICAgICAgICB0aGlzLl9kZWZsYXRlW2tUb3RhbExlbmd0aF1cclxuICAgICAgKTtcclxuXHJcbiAgICAgIGlmIChmaW4pIHtcclxuICAgICAgICBkYXRhID0gbmV3IEZhc3RCdWZmZXIoZGF0YS5idWZmZXIsIGRhdGEuYnl0ZU9mZnNldCwgZGF0YS5sZW5ndGggLSA0KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy9cclxuICAgICAgLy8gRW5zdXJlIHRoYXQgdGhlIGNhbGxiYWNrIHdpbGwgbm90IGJlIGNhbGxlZCBhZ2FpbiBpblxyXG4gICAgICAvLyBgUGVyTWVzc2FnZURlZmxhdGUjY2xlYW51cCgpYC5cclxuICAgICAgLy9cclxuICAgICAgdGhpcy5fZGVmbGF0ZVtrQ2FsbGJhY2tdID0gbnVsbDtcclxuXHJcbiAgICAgIHRoaXMuX2RlZmxhdGVba1RvdGFsTGVuZ3RoXSA9IDA7XHJcbiAgICAgIHRoaXMuX2RlZmxhdGVba0J1ZmZlcnNdID0gW107XHJcblxyXG4gICAgICBpZiAoZmluICYmIHRoaXMucGFyYW1zW2Ake2VuZHBvaW50fV9ub19jb250ZXh0X3Rha2VvdmVyYF0pIHtcclxuICAgICAgICB0aGlzLl9kZWZsYXRlLnJlc2V0KCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNhbGxiYWNrKG51bGwsIGRhdGEpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IFBlck1lc3NhZ2VEZWZsYXRlO1xyXG5cclxuLyoqXHJcbiAqIFRoZSBsaXN0ZW5lciBvZiB0aGUgYHpsaWIuRGVmbGF0ZVJhd2Agc3RyZWFtIGAnZGF0YSdgIGV2ZW50LlxyXG4gKlxyXG4gKiBAcGFyYW0ge0J1ZmZlcn0gY2h1bmsgQSBjaHVuayBvZiBkYXRhXHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5mdW5jdGlvbiBkZWZsYXRlT25EYXRhKGNodW5rKSB7XHJcbiAgdGhpc1trQnVmZmVyc10ucHVzaChjaHVuayk7XHJcbiAgdGhpc1trVG90YWxMZW5ndGhdICs9IGNodW5rLmxlbmd0aDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFRoZSBsaXN0ZW5lciBvZiB0aGUgYHpsaWIuSW5mbGF0ZVJhd2Agc3RyZWFtIGAnZGF0YSdgIGV2ZW50LlxyXG4gKlxyXG4gKiBAcGFyYW0ge0J1ZmZlcn0gY2h1bmsgQSBjaHVuayBvZiBkYXRhXHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5mdW5jdGlvbiBpbmZsYXRlT25EYXRhKGNodW5rKSB7XHJcbiAgdGhpc1trVG90YWxMZW5ndGhdICs9IGNodW5rLmxlbmd0aDtcclxuXHJcbiAgaWYgKFxyXG4gICAgdGhpc1trUGVyTWVzc2FnZURlZmxhdGVdLl9tYXhQYXlsb2FkIDwgMSB8fFxyXG4gICAgdGhpc1trVG90YWxMZW5ndGhdIDw9IHRoaXNba1Blck1lc3NhZ2VEZWZsYXRlXS5fbWF4UGF5bG9hZFxyXG4gICkge1xyXG4gICAgdGhpc1trQnVmZmVyc10ucHVzaChjaHVuayk7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICB0aGlzW2tFcnJvcl0gPSBuZXcgUmFuZ2VFcnJvcignTWF4IHBheWxvYWQgc2l6ZSBleGNlZWRlZCcpO1xyXG4gIHRoaXNba0Vycm9yXS5jb2RlID0gJ1dTX0VSUl9VTlNVUFBPUlRFRF9NRVNTQUdFX0xFTkdUSCc7XHJcbiAgdGhpc1trRXJyb3JdW2tTdGF0dXNDb2RlXSA9IDEwMDk7XHJcbiAgdGhpcy5yZW1vdmVMaXN0ZW5lcignZGF0YScsIGluZmxhdGVPbkRhdGEpO1xyXG4gIHRoaXMucmVzZXQoKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFRoZSBsaXN0ZW5lciBvZiB0aGUgYHpsaWIuSW5mbGF0ZVJhd2Agc3RyZWFtIGAnZXJyb3InYCBldmVudC5cclxuICpcclxuICogQHBhcmFtIHtFcnJvcn0gZXJyIFRoZSBlbWl0dGVkIGVycm9yXHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5mdW5jdGlvbiBpbmZsYXRlT25FcnJvcihlcnIpIHtcclxuICAvL1xyXG4gIC8vIFRoZXJlIGlzIG5vIG5lZWQgdG8gY2FsbCBgWmxpYiNjbG9zZSgpYCBhcyB0aGUgaGFuZGxlIGlzIGF1dG9tYXRpY2FsbHlcclxuICAvLyBjbG9zZWQgd2hlbiBhbiBlcnJvciBpcyBlbWl0dGVkLlxyXG4gIC8vXHJcbiAgdGhpc1trUGVyTWVzc2FnZURlZmxhdGVdLl9pbmZsYXRlID0gbnVsbDtcclxuICBlcnJba1N0YXR1c0NvZGVdID0gMTAwNztcclxuICB0aGlzW2tDYWxsYmFja10oZXJyKTtcclxufVxyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ws/lib/permessage-deflate.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ws/lib/receiver.js":
/*!*****************************************!*\
  !*** ./node_modules/ws/lib/receiver.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\r\n\r\nconst { Writable } = __webpack_require__(/*! stream */ \"stream\");\r\n\r\nconst PerMessageDeflate = __webpack_require__(/*! ./permessage-deflate */ \"(ssr)/./node_modules/ws/lib/permessage-deflate.js\");\r\nconst {\r\n  BINARY_TYPES,\r\n  EMPTY_BUFFER,\r\n  kStatusCode,\r\n  kWebSocket\r\n} = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/ws/lib/constants.js\");\r\nconst { concat, toArrayBuffer, unmask } = __webpack_require__(/*! ./buffer-util */ \"(ssr)/./node_modules/ws/lib/buffer-util.js\");\r\nconst { isValidStatusCode, isValidUTF8 } = __webpack_require__(/*! ./validation */ \"(ssr)/./node_modules/ws/lib/validation.js\");\r\n\r\nconst FastBuffer = Buffer[Symbol.species];\r\n\r\nconst GET_INFO = 0;\r\nconst GET_PAYLOAD_LENGTH_16 = 1;\r\nconst GET_PAYLOAD_LENGTH_64 = 2;\r\nconst GET_MASK = 3;\r\nconst GET_DATA = 4;\r\nconst INFLATING = 5;\r\nconst DEFER_EVENT = 6;\r\n\r\n/**\r\n * HyBi Receiver implementation.\r\n *\r\n * @extends Writable\r\n */\r\nclass Receiver extends Writable {\r\n  /**\r\n   * Creates a Receiver instance.\r\n   *\r\n   * @param {Object} [options] Options object\r\n   * @param {Boolean} [options.allowSynchronousEvents=true] Specifies whether\r\n   *     any of the `'message'`, `'ping'`, and `'pong'` events can be emitted\r\n   *     multiple times in the same tick\r\n   * @param {String} [options.binaryType=nodebuffer] The type for binary data\r\n   * @param {Object} [options.extensions] An object containing the negotiated\r\n   *     extensions\r\n   * @param {Boolean} [options.isServer=false] Specifies whether to operate in\r\n   *     client or server mode\r\n   * @param {Number} [options.maxPayload=0] The maximum allowed message length\r\n   * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or\r\n   *     not to skip UTF-8 validation for text and close messages\r\n   */\r\n  constructor(options = {}) {\r\n    super();\r\n\r\n    this._allowSynchronousEvents =\r\n      options.allowSynchronousEvents !== undefined\r\n        ? options.allowSynchronousEvents\r\n        : true;\r\n    this._binaryType = options.binaryType || BINARY_TYPES[0];\r\n    this._extensions = options.extensions || {};\r\n    this._isServer = !!options.isServer;\r\n    this._maxPayload = options.maxPayload | 0;\r\n    this._skipUTF8Validation = !!options.skipUTF8Validation;\r\n    this[kWebSocket] = undefined;\r\n\r\n    this._bufferedBytes = 0;\r\n    this._buffers = [];\r\n\r\n    this._compressed = false;\r\n    this._payloadLength = 0;\r\n    this._mask = undefined;\r\n    this._fragmented = 0;\r\n    this._masked = false;\r\n    this._fin = false;\r\n    this._opcode = 0;\r\n\r\n    this._totalPayloadLength = 0;\r\n    this._messageLength = 0;\r\n    this._fragments = [];\r\n\r\n    this._errored = false;\r\n    this._loop = false;\r\n    this._state = GET_INFO;\r\n  }\r\n\r\n  /**\r\n   * Implements `Writable.prototype._write()`.\r\n   *\r\n   * @param {Buffer} chunk The chunk of data to write\r\n   * @param {String} encoding The character encoding of `chunk`\r\n   * @param {Function} cb Callback\r\n   * @private\r\n   */\r\n  _write(chunk, encoding, cb) {\r\n    if (this._opcode === 0x08 && this._state == GET_INFO) return cb();\r\n\r\n    this._bufferedBytes += chunk.length;\r\n    this._buffers.push(chunk);\r\n    this.startLoop(cb);\r\n  }\r\n\r\n  /**\r\n   * Consumes `n` bytes from the buffered data.\r\n   *\r\n   * @param {Number} n The number of bytes to consume\r\n   * @return {Buffer} The consumed bytes\r\n   * @private\r\n   */\r\n  consume(n) {\r\n    this._bufferedBytes -= n;\r\n\r\n    if (n === this._buffers[0].length) return this._buffers.shift();\r\n\r\n    if (n < this._buffers[0].length) {\r\n      const buf = this._buffers[0];\r\n      this._buffers[0] = new FastBuffer(\r\n        buf.buffer,\r\n        buf.byteOffset + n,\r\n        buf.length - n\r\n      );\r\n\r\n      return new FastBuffer(buf.buffer, buf.byteOffset, n);\r\n    }\r\n\r\n    const dst = Buffer.allocUnsafe(n);\r\n\r\n    do {\r\n      const buf = this._buffers[0];\r\n      const offset = dst.length - n;\r\n\r\n      if (n >= buf.length) {\r\n        dst.set(this._buffers.shift(), offset);\r\n      } else {\r\n        dst.set(new Uint8Array(buf.buffer, buf.byteOffset, n), offset);\r\n        this._buffers[0] = new FastBuffer(\r\n          buf.buffer,\r\n          buf.byteOffset + n,\r\n          buf.length - n\r\n        );\r\n      }\r\n\r\n      n -= buf.length;\r\n    } while (n > 0);\r\n\r\n    return dst;\r\n  }\r\n\r\n  /**\r\n   * Starts the parsing loop.\r\n   *\r\n   * @param {Function} cb Callback\r\n   * @private\r\n   */\r\n  startLoop(cb) {\r\n    this._loop = true;\r\n\r\n    do {\r\n      switch (this._state) {\r\n        case GET_INFO:\r\n          this.getInfo(cb);\r\n          break;\r\n        case GET_PAYLOAD_LENGTH_16:\r\n          this.getPayloadLength16(cb);\r\n          break;\r\n        case GET_PAYLOAD_LENGTH_64:\r\n          this.getPayloadLength64(cb);\r\n          break;\r\n        case GET_MASK:\r\n          this.getMask();\r\n          break;\r\n        case GET_DATA:\r\n          this.getData(cb);\r\n          break;\r\n        case INFLATING:\r\n        case DEFER_EVENT:\r\n          this._loop = false;\r\n          return;\r\n      }\r\n    } while (this._loop);\r\n\r\n    if (!this._errored) cb();\r\n  }\r\n\r\n  /**\r\n   * Reads the first two bytes of a frame.\r\n   *\r\n   * @param {Function} cb Callback\r\n   * @private\r\n   */\r\n  getInfo(cb) {\r\n    if (this._bufferedBytes < 2) {\r\n      this._loop = false;\r\n      return;\r\n    }\r\n\r\n    const buf = this.consume(2);\r\n\r\n    if ((buf[0] & 0x30) !== 0x00) {\r\n      const error = this.createError(\r\n        RangeError,\r\n        'RSV2 and RSV3 must be clear',\r\n        true,\r\n        1002,\r\n        'WS_ERR_UNEXPECTED_RSV_2_3'\r\n      );\r\n\r\n      cb(error);\r\n      return;\r\n    }\r\n\r\n    const compressed = (buf[0] & 0x40) === 0x40;\r\n\r\n    if (compressed && !this._extensions[PerMessageDeflate.extensionName]) {\r\n      const error = this.createError(\r\n        RangeError,\r\n        'RSV1 must be clear',\r\n        true,\r\n        1002,\r\n        'WS_ERR_UNEXPECTED_RSV_1'\r\n      );\r\n\r\n      cb(error);\r\n      return;\r\n    }\r\n\r\n    this._fin = (buf[0] & 0x80) === 0x80;\r\n    this._opcode = buf[0] & 0x0f;\r\n    this._payloadLength = buf[1] & 0x7f;\r\n\r\n    if (this._opcode === 0x00) {\r\n      if (compressed) {\r\n        const error = this.createError(\r\n          RangeError,\r\n          'RSV1 must be clear',\r\n          true,\r\n          1002,\r\n          'WS_ERR_UNEXPECTED_RSV_1'\r\n        );\r\n\r\n        cb(error);\r\n        return;\r\n      }\r\n\r\n      if (!this._fragmented) {\r\n        const error = this.createError(\r\n          RangeError,\r\n          'invalid opcode 0',\r\n          true,\r\n          1002,\r\n          'WS_ERR_INVALID_OPCODE'\r\n        );\r\n\r\n        cb(error);\r\n        return;\r\n      }\r\n\r\n      this._opcode = this._fragmented;\r\n    } else if (this._opcode === 0x01 || this._opcode === 0x02) {\r\n      if (this._fragmented) {\r\n        const error = this.createError(\r\n          RangeError,\r\n          `invalid opcode ${this._opcode}`,\r\n          true,\r\n          1002,\r\n          'WS_ERR_INVALID_OPCODE'\r\n        );\r\n\r\n        cb(error);\r\n        return;\r\n      }\r\n\r\n      this._compressed = compressed;\r\n    } else if (this._opcode > 0x07 && this._opcode < 0x0b) {\r\n      if (!this._fin) {\r\n        const error = this.createError(\r\n          RangeError,\r\n          'FIN must be set',\r\n          true,\r\n          1002,\r\n          'WS_ERR_EXPECTED_FIN'\r\n        );\r\n\r\n        cb(error);\r\n        return;\r\n      }\r\n\r\n      if (compressed) {\r\n        const error = this.createError(\r\n          RangeError,\r\n          'RSV1 must be clear',\r\n          true,\r\n          1002,\r\n          'WS_ERR_UNEXPECTED_RSV_1'\r\n        );\r\n\r\n        cb(error);\r\n        return;\r\n      }\r\n\r\n      if (\r\n        this._payloadLength > 0x7d ||\r\n        (this._opcode === 0x08 && this._payloadLength === 1)\r\n      ) {\r\n        const error = this.createError(\r\n          RangeError,\r\n          `invalid payload length ${this._payloadLength}`,\r\n          true,\r\n          1002,\r\n          'WS_ERR_INVALID_CONTROL_PAYLOAD_LENGTH'\r\n        );\r\n\r\n        cb(error);\r\n        return;\r\n      }\r\n    } else {\r\n      const error = this.createError(\r\n        RangeError,\r\n        `invalid opcode ${this._opcode}`,\r\n        true,\r\n        1002,\r\n        'WS_ERR_INVALID_OPCODE'\r\n      );\r\n\r\n      cb(error);\r\n      return;\r\n    }\r\n\r\n    if (!this._fin && !this._fragmented) this._fragmented = this._opcode;\r\n    this._masked = (buf[1] & 0x80) === 0x80;\r\n\r\n    if (this._isServer) {\r\n      if (!this._masked) {\r\n        const error = this.createError(\r\n          RangeError,\r\n          'MASK must be set',\r\n          true,\r\n          1002,\r\n          'WS_ERR_EXPECTED_MASK'\r\n        );\r\n\r\n        cb(error);\r\n        return;\r\n      }\r\n    } else if (this._masked) {\r\n      const error = this.createError(\r\n        RangeError,\r\n        'MASK must be clear',\r\n        true,\r\n        1002,\r\n        'WS_ERR_UNEXPECTED_MASK'\r\n      );\r\n\r\n      cb(error);\r\n      return;\r\n    }\r\n\r\n    if (this._payloadLength === 126) this._state = GET_PAYLOAD_LENGTH_16;\r\n    else if (this._payloadLength === 127) this._state = GET_PAYLOAD_LENGTH_64;\r\n    else this.haveLength(cb);\r\n  }\r\n\r\n  /**\r\n   * Gets extended payload length (7+16).\r\n   *\r\n   * @param {Function} cb Callback\r\n   * @private\r\n   */\r\n  getPayloadLength16(cb) {\r\n    if (this._bufferedBytes < 2) {\r\n      this._loop = false;\r\n      return;\r\n    }\r\n\r\n    this._payloadLength = this.consume(2).readUInt16BE(0);\r\n    this.haveLength(cb);\r\n  }\r\n\r\n  /**\r\n   * Gets extended payload length (7+64).\r\n   *\r\n   * @param {Function} cb Callback\r\n   * @private\r\n   */\r\n  getPayloadLength64(cb) {\r\n    if (this._bufferedBytes < 8) {\r\n      this._loop = false;\r\n      return;\r\n    }\r\n\r\n    const buf = this.consume(8);\r\n    const num = buf.readUInt32BE(0);\r\n\r\n    //\r\n    // The maximum safe integer in JavaScript is 2^53 - 1. An error is returned\r\n    // if payload length is greater than this number.\r\n    //\r\n    if (num > Math.pow(2, 53 - 32) - 1) {\r\n      const error = this.createError(\r\n        RangeError,\r\n        'Unsupported WebSocket frame: payload length > 2^53 - 1',\r\n        false,\r\n        1009,\r\n        'WS_ERR_UNSUPPORTED_DATA_PAYLOAD_LENGTH'\r\n      );\r\n\r\n      cb(error);\r\n      return;\r\n    }\r\n\r\n    this._payloadLength = num * Math.pow(2, 32) + buf.readUInt32BE(4);\r\n    this.haveLength(cb);\r\n  }\r\n\r\n  /**\r\n   * Payload length has been read.\r\n   *\r\n   * @param {Function} cb Callback\r\n   * @private\r\n   */\r\n  haveLength(cb) {\r\n    if (this._payloadLength && this._opcode < 0x08) {\r\n      this._totalPayloadLength += this._payloadLength;\r\n      if (this._totalPayloadLength > this._maxPayload && this._maxPayload > 0) {\r\n        const error = this.createError(\r\n          RangeError,\r\n          'Max payload size exceeded',\r\n          false,\r\n          1009,\r\n          'WS_ERR_UNSUPPORTED_MESSAGE_LENGTH'\r\n        );\r\n\r\n        cb(error);\r\n        return;\r\n      }\r\n    }\r\n\r\n    if (this._masked) this._state = GET_MASK;\r\n    else this._state = GET_DATA;\r\n  }\r\n\r\n  /**\r\n   * Reads mask bytes.\r\n   *\r\n   * @private\r\n   */\r\n  getMask() {\r\n    if (this._bufferedBytes < 4) {\r\n      this._loop = false;\r\n      return;\r\n    }\r\n\r\n    this._mask = this.consume(4);\r\n    this._state = GET_DATA;\r\n  }\r\n\r\n  /**\r\n   * Reads data bytes.\r\n   *\r\n   * @param {Function} cb Callback\r\n   * @private\r\n   */\r\n  getData(cb) {\r\n    let data = EMPTY_BUFFER;\r\n\r\n    if (this._payloadLength) {\r\n      if (this._bufferedBytes < this._payloadLength) {\r\n        this._loop = false;\r\n        return;\r\n      }\r\n\r\n      data = this.consume(this._payloadLength);\r\n\r\n      if (\r\n        this._masked &&\r\n        (this._mask[0] | this._mask[1] | this._mask[2] | this._mask[3]) !== 0\r\n      ) {\r\n        unmask(data, this._mask);\r\n      }\r\n    }\r\n\r\n    if (this._opcode > 0x07) {\r\n      this.controlMessage(data, cb);\r\n      return;\r\n    }\r\n\r\n    if (this._compressed) {\r\n      this._state = INFLATING;\r\n      this.decompress(data, cb);\r\n      return;\r\n    }\r\n\r\n    if (data.length) {\r\n      //\r\n      // This message is not compressed so its length is the sum of the payload\r\n      // length of all fragments.\r\n      //\r\n      this._messageLength = this._totalPayloadLength;\r\n      this._fragments.push(data);\r\n    }\r\n\r\n    this.dataMessage(cb);\r\n  }\r\n\r\n  /**\r\n   * Decompresses data.\r\n   *\r\n   * @param {Buffer} data Compressed data\r\n   * @param {Function} cb Callback\r\n   * @private\r\n   */\r\n  decompress(data, cb) {\r\n    const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\r\n\r\n    perMessageDeflate.decompress(data, this._fin, (err, buf) => {\r\n      if (err) return cb(err);\r\n\r\n      if (buf.length) {\r\n        this._messageLength += buf.length;\r\n        if (this._messageLength > this._maxPayload && this._maxPayload > 0) {\r\n          const error = this.createError(\r\n            RangeError,\r\n            'Max payload size exceeded',\r\n            false,\r\n            1009,\r\n            'WS_ERR_UNSUPPORTED_MESSAGE_LENGTH'\r\n          );\r\n\r\n          cb(error);\r\n          return;\r\n        }\r\n\r\n        this._fragments.push(buf);\r\n      }\r\n\r\n      this.dataMessage(cb);\r\n      if (this._state === GET_INFO) this.startLoop(cb);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Handles a data message.\r\n   *\r\n   * @param {Function} cb Callback\r\n   * @private\r\n   */\r\n  dataMessage(cb) {\r\n    if (!this._fin) {\r\n      this._state = GET_INFO;\r\n      return;\r\n    }\r\n\r\n    const messageLength = this._messageLength;\r\n    const fragments = this._fragments;\r\n\r\n    this._totalPayloadLength = 0;\r\n    this._messageLength = 0;\r\n    this._fragmented = 0;\r\n    this._fragments = [];\r\n\r\n    if (this._opcode === 2) {\r\n      let data;\r\n\r\n      if (this._binaryType === 'nodebuffer') {\r\n        data = concat(fragments, messageLength);\r\n      } else if (this._binaryType === 'arraybuffer') {\r\n        data = toArrayBuffer(concat(fragments, messageLength));\r\n      } else if (this._binaryType === 'blob') {\r\n        data = new Blob(fragments);\r\n      } else {\r\n        data = fragments;\r\n      }\r\n\r\n      if (this._allowSynchronousEvents) {\r\n        this.emit('message', data, true);\r\n        this._state = GET_INFO;\r\n      } else {\r\n        this._state = DEFER_EVENT;\r\n        setImmediate(() => {\r\n          this.emit('message', data, true);\r\n          this._state = GET_INFO;\r\n          this.startLoop(cb);\r\n        });\r\n      }\r\n    } else {\r\n      const buf = concat(fragments, messageLength);\r\n\r\n      if (!this._skipUTF8Validation && !isValidUTF8(buf)) {\r\n        const error = this.createError(\r\n          Error,\r\n          'invalid UTF-8 sequence',\r\n          true,\r\n          1007,\r\n          'WS_ERR_INVALID_UTF8'\r\n        );\r\n\r\n        cb(error);\r\n        return;\r\n      }\r\n\r\n      if (this._state === INFLATING || this._allowSynchronousEvents) {\r\n        this.emit('message', buf, false);\r\n        this._state = GET_INFO;\r\n      } else {\r\n        this._state = DEFER_EVENT;\r\n        setImmediate(() => {\r\n          this.emit('message', buf, false);\r\n          this._state = GET_INFO;\r\n          this.startLoop(cb);\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles a control message.\r\n   *\r\n   * @param {Buffer} data Data to handle\r\n   * @return {(Error|RangeError|undefined)} A possible error\r\n   * @private\r\n   */\r\n  controlMessage(data, cb) {\r\n    if (this._opcode === 0x08) {\r\n      if (data.length === 0) {\r\n        this._loop = false;\r\n        this.emit('conclude', 1005, EMPTY_BUFFER);\r\n        this.end();\r\n      } else {\r\n        const code = data.readUInt16BE(0);\r\n\r\n        if (!isValidStatusCode(code)) {\r\n          const error = this.createError(\r\n            RangeError,\r\n            `invalid status code ${code}`,\r\n            true,\r\n            1002,\r\n            'WS_ERR_INVALID_CLOSE_CODE'\r\n          );\r\n\r\n          cb(error);\r\n          return;\r\n        }\r\n\r\n        const buf = new FastBuffer(\r\n          data.buffer,\r\n          data.byteOffset + 2,\r\n          data.length - 2\r\n        );\r\n\r\n        if (!this._skipUTF8Validation && !isValidUTF8(buf)) {\r\n          const error = this.createError(\r\n            Error,\r\n            'invalid UTF-8 sequence',\r\n            true,\r\n            1007,\r\n            'WS_ERR_INVALID_UTF8'\r\n          );\r\n\r\n          cb(error);\r\n          return;\r\n        }\r\n\r\n        this._loop = false;\r\n        this.emit('conclude', code, buf);\r\n        this.end();\r\n      }\r\n\r\n      this._state = GET_INFO;\r\n      return;\r\n    }\r\n\r\n    if (this._allowSynchronousEvents) {\r\n      this.emit(this._opcode === 0x09 ? 'ping' : 'pong', data);\r\n      this._state = GET_INFO;\r\n    } else {\r\n      this._state = DEFER_EVENT;\r\n      setImmediate(() => {\r\n        this.emit(this._opcode === 0x09 ? 'ping' : 'pong', data);\r\n        this._state = GET_INFO;\r\n        this.startLoop(cb);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Builds an error object.\r\n   *\r\n   * @param {function(new:Error|RangeError)} ErrorCtor The error constructor\r\n   * @param {String} message The error message\r\n   * @param {Boolean} prefix Specifies whether or not to add a default prefix to\r\n   *     `message`\r\n   * @param {Number} statusCode The status code\r\n   * @param {String} errorCode The exposed error code\r\n   * @return {(Error|RangeError)} The error\r\n   * @private\r\n   */\r\n  createError(ErrorCtor, message, prefix, statusCode, errorCode) {\r\n    this._loop = false;\r\n    this._errored = true;\r\n\r\n    const err = new ErrorCtor(\r\n      prefix ? `Invalid WebSocket frame: ${message}` : message\r\n    );\r\n\r\n    Error.captureStackTrace(err, this.createError);\r\n    err.code = errorCode;\r\n    err[kStatusCode] = statusCode;\r\n    return err;\r\n  }\r\n}\r\n\r\nmodule.exports = Receiver;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ws/lib/receiver.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ws/lib/sender.js":
/*!***************************************!*\
  !*** ./node_modules/ws/lib/sender.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"^Duplex\" }] */\r\n\r\n\r\n\r\nconst { Duplex } = __webpack_require__(/*! stream */ \"stream\");\r\nconst { randomFillSync } = __webpack_require__(/*! crypto */ \"crypto\");\r\n\r\nconst PerMessageDeflate = __webpack_require__(/*! ./permessage-deflate */ \"(ssr)/./node_modules/ws/lib/permessage-deflate.js\");\r\nconst { EMPTY_BUFFER, kWebSocket, NOOP } = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/ws/lib/constants.js\");\r\nconst { isBlob, isValidStatusCode } = __webpack_require__(/*! ./validation */ \"(ssr)/./node_modules/ws/lib/validation.js\");\r\nconst { mask: applyMask, toBuffer } = __webpack_require__(/*! ./buffer-util */ \"(ssr)/./node_modules/ws/lib/buffer-util.js\");\r\n\r\nconst kByteLength = Symbol('kByteLength');\r\nconst maskBuffer = Buffer.alloc(4);\r\nconst RANDOM_POOL_SIZE = 8 * 1024;\r\nlet randomPool;\r\nlet randomPoolPointer = RANDOM_POOL_SIZE;\r\n\r\nconst DEFAULT = 0;\r\nconst DEFLATING = 1;\r\nconst GET_BLOB_DATA = 2;\r\n\r\n/**\r\n * HyBi Sender implementation.\r\n */\r\nclass Sender {\r\n  /**\r\n   * Creates a Sender instance.\r\n   *\r\n   * @param {Duplex} socket The connection socket\r\n   * @param {Object} [extensions] An object containing the negotiated extensions\r\n   * @param {Function} [generateMask] The function used to generate the masking\r\n   *     key\r\n   */\r\n  constructor(socket, extensions, generateMask) {\r\n    this._extensions = extensions || {};\r\n\r\n    if (generateMask) {\r\n      this._generateMask = generateMask;\r\n      this._maskBuffer = Buffer.alloc(4);\r\n    }\r\n\r\n    this._socket = socket;\r\n\r\n    this._firstFragment = true;\r\n    this._compress = false;\r\n\r\n    this._bufferedBytes = 0;\r\n    this._queue = [];\r\n    this._state = DEFAULT;\r\n    this.onerror = NOOP;\r\n    this[kWebSocket] = undefined;\r\n  }\r\n\r\n  /**\r\n   * Frames a piece of data according to the HyBi WebSocket protocol.\r\n   *\r\n   * @param {(Buffer|String)} data The data to frame\r\n   * @param {Object} options Options object\r\n   * @param {Boolean} [options.fin=false] Specifies whether or not to set the\r\n   *     FIN bit\r\n   * @param {Function} [options.generateMask] The function used to generate the\r\n   *     masking key\r\n   * @param {Boolean} [options.mask=false] Specifies whether or not to mask\r\n   *     `data`\r\n   * @param {Buffer} [options.maskBuffer] The buffer used to store the masking\r\n   *     key\r\n   * @param {Number} options.opcode The opcode\r\n   * @param {Boolean} [options.readOnly=false] Specifies whether `data` can be\r\n   *     modified\r\n   * @param {Boolean} [options.rsv1=false] Specifies whether or not to set the\r\n   *     RSV1 bit\r\n   * @return {(Buffer|String)[]} The framed data\r\n   * @public\r\n   */\r\n  static frame(data, options) {\r\n    let mask;\r\n    let merge = false;\r\n    let offset = 2;\r\n    let skipMasking = false;\r\n\r\n    if (options.mask) {\r\n      mask = options.maskBuffer || maskBuffer;\r\n\r\n      if (options.generateMask) {\r\n        options.generateMask(mask);\r\n      } else {\r\n        if (randomPoolPointer === RANDOM_POOL_SIZE) {\r\n          /* istanbul ignore else  */\r\n          if (randomPool === undefined) {\r\n            //\r\n            // This is lazily initialized because server-sent frames must not\r\n            // be masked so it may never be used.\r\n            //\r\n            randomPool = Buffer.alloc(RANDOM_POOL_SIZE);\r\n          }\r\n\r\n          randomFillSync(randomPool, 0, RANDOM_POOL_SIZE);\r\n          randomPoolPointer = 0;\r\n        }\r\n\r\n        mask[0] = randomPool[randomPoolPointer++];\r\n        mask[1] = randomPool[randomPoolPointer++];\r\n        mask[2] = randomPool[randomPoolPointer++];\r\n        mask[3] = randomPool[randomPoolPointer++];\r\n      }\r\n\r\n      skipMasking = (mask[0] | mask[1] | mask[2] | mask[3]) === 0;\r\n      offset = 6;\r\n    }\r\n\r\n    let dataLength;\r\n\r\n    if (typeof data === 'string') {\r\n      if (\r\n        (!options.mask || skipMasking) &&\r\n        options[kByteLength] !== undefined\r\n      ) {\r\n        dataLength = options[kByteLength];\r\n      } else {\r\n        data = Buffer.from(data);\r\n        dataLength = data.length;\r\n      }\r\n    } else {\r\n      dataLength = data.length;\r\n      merge = options.mask && options.readOnly && !skipMasking;\r\n    }\r\n\r\n    let payloadLength = dataLength;\r\n\r\n    if (dataLength >= 65536) {\r\n      offset += 8;\r\n      payloadLength = 127;\r\n    } else if (dataLength > 125) {\r\n      offset += 2;\r\n      payloadLength = 126;\r\n    }\r\n\r\n    const target = Buffer.allocUnsafe(merge ? dataLength + offset : offset);\r\n\r\n    target[0] = options.fin ? options.opcode | 0x80 : options.opcode;\r\n    if (options.rsv1) target[0] |= 0x40;\r\n\r\n    target[1] = payloadLength;\r\n\r\n    if (payloadLength === 126) {\r\n      target.writeUInt16BE(dataLength, 2);\r\n    } else if (payloadLength === 127) {\r\n      target[2] = target[3] = 0;\r\n      target.writeUIntBE(dataLength, 4, 6);\r\n    }\r\n\r\n    if (!options.mask) return [target, data];\r\n\r\n    target[1] |= 0x80;\r\n    target[offset - 4] = mask[0];\r\n    target[offset - 3] = mask[1];\r\n    target[offset - 2] = mask[2];\r\n    target[offset - 1] = mask[3];\r\n\r\n    if (skipMasking) return [target, data];\r\n\r\n    if (merge) {\r\n      applyMask(data, mask, target, offset, dataLength);\r\n      return [target];\r\n    }\r\n\r\n    applyMask(data, mask, data, 0, dataLength);\r\n    return [target, data];\r\n  }\r\n\r\n  /**\r\n   * Sends a close message to the other peer.\r\n   *\r\n   * @param {Number} [code] The status code component of the body\r\n   * @param {(String|Buffer)} [data] The message component of the body\r\n   * @param {Boolean} [mask=false] Specifies whether or not to mask the message\r\n   * @param {Function} [cb] Callback\r\n   * @public\r\n   */\r\n  close(code, data, mask, cb) {\r\n    let buf;\r\n\r\n    if (code === undefined) {\r\n      buf = EMPTY_BUFFER;\r\n    } else if (typeof code !== 'number' || !isValidStatusCode(code)) {\r\n      throw new TypeError('First argument must be a valid error code number');\r\n    } else if (data === undefined || !data.length) {\r\n      buf = Buffer.allocUnsafe(2);\r\n      buf.writeUInt16BE(code, 0);\r\n    } else {\r\n      const length = Buffer.byteLength(data);\r\n\r\n      if (length > 123) {\r\n        throw new RangeError('The message must not be greater than 123 bytes');\r\n      }\r\n\r\n      buf = Buffer.allocUnsafe(2 + length);\r\n      buf.writeUInt16BE(code, 0);\r\n\r\n      if (typeof data === 'string') {\r\n        buf.write(data, 2);\r\n      } else {\r\n        buf.set(data, 2);\r\n      }\r\n    }\r\n\r\n    const options = {\r\n      [kByteLength]: buf.length,\r\n      fin: true,\r\n      generateMask: this._generateMask,\r\n      mask,\r\n      maskBuffer: this._maskBuffer,\r\n      opcode: 0x08,\r\n      readOnly: false,\r\n      rsv1: false\r\n    };\r\n\r\n    if (this._state !== DEFAULT) {\r\n      this.enqueue([this.dispatch, buf, false, options, cb]);\r\n    } else {\r\n      this.sendFrame(Sender.frame(buf, options), cb);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sends a ping message to the other peer.\r\n   *\r\n   * @param {*} data The message to send\r\n   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`\r\n   * @param {Function} [cb] Callback\r\n   * @public\r\n   */\r\n  ping(data, mask, cb) {\r\n    let byteLength;\r\n    let readOnly;\r\n\r\n    if (typeof data === 'string') {\r\n      byteLength = Buffer.byteLength(data);\r\n      readOnly = false;\r\n    } else if (isBlob(data)) {\r\n      byteLength = data.size;\r\n      readOnly = false;\r\n    } else {\r\n      data = toBuffer(data);\r\n      byteLength = data.length;\r\n      readOnly = toBuffer.readOnly;\r\n    }\r\n\r\n    if (byteLength > 125) {\r\n      throw new RangeError('The data size must not be greater than 125 bytes');\r\n    }\r\n\r\n    const options = {\r\n      [kByteLength]: byteLength,\r\n      fin: true,\r\n      generateMask: this._generateMask,\r\n      mask,\r\n      maskBuffer: this._maskBuffer,\r\n      opcode: 0x09,\r\n      readOnly,\r\n      rsv1: false\r\n    };\r\n\r\n    if (isBlob(data)) {\r\n      if (this._state !== DEFAULT) {\r\n        this.enqueue([this.getBlobData, data, false, options, cb]);\r\n      } else {\r\n        this.getBlobData(data, false, options, cb);\r\n      }\r\n    } else if (this._state !== DEFAULT) {\r\n      this.enqueue([this.dispatch, data, false, options, cb]);\r\n    } else {\r\n      this.sendFrame(Sender.frame(data, options), cb);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sends a pong message to the other peer.\r\n   *\r\n   * @param {*} data The message to send\r\n   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`\r\n   * @param {Function} [cb] Callback\r\n   * @public\r\n   */\r\n  pong(data, mask, cb) {\r\n    let byteLength;\r\n    let readOnly;\r\n\r\n    if (typeof data === 'string') {\r\n      byteLength = Buffer.byteLength(data);\r\n      readOnly = false;\r\n    } else if (isBlob(data)) {\r\n      byteLength = data.size;\r\n      readOnly = false;\r\n    } else {\r\n      data = toBuffer(data);\r\n      byteLength = data.length;\r\n      readOnly = toBuffer.readOnly;\r\n    }\r\n\r\n    if (byteLength > 125) {\r\n      throw new RangeError('The data size must not be greater than 125 bytes');\r\n    }\r\n\r\n    const options = {\r\n      [kByteLength]: byteLength,\r\n      fin: true,\r\n      generateMask: this._generateMask,\r\n      mask,\r\n      maskBuffer: this._maskBuffer,\r\n      opcode: 0x0a,\r\n      readOnly,\r\n      rsv1: false\r\n    };\r\n\r\n    if (isBlob(data)) {\r\n      if (this._state !== DEFAULT) {\r\n        this.enqueue([this.getBlobData, data, false, options, cb]);\r\n      } else {\r\n        this.getBlobData(data, false, options, cb);\r\n      }\r\n    } else if (this._state !== DEFAULT) {\r\n      this.enqueue([this.dispatch, data, false, options, cb]);\r\n    } else {\r\n      this.sendFrame(Sender.frame(data, options), cb);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sends a data message to the other peer.\r\n   *\r\n   * @param {*} data The message to send\r\n   * @param {Object} options Options object\r\n   * @param {Boolean} [options.binary=false] Specifies whether `data` is binary\r\n   *     or text\r\n   * @param {Boolean} [options.compress=false] Specifies whether or not to\r\n   *     compress `data`\r\n   * @param {Boolean} [options.fin=false] Specifies whether the fragment is the\r\n   *     last one\r\n   * @param {Boolean} [options.mask=false] Specifies whether or not to mask\r\n   *     `data`\r\n   * @param {Function} [cb] Callback\r\n   * @public\r\n   */\r\n  send(data, options, cb) {\r\n    const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\r\n    let opcode = options.binary ? 2 : 1;\r\n    let rsv1 = options.compress;\r\n\r\n    let byteLength;\r\n    let readOnly;\r\n\r\n    if (typeof data === 'string') {\r\n      byteLength = Buffer.byteLength(data);\r\n      readOnly = false;\r\n    } else if (isBlob(data)) {\r\n      byteLength = data.size;\r\n      readOnly = false;\r\n    } else {\r\n      data = toBuffer(data);\r\n      byteLength = data.length;\r\n      readOnly = toBuffer.readOnly;\r\n    }\r\n\r\n    if (this._firstFragment) {\r\n      this._firstFragment = false;\r\n      if (\r\n        rsv1 &&\r\n        perMessageDeflate &&\r\n        perMessageDeflate.params[\r\n          perMessageDeflate._isServer\r\n            ? 'server_no_context_takeover'\r\n            : 'client_no_context_takeover'\r\n        ]\r\n      ) {\r\n        rsv1 = byteLength >= perMessageDeflate._threshold;\r\n      }\r\n      this._compress = rsv1;\r\n    } else {\r\n      rsv1 = false;\r\n      opcode = 0;\r\n    }\r\n\r\n    if (options.fin) this._firstFragment = true;\r\n\r\n    const opts = {\r\n      [kByteLength]: byteLength,\r\n      fin: options.fin,\r\n      generateMask: this._generateMask,\r\n      mask: options.mask,\r\n      maskBuffer: this._maskBuffer,\r\n      opcode,\r\n      readOnly,\r\n      rsv1\r\n    };\r\n\r\n    if (isBlob(data)) {\r\n      if (this._state !== DEFAULT) {\r\n        this.enqueue([this.getBlobData, data, this._compress, opts, cb]);\r\n      } else {\r\n        this.getBlobData(data, this._compress, opts, cb);\r\n      }\r\n    } else if (this._state !== DEFAULT) {\r\n      this.enqueue([this.dispatch, data, this._compress, opts, cb]);\r\n    } else {\r\n      this.dispatch(data, this._compress, opts, cb);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the contents of a blob as binary data.\r\n   *\r\n   * @param {Blob} blob The blob\r\n   * @param {Boolean} [compress=false] Specifies whether or not to compress\r\n   *     the data\r\n   * @param {Object} options Options object\r\n   * @param {Boolean} [options.fin=false] Specifies whether or not to set the\r\n   *     FIN bit\r\n   * @param {Function} [options.generateMask] The function used to generate the\r\n   *     masking key\r\n   * @param {Boolean} [options.mask=false] Specifies whether or not to mask\r\n   *     `data`\r\n   * @param {Buffer} [options.maskBuffer] The buffer used to store the masking\r\n   *     key\r\n   * @param {Number} options.opcode The opcode\r\n   * @param {Boolean} [options.readOnly=false] Specifies whether `data` can be\r\n   *     modified\r\n   * @param {Boolean} [options.rsv1=false] Specifies whether or not to set the\r\n   *     RSV1 bit\r\n   * @param {Function} [cb] Callback\r\n   * @private\r\n   */\r\n  getBlobData(blob, compress, options, cb) {\r\n    this._bufferedBytes += options[kByteLength];\r\n    this._state = GET_BLOB_DATA;\r\n\r\n    blob\r\n      .arrayBuffer()\r\n      .then((arrayBuffer) => {\r\n        if (this._socket.destroyed) {\r\n          const err = new Error(\r\n            'The socket was closed while the blob was being read'\r\n          );\r\n\r\n          //\r\n          // `callCallbacks` is called in the next tick to ensure that errors\r\n          // that might be thrown in the callbacks behave like errors thrown\r\n          // outside the promise chain.\r\n          //\r\n          process.nextTick(callCallbacks, this, err, cb);\r\n          return;\r\n        }\r\n\r\n        this._bufferedBytes -= options[kByteLength];\r\n        const data = toBuffer(arrayBuffer);\r\n\r\n        if (!compress) {\r\n          this._state = DEFAULT;\r\n          this.sendFrame(Sender.frame(data, options), cb);\r\n          this.dequeue();\r\n        } else {\r\n          this.dispatch(data, compress, options, cb);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        //\r\n        // `onError` is called in the next tick for the same reason that\r\n        // `callCallbacks` above is.\r\n        //\r\n        process.nextTick(onError, this, err, cb);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Dispatches a message.\r\n   *\r\n   * @param {(Buffer|String)} data The message to send\r\n   * @param {Boolean} [compress=false] Specifies whether or not to compress\r\n   *     `data`\r\n   * @param {Object} options Options object\r\n   * @param {Boolean} [options.fin=false] Specifies whether or not to set the\r\n   *     FIN bit\r\n   * @param {Function} [options.generateMask] The function used to generate the\r\n   *     masking key\r\n   * @param {Boolean} [options.mask=false] Specifies whether or not to mask\r\n   *     `data`\r\n   * @param {Buffer} [options.maskBuffer] The buffer used to store the masking\r\n   *     key\r\n   * @param {Number} options.opcode The opcode\r\n   * @param {Boolean} [options.readOnly=false] Specifies whether `data` can be\r\n   *     modified\r\n   * @param {Boolean} [options.rsv1=false] Specifies whether or not to set the\r\n   *     RSV1 bit\r\n   * @param {Function} [cb] Callback\r\n   * @private\r\n   */\r\n  dispatch(data, compress, options, cb) {\r\n    if (!compress) {\r\n      this.sendFrame(Sender.frame(data, options), cb);\r\n      return;\r\n    }\r\n\r\n    const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\r\n\r\n    this._bufferedBytes += options[kByteLength];\r\n    this._state = DEFLATING;\r\n    perMessageDeflate.compress(data, options.fin, (_, buf) => {\r\n      if (this._socket.destroyed) {\r\n        const err = new Error(\r\n          'The socket was closed while data was being compressed'\r\n        );\r\n\r\n        callCallbacks(this, err, cb);\r\n        return;\r\n      }\r\n\r\n      this._bufferedBytes -= options[kByteLength];\r\n      this._state = DEFAULT;\r\n      options.readOnly = false;\r\n      this.sendFrame(Sender.frame(buf, options), cb);\r\n      this.dequeue();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Executes queued send operations.\r\n   *\r\n   * @private\r\n   */\r\n  dequeue() {\r\n    while (this._state === DEFAULT && this._queue.length) {\r\n      const params = this._queue.shift();\r\n\r\n      this._bufferedBytes -= params[3][kByteLength];\r\n      Reflect.apply(params[0], this, params.slice(1));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Enqueues a send operation.\r\n   *\r\n   * @param {Array} params Send operation parameters.\r\n   * @private\r\n   */\r\n  enqueue(params) {\r\n    this._bufferedBytes += params[3][kByteLength];\r\n    this._queue.push(params);\r\n  }\r\n\r\n  /**\r\n   * Sends a frame.\r\n   *\r\n   * @param {Buffer[]} list The frame to send\r\n   * @param {Function} [cb] Callback\r\n   * @private\r\n   */\r\n  sendFrame(list, cb) {\r\n    if (list.length === 2) {\r\n      this._socket.cork();\r\n      this._socket.write(list[0]);\r\n      this._socket.write(list[1], cb);\r\n      this._socket.uncork();\r\n    } else {\r\n      this._socket.write(list[0], cb);\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = Sender;\r\n\r\n/**\r\n * Calls queued callbacks with an error.\r\n *\r\n * @param {Sender} sender The `Sender` instance\r\n * @param {Error} err The error to call the callbacks with\r\n * @param {Function} [cb] The first callback\r\n * @private\r\n */\r\nfunction callCallbacks(sender, err, cb) {\r\n  if (typeof cb === 'function') cb(err);\r\n\r\n  for (let i = 0; i < sender._queue.length; i++) {\r\n    const params = sender._queue[i];\r\n    const callback = params[params.length - 1];\r\n\r\n    if (typeof callback === 'function') callback(err);\r\n  }\r\n}\r\n\r\n/**\r\n * Handles a `Sender` error.\r\n *\r\n * @param {Sender} sender The `Sender` instance\r\n * @param {Error} err The error\r\n * @param {Function} [cb] The first pending callback\r\n * @private\r\n */\r\nfunction onError(sender, err, cb) {\r\n  callCallbacks(sender, err, cb);\r\n  sender.onerror(err);\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd3MvbGliL3NlbmRlci5qcyIsIm1hcHBpbmdzIjoiQUFBQSxzQ0FBc0MsZ0NBQWdDO0FBQ3RFO0FBQ2E7QUFDYjtBQUNBLFFBQVEsU0FBUyxFQUFFLG1CQUFPLENBQUMsc0JBQVE7QUFDbkMsUUFBUSxpQkFBaUIsRUFBRSxtQkFBTyxDQUFDLHNCQUFRO0FBQzNDO0FBQ0EsMEJBQTBCLG1CQUFPLENBQUMsK0VBQXNCO0FBQ3hELFFBQVEsaUNBQWlDLEVBQUUsbUJBQU8sQ0FBQyw2REFBYTtBQUNoRSxRQUFRLDRCQUE0QixFQUFFLG1CQUFPLENBQUMsK0RBQWM7QUFDNUQsUUFBUSw0QkFBNEIsRUFBRSxtQkFBTyxDQUFDLGlFQUFlO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckIsYUFBYSxVQUFVO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxpQkFBaUI7QUFDOUIsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsU0FBUztBQUN0QjtBQUNBLGFBQWEsVUFBVTtBQUN2QjtBQUNBLGFBQWEsU0FBUztBQUN0QjtBQUNBLGFBQWEsUUFBUTtBQUNyQjtBQUNBLGFBQWEsUUFBUTtBQUNyQixhQUFhLFNBQVM7QUFDdEI7QUFDQSxhQUFhLFNBQVM7QUFDdEI7QUFDQSxjQUFjLG1CQUFtQjtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixhQUFhLGlCQUFpQjtBQUM5QixhQUFhLFNBQVM7QUFDdEIsYUFBYSxVQUFVO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxHQUFHO0FBQ2hCLGFBQWEsU0FBUztBQUN0QixhQUFhLFVBQVU7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxHQUFHO0FBQ2hCLGFBQWEsU0FBUztBQUN0QixhQUFhLFVBQVU7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxHQUFHO0FBQ2hCLGFBQWEsUUFBUTtBQUNyQixhQUFhLFNBQVM7QUFDdEI7QUFDQSxhQUFhLFNBQVM7QUFDdEI7QUFDQSxhQUFhLFNBQVM7QUFDdEI7QUFDQSxhQUFhLFNBQVM7QUFDdEI7QUFDQSxhQUFhLFVBQVU7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLE1BQU07QUFDbkIsYUFBYSxTQUFTO0FBQ3RCO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsU0FBUztBQUN0QjtBQUNBLGFBQWEsVUFBVTtBQUN2QjtBQUNBLGFBQWEsU0FBUztBQUN0QjtBQUNBLGFBQWEsUUFBUTtBQUNyQjtBQUNBLGFBQWEsUUFBUTtBQUNyQixhQUFhLFNBQVM7QUFDdEI7QUFDQSxhQUFhLFNBQVM7QUFDdEI7QUFDQSxhQUFhLFVBQVU7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLGlCQUFpQjtBQUM5QixhQUFhLFNBQVM7QUFDdEI7QUFDQSxhQUFhLFFBQVE7QUFDckIsYUFBYSxTQUFTO0FBQ3RCO0FBQ0EsYUFBYSxVQUFVO0FBQ3ZCO0FBQ0EsYUFBYSxTQUFTO0FBQ3RCO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsU0FBUztBQUN0QjtBQUNBLGFBQWEsU0FBUztBQUN0QjtBQUNBLGFBQWEsVUFBVTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFVBQVU7QUFDdkIsYUFBYSxVQUFVO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsVUFBVTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLDBCQUEwQjtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLE9BQU87QUFDbEIsV0FBVyxVQUFVO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3B1YmxpY2lzLWt2LXN5c3RlbS8uL25vZGVfbW9kdWxlcy93cy9saWIvc2VuZGVyLmpzPzY5NDEiXSwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50IG5vLXVudXNlZC12YXJzOiBbXCJlcnJvclwiLCB7IFwidmFyc0lnbm9yZVBhdHRlcm5cIjogXCJeRHVwbGV4XCIgfV0gKi9cclxuXHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbmNvbnN0IHsgRHVwbGV4IH0gPSByZXF1aXJlKCdzdHJlYW0nKTtcclxuY29uc3QgeyByYW5kb21GaWxsU3luYyB9ID0gcmVxdWlyZSgnY3J5cHRvJyk7XHJcblxyXG5jb25zdCBQZXJNZXNzYWdlRGVmbGF0ZSA9IHJlcXVpcmUoJy4vcGVybWVzc2FnZS1kZWZsYXRlJyk7XHJcbmNvbnN0IHsgRU1QVFlfQlVGRkVSLCBrV2ViU29ja2V0LCBOT09QIH0gPSByZXF1aXJlKCcuL2NvbnN0YW50cycpO1xyXG5jb25zdCB7IGlzQmxvYiwgaXNWYWxpZFN0YXR1c0NvZGUgfSA9IHJlcXVpcmUoJy4vdmFsaWRhdGlvbicpO1xyXG5jb25zdCB7IG1hc2s6IGFwcGx5TWFzaywgdG9CdWZmZXIgfSA9IHJlcXVpcmUoJy4vYnVmZmVyLXV0aWwnKTtcclxuXHJcbmNvbnN0IGtCeXRlTGVuZ3RoID0gU3ltYm9sKCdrQnl0ZUxlbmd0aCcpO1xyXG5jb25zdCBtYXNrQnVmZmVyID0gQnVmZmVyLmFsbG9jKDQpO1xyXG5jb25zdCBSQU5ET01fUE9PTF9TSVpFID0gOCAqIDEwMjQ7XHJcbmxldCByYW5kb21Qb29sO1xyXG5sZXQgcmFuZG9tUG9vbFBvaW50ZXIgPSBSQU5ET01fUE9PTF9TSVpFO1xyXG5cclxuY29uc3QgREVGQVVMVCA9IDA7XHJcbmNvbnN0IERFRkxBVElORyA9IDE7XHJcbmNvbnN0IEdFVF9CTE9CX0RBVEEgPSAyO1xyXG5cclxuLyoqXHJcbiAqIEh5QmkgU2VuZGVyIGltcGxlbWVudGF0aW9uLlxyXG4gKi9cclxuY2xhc3MgU2VuZGVyIHtcclxuICAvKipcclxuICAgKiBDcmVhdGVzIGEgU2VuZGVyIGluc3RhbmNlLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtEdXBsZXh9IHNvY2tldCBUaGUgY29ubmVjdGlvbiBzb2NrZXRcclxuICAgKiBAcGFyYW0ge09iamVjdH0gW2V4dGVuc2lvbnNdIEFuIG9iamVjdCBjb250YWluaW5nIHRoZSBuZWdvdGlhdGVkIGV4dGVuc2lvbnNcclxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbZ2VuZXJhdGVNYXNrXSBUaGUgZnVuY3Rpb24gdXNlZCB0byBnZW5lcmF0ZSB0aGUgbWFza2luZ1xyXG4gICAqICAgICBrZXlcclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvcihzb2NrZXQsIGV4dGVuc2lvbnMsIGdlbmVyYXRlTWFzaykge1xyXG4gICAgdGhpcy5fZXh0ZW5zaW9ucyA9IGV4dGVuc2lvbnMgfHwge307XHJcblxyXG4gICAgaWYgKGdlbmVyYXRlTWFzaykge1xyXG4gICAgICB0aGlzLl9nZW5lcmF0ZU1hc2sgPSBnZW5lcmF0ZU1hc2s7XHJcbiAgICAgIHRoaXMuX21hc2tCdWZmZXIgPSBCdWZmZXIuYWxsb2MoNCk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5fc29ja2V0ID0gc29ja2V0O1xyXG5cclxuICAgIHRoaXMuX2ZpcnN0RnJhZ21lbnQgPSB0cnVlO1xyXG4gICAgdGhpcy5fY29tcHJlc3MgPSBmYWxzZTtcclxuXHJcbiAgICB0aGlzLl9idWZmZXJlZEJ5dGVzID0gMDtcclxuICAgIHRoaXMuX3F1ZXVlID0gW107XHJcbiAgICB0aGlzLl9zdGF0ZSA9IERFRkFVTFQ7XHJcbiAgICB0aGlzLm9uZXJyb3IgPSBOT09QO1xyXG4gICAgdGhpc1trV2ViU29ja2V0XSA9IHVuZGVmaW5lZDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEZyYW1lcyBhIHBpZWNlIG9mIGRhdGEgYWNjb3JkaW5nIHRvIHRoZSBIeUJpIFdlYlNvY2tldCBwcm90b2NvbC5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7KEJ1ZmZlcnxTdHJpbmcpfSBkYXRhIFRoZSBkYXRhIHRvIGZyYW1lXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgT3B0aW9ucyBvYmplY3RcclxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLmZpbj1mYWxzZV0gU3BlY2lmaWVzIHdoZXRoZXIgb3Igbm90IHRvIHNldCB0aGVcclxuICAgKiAgICAgRklOIGJpdFxyXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IFtvcHRpb25zLmdlbmVyYXRlTWFza10gVGhlIGZ1bmN0aW9uIHVzZWQgdG8gZ2VuZXJhdGUgdGhlXHJcbiAgICogICAgIG1hc2tpbmcga2V5XHJcbiAgICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5tYXNrPWZhbHNlXSBTcGVjaWZpZXMgd2hldGhlciBvciBub3QgdG8gbWFza1xyXG4gICAqICAgICBgZGF0YWBcclxuICAgKiBAcGFyYW0ge0J1ZmZlcn0gW29wdGlvbnMubWFza0J1ZmZlcl0gVGhlIGJ1ZmZlciB1c2VkIHRvIHN0b3JlIHRoZSBtYXNraW5nXHJcbiAgICogICAgIGtleVxyXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBvcHRpb25zLm9wY29kZSBUaGUgb3Bjb2RlXHJcbiAgICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5yZWFkT25seT1mYWxzZV0gU3BlY2lmaWVzIHdoZXRoZXIgYGRhdGFgIGNhbiBiZVxyXG4gICAqICAgICBtb2RpZmllZFxyXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMucnN2MT1mYWxzZV0gU3BlY2lmaWVzIHdoZXRoZXIgb3Igbm90IHRvIHNldCB0aGVcclxuICAgKiAgICAgUlNWMSBiaXRcclxuICAgKiBAcmV0dXJuIHsoQnVmZmVyfFN0cmluZylbXX0gVGhlIGZyYW1lZCBkYXRhXHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIHN0YXRpYyBmcmFtZShkYXRhLCBvcHRpb25zKSB7XHJcbiAgICBsZXQgbWFzaztcclxuICAgIGxldCBtZXJnZSA9IGZhbHNlO1xyXG4gICAgbGV0IG9mZnNldCA9IDI7XHJcbiAgICBsZXQgc2tpcE1hc2tpbmcgPSBmYWxzZTtcclxuXHJcbiAgICBpZiAob3B0aW9ucy5tYXNrKSB7XHJcbiAgICAgIG1hc2sgPSBvcHRpb25zLm1hc2tCdWZmZXIgfHwgbWFza0J1ZmZlcjtcclxuXHJcbiAgICAgIGlmIChvcHRpb25zLmdlbmVyYXRlTWFzaykge1xyXG4gICAgICAgIG9wdGlvbnMuZ2VuZXJhdGVNYXNrKG1hc2spO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGlmIChyYW5kb21Qb29sUG9pbnRlciA9PT0gUkFORE9NX1BPT0xfU0laRSkge1xyXG4gICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgICovXHJcbiAgICAgICAgICBpZiAocmFuZG9tUG9vbCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgIC8vIFRoaXMgaXMgbGF6aWx5IGluaXRpYWxpemVkIGJlY2F1c2Ugc2VydmVyLXNlbnQgZnJhbWVzIG11c3Qgbm90XHJcbiAgICAgICAgICAgIC8vIGJlIG1hc2tlZCBzbyBpdCBtYXkgbmV2ZXIgYmUgdXNlZC5cclxuICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgcmFuZG9tUG9vbCA9IEJ1ZmZlci5hbGxvYyhSQU5ET01fUE9PTF9TSVpFKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICByYW5kb21GaWxsU3luYyhyYW5kb21Qb29sLCAwLCBSQU5ET01fUE9PTF9TSVpFKTtcclxuICAgICAgICAgIHJhbmRvbVBvb2xQb2ludGVyID0gMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIG1hc2tbMF0gPSByYW5kb21Qb29sW3JhbmRvbVBvb2xQb2ludGVyKytdO1xyXG4gICAgICAgIG1hc2tbMV0gPSByYW5kb21Qb29sW3JhbmRvbVBvb2xQb2ludGVyKytdO1xyXG4gICAgICAgIG1hc2tbMl0gPSByYW5kb21Qb29sW3JhbmRvbVBvb2xQb2ludGVyKytdO1xyXG4gICAgICAgIG1hc2tbM10gPSByYW5kb21Qb29sW3JhbmRvbVBvb2xQb2ludGVyKytdO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBza2lwTWFza2luZyA9IChtYXNrWzBdIHwgbWFza1sxXSB8IG1hc2tbMl0gfCBtYXNrWzNdKSA9PT0gMDtcclxuICAgICAgb2Zmc2V0ID0gNjtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgZGF0YUxlbmd0aDtcclxuXHJcbiAgICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgIGlmIChcclxuICAgICAgICAoIW9wdGlvbnMubWFzayB8fCBza2lwTWFza2luZykgJiZcclxuICAgICAgICBvcHRpb25zW2tCeXRlTGVuZ3RoXSAhPT0gdW5kZWZpbmVkXHJcbiAgICAgICkge1xyXG4gICAgICAgIGRhdGFMZW5ndGggPSBvcHRpb25zW2tCeXRlTGVuZ3RoXTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBkYXRhID0gQnVmZmVyLmZyb20oZGF0YSk7XHJcbiAgICAgICAgZGF0YUxlbmd0aCA9IGRhdGEubGVuZ3RoO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBkYXRhTGVuZ3RoID0gZGF0YS5sZW5ndGg7XHJcbiAgICAgIG1lcmdlID0gb3B0aW9ucy5tYXNrICYmIG9wdGlvbnMucmVhZE9ubHkgJiYgIXNraXBNYXNraW5nO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBwYXlsb2FkTGVuZ3RoID0gZGF0YUxlbmd0aDtcclxuXHJcbiAgICBpZiAoZGF0YUxlbmd0aCA+PSA2NTUzNikge1xyXG4gICAgICBvZmZzZXQgKz0gODtcclxuICAgICAgcGF5bG9hZExlbmd0aCA9IDEyNztcclxuICAgIH0gZWxzZSBpZiAoZGF0YUxlbmd0aCA+IDEyNSkge1xyXG4gICAgICBvZmZzZXQgKz0gMjtcclxuICAgICAgcGF5bG9hZExlbmd0aCA9IDEyNjtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCB0YXJnZXQgPSBCdWZmZXIuYWxsb2NVbnNhZmUobWVyZ2UgPyBkYXRhTGVuZ3RoICsgb2Zmc2V0IDogb2Zmc2V0KTtcclxuXHJcbiAgICB0YXJnZXRbMF0gPSBvcHRpb25zLmZpbiA/IG9wdGlvbnMub3Bjb2RlIHwgMHg4MCA6IG9wdGlvbnMub3Bjb2RlO1xyXG4gICAgaWYgKG9wdGlvbnMucnN2MSkgdGFyZ2V0WzBdIHw9IDB4NDA7XHJcblxyXG4gICAgdGFyZ2V0WzFdID0gcGF5bG9hZExlbmd0aDtcclxuXHJcbiAgICBpZiAocGF5bG9hZExlbmd0aCA9PT0gMTI2KSB7XHJcbiAgICAgIHRhcmdldC53cml0ZVVJbnQxNkJFKGRhdGFMZW5ndGgsIDIpO1xyXG4gICAgfSBlbHNlIGlmIChwYXlsb2FkTGVuZ3RoID09PSAxMjcpIHtcclxuICAgICAgdGFyZ2V0WzJdID0gdGFyZ2V0WzNdID0gMDtcclxuICAgICAgdGFyZ2V0LndyaXRlVUludEJFKGRhdGFMZW5ndGgsIDQsIDYpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICghb3B0aW9ucy5tYXNrKSByZXR1cm4gW3RhcmdldCwgZGF0YV07XHJcblxyXG4gICAgdGFyZ2V0WzFdIHw9IDB4ODA7XHJcbiAgICB0YXJnZXRbb2Zmc2V0IC0gNF0gPSBtYXNrWzBdO1xyXG4gICAgdGFyZ2V0W29mZnNldCAtIDNdID0gbWFza1sxXTtcclxuICAgIHRhcmdldFtvZmZzZXQgLSAyXSA9IG1hc2tbMl07XHJcbiAgICB0YXJnZXRbb2Zmc2V0IC0gMV0gPSBtYXNrWzNdO1xyXG5cclxuICAgIGlmIChza2lwTWFza2luZykgcmV0dXJuIFt0YXJnZXQsIGRhdGFdO1xyXG5cclxuICAgIGlmIChtZXJnZSkge1xyXG4gICAgICBhcHBseU1hc2soZGF0YSwgbWFzaywgdGFyZ2V0LCBvZmZzZXQsIGRhdGFMZW5ndGgpO1xyXG4gICAgICByZXR1cm4gW3RhcmdldF07XHJcbiAgICB9XHJcblxyXG4gICAgYXBwbHlNYXNrKGRhdGEsIG1hc2ssIGRhdGEsIDAsIGRhdGFMZW5ndGgpO1xyXG4gICAgcmV0dXJuIFt0YXJnZXQsIGRhdGFdO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2VuZHMgYSBjbG9zZSBtZXNzYWdlIHRvIHRoZSBvdGhlciBwZWVyLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb2RlXSBUaGUgc3RhdHVzIGNvZGUgY29tcG9uZW50IG9mIHRoZSBib2R5XHJcbiAgICogQHBhcmFtIHsoU3RyaW5nfEJ1ZmZlcil9IFtkYXRhXSBUaGUgbWVzc2FnZSBjb21wb25lbnQgb2YgdGhlIGJvZHlcclxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IFttYXNrPWZhbHNlXSBTcGVjaWZpZXMgd2hldGhlciBvciBub3QgdG8gbWFzayB0aGUgbWVzc2FnZVxyXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYl0gQ2FsbGJhY2tcclxuICAgKiBAcHVibGljXHJcbiAgICovXHJcbiAgY2xvc2UoY29kZSwgZGF0YSwgbWFzaywgY2IpIHtcclxuICAgIGxldCBidWY7XHJcblxyXG4gICAgaWYgKGNvZGUgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICBidWYgPSBFTVBUWV9CVUZGRVI7XHJcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBjb2RlICE9PSAnbnVtYmVyJyB8fCAhaXNWYWxpZFN0YXR1c0NvZGUoY29kZSkpIHtcclxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHZhbGlkIGVycm9yIGNvZGUgbnVtYmVyJyk7XHJcbiAgICB9IGVsc2UgaWYgKGRhdGEgPT09IHVuZGVmaW5lZCB8fCAhZGF0YS5sZW5ndGgpIHtcclxuICAgICAgYnVmID0gQnVmZmVyLmFsbG9jVW5zYWZlKDIpO1xyXG4gICAgICBidWYud3JpdGVVSW50MTZCRShjb2RlLCAwKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNvbnN0IGxlbmd0aCA9IEJ1ZmZlci5ieXRlTGVuZ3RoKGRhdGEpO1xyXG5cclxuICAgICAgaWYgKGxlbmd0aCA+IDEyMykge1xyXG4gICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdUaGUgbWVzc2FnZSBtdXN0IG5vdCBiZSBncmVhdGVyIHRoYW4gMTIzIGJ5dGVzJyk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGJ1ZiA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgyICsgbGVuZ3RoKTtcclxuICAgICAgYnVmLndyaXRlVUludDE2QkUoY29kZSwgMCk7XHJcblxyXG4gICAgICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgYnVmLndyaXRlKGRhdGEsIDIpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGJ1Zi5zZXQoZGF0YSwgMik7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0ge1xyXG4gICAgICBba0J5dGVMZW5ndGhdOiBidWYubGVuZ3RoLFxyXG4gICAgICBmaW46IHRydWUsXHJcbiAgICAgIGdlbmVyYXRlTWFzazogdGhpcy5fZ2VuZXJhdGVNYXNrLFxyXG4gICAgICBtYXNrLFxyXG4gICAgICBtYXNrQnVmZmVyOiB0aGlzLl9tYXNrQnVmZmVyLFxyXG4gICAgICBvcGNvZGU6IDB4MDgsXHJcbiAgICAgIHJlYWRPbmx5OiBmYWxzZSxcclxuICAgICAgcnN2MTogZmFsc2VcclxuICAgIH07XHJcblxyXG4gICAgaWYgKHRoaXMuX3N0YXRlICE9PSBERUZBVUxUKSB7XHJcbiAgICAgIHRoaXMuZW5xdWV1ZShbdGhpcy5kaXNwYXRjaCwgYnVmLCBmYWxzZSwgb3B0aW9ucywgY2JdKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuc2VuZEZyYW1lKFNlbmRlci5mcmFtZShidWYsIG9wdGlvbnMpLCBjYik7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTZW5kcyBhIHBpbmcgbWVzc2FnZSB0byB0aGUgb3RoZXIgcGVlci5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7Kn0gZGF0YSBUaGUgbWVzc2FnZSB0byBzZW5kXHJcbiAgICogQHBhcmFtIHtCb29sZWFufSBbbWFzaz1mYWxzZV0gU3BlY2lmaWVzIHdoZXRoZXIgb3Igbm90IHRvIG1hc2sgYGRhdGFgXHJcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NiXSBDYWxsYmFja1xyXG4gICAqIEBwdWJsaWNcclxuICAgKi9cclxuICBwaW5nKGRhdGEsIG1hc2ssIGNiKSB7XHJcbiAgICBsZXQgYnl0ZUxlbmd0aDtcclxuICAgIGxldCByZWFkT25seTtcclxuXHJcbiAgICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgIGJ5dGVMZW5ndGggPSBCdWZmZXIuYnl0ZUxlbmd0aChkYXRhKTtcclxuICAgICAgcmVhZE9ubHkgPSBmYWxzZTtcclxuICAgIH0gZWxzZSBpZiAoaXNCbG9iKGRhdGEpKSB7XHJcbiAgICAgIGJ5dGVMZW5ndGggPSBkYXRhLnNpemU7XHJcbiAgICAgIHJlYWRPbmx5ID0gZmFsc2U7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBkYXRhID0gdG9CdWZmZXIoZGF0YSk7XHJcbiAgICAgIGJ5dGVMZW5ndGggPSBkYXRhLmxlbmd0aDtcclxuICAgICAgcmVhZE9ubHkgPSB0b0J1ZmZlci5yZWFkT25seTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoYnl0ZUxlbmd0aCA+IDEyNSkge1xyXG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVGhlIGRhdGEgc2l6ZSBtdXN0IG5vdCBiZSBncmVhdGVyIHRoYW4gMTI1IGJ5dGVzJyk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcclxuICAgICAgW2tCeXRlTGVuZ3RoXTogYnl0ZUxlbmd0aCxcclxuICAgICAgZmluOiB0cnVlLFxyXG4gICAgICBnZW5lcmF0ZU1hc2s6IHRoaXMuX2dlbmVyYXRlTWFzayxcclxuICAgICAgbWFzayxcclxuICAgICAgbWFza0J1ZmZlcjogdGhpcy5fbWFza0J1ZmZlcixcclxuICAgICAgb3Bjb2RlOiAweDA5LFxyXG4gICAgICByZWFkT25seSxcclxuICAgICAgcnN2MTogZmFsc2VcclxuICAgIH07XHJcblxyXG4gICAgaWYgKGlzQmxvYihkYXRhKSkge1xyXG4gICAgICBpZiAodGhpcy5fc3RhdGUgIT09IERFRkFVTFQpIHtcclxuICAgICAgICB0aGlzLmVucXVldWUoW3RoaXMuZ2V0QmxvYkRhdGEsIGRhdGEsIGZhbHNlLCBvcHRpb25zLCBjYl0pO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMuZ2V0QmxvYkRhdGEoZGF0YSwgZmFsc2UsIG9wdGlvbnMsIGNiKTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIGlmICh0aGlzLl9zdGF0ZSAhPT0gREVGQVVMVCkge1xyXG4gICAgICB0aGlzLmVucXVldWUoW3RoaXMuZGlzcGF0Y2gsIGRhdGEsIGZhbHNlLCBvcHRpb25zLCBjYl0pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5zZW5kRnJhbWUoU2VuZGVyLmZyYW1lKGRhdGEsIG9wdGlvbnMpLCBjYik7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTZW5kcyBhIHBvbmcgbWVzc2FnZSB0byB0aGUgb3RoZXIgcGVlci5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7Kn0gZGF0YSBUaGUgbWVzc2FnZSB0byBzZW5kXHJcbiAgICogQHBhcmFtIHtCb29sZWFufSBbbWFzaz1mYWxzZV0gU3BlY2lmaWVzIHdoZXRoZXIgb3Igbm90IHRvIG1hc2sgYGRhdGFgXHJcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NiXSBDYWxsYmFja1xyXG4gICAqIEBwdWJsaWNcclxuICAgKi9cclxuICBwb25nKGRhdGEsIG1hc2ssIGNiKSB7XHJcbiAgICBsZXQgYnl0ZUxlbmd0aDtcclxuICAgIGxldCByZWFkT25seTtcclxuXHJcbiAgICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgIGJ5dGVMZW5ndGggPSBCdWZmZXIuYnl0ZUxlbmd0aChkYXRhKTtcclxuICAgICAgcmVhZE9ubHkgPSBmYWxzZTtcclxuICAgIH0gZWxzZSBpZiAoaXNCbG9iKGRhdGEpKSB7XHJcbiAgICAgIGJ5dGVMZW5ndGggPSBkYXRhLnNpemU7XHJcbiAgICAgIHJlYWRPbmx5ID0gZmFsc2U7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBkYXRhID0gdG9CdWZmZXIoZGF0YSk7XHJcbiAgICAgIGJ5dGVMZW5ndGggPSBkYXRhLmxlbmd0aDtcclxuICAgICAgcmVhZE9ubHkgPSB0b0J1ZmZlci5yZWFkT25seTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoYnl0ZUxlbmd0aCA+IDEyNSkge1xyXG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVGhlIGRhdGEgc2l6ZSBtdXN0IG5vdCBiZSBncmVhdGVyIHRoYW4gMTI1IGJ5dGVzJyk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcclxuICAgICAgW2tCeXRlTGVuZ3RoXTogYnl0ZUxlbmd0aCxcclxuICAgICAgZmluOiB0cnVlLFxyXG4gICAgICBnZW5lcmF0ZU1hc2s6IHRoaXMuX2dlbmVyYXRlTWFzayxcclxuICAgICAgbWFzayxcclxuICAgICAgbWFza0J1ZmZlcjogdGhpcy5fbWFza0J1ZmZlcixcclxuICAgICAgb3Bjb2RlOiAweDBhLFxyXG4gICAgICByZWFkT25seSxcclxuICAgICAgcnN2MTogZmFsc2VcclxuICAgIH07XHJcblxyXG4gICAgaWYgKGlzQmxvYihkYXRhKSkge1xyXG4gICAgICBpZiAodGhpcy5fc3RhdGUgIT09IERFRkFVTFQpIHtcclxuICAgICAgICB0aGlzLmVucXVldWUoW3RoaXMuZ2V0QmxvYkRhdGEsIGRhdGEsIGZhbHNlLCBvcHRpb25zLCBjYl0pO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMuZ2V0QmxvYkRhdGEoZGF0YSwgZmFsc2UsIG9wdGlvbnMsIGNiKTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIGlmICh0aGlzLl9zdGF0ZSAhPT0gREVGQVVMVCkge1xyXG4gICAgICB0aGlzLmVucXVldWUoW3RoaXMuZGlzcGF0Y2gsIGRhdGEsIGZhbHNlLCBvcHRpb25zLCBjYl0pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5zZW5kRnJhbWUoU2VuZGVyLmZyYW1lKGRhdGEsIG9wdGlvbnMpLCBjYik7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTZW5kcyBhIGRhdGEgbWVzc2FnZSB0byB0aGUgb3RoZXIgcGVlci5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7Kn0gZGF0YSBUaGUgbWVzc2FnZSB0byBzZW5kXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgT3B0aW9ucyBvYmplY3RcclxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLmJpbmFyeT1mYWxzZV0gU3BlY2lmaWVzIHdoZXRoZXIgYGRhdGFgIGlzIGJpbmFyeVxyXG4gICAqICAgICBvciB0ZXh0XHJcbiAgICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5jb21wcmVzcz1mYWxzZV0gU3BlY2lmaWVzIHdoZXRoZXIgb3Igbm90IHRvXHJcbiAgICogICAgIGNvbXByZXNzIGBkYXRhYFxyXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMuZmluPWZhbHNlXSBTcGVjaWZpZXMgd2hldGhlciB0aGUgZnJhZ21lbnQgaXMgdGhlXHJcbiAgICogICAgIGxhc3Qgb25lXHJcbiAgICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5tYXNrPWZhbHNlXSBTcGVjaWZpZXMgd2hldGhlciBvciBub3QgdG8gbWFza1xyXG4gICAqICAgICBgZGF0YWBcclxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2JdIENhbGxiYWNrXHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIHNlbmQoZGF0YSwgb3B0aW9ucywgY2IpIHtcclxuICAgIGNvbnN0IHBlck1lc3NhZ2VEZWZsYXRlID0gdGhpcy5fZXh0ZW5zaW9uc1tQZXJNZXNzYWdlRGVmbGF0ZS5leHRlbnNpb25OYW1lXTtcclxuICAgIGxldCBvcGNvZGUgPSBvcHRpb25zLmJpbmFyeSA/IDIgOiAxO1xyXG4gICAgbGV0IHJzdjEgPSBvcHRpb25zLmNvbXByZXNzO1xyXG5cclxuICAgIGxldCBieXRlTGVuZ3RoO1xyXG4gICAgbGV0IHJlYWRPbmx5O1xyXG5cclxuICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgYnl0ZUxlbmd0aCA9IEJ1ZmZlci5ieXRlTGVuZ3RoKGRhdGEpO1xyXG4gICAgICByZWFkT25seSA9IGZhbHNlO1xyXG4gICAgfSBlbHNlIGlmIChpc0Jsb2IoZGF0YSkpIHtcclxuICAgICAgYnl0ZUxlbmd0aCA9IGRhdGEuc2l6ZTtcclxuICAgICAgcmVhZE9ubHkgPSBmYWxzZTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGRhdGEgPSB0b0J1ZmZlcihkYXRhKTtcclxuICAgICAgYnl0ZUxlbmd0aCA9IGRhdGEubGVuZ3RoO1xyXG4gICAgICByZWFkT25seSA9IHRvQnVmZmVyLnJlYWRPbmx5O1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGlzLl9maXJzdEZyYWdtZW50KSB7XHJcbiAgICAgIHRoaXMuX2ZpcnN0RnJhZ21lbnQgPSBmYWxzZTtcclxuICAgICAgaWYgKFxyXG4gICAgICAgIHJzdjEgJiZcclxuICAgICAgICBwZXJNZXNzYWdlRGVmbGF0ZSAmJlxyXG4gICAgICAgIHBlck1lc3NhZ2VEZWZsYXRlLnBhcmFtc1tcclxuICAgICAgICAgIHBlck1lc3NhZ2VEZWZsYXRlLl9pc1NlcnZlclxyXG4gICAgICAgICAgICA/ICdzZXJ2ZXJfbm9fY29udGV4dF90YWtlb3ZlcidcclxuICAgICAgICAgICAgOiAnY2xpZW50X25vX2NvbnRleHRfdGFrZW92ZXInXHJcbiAgICAgICAgXVxyXG4gICAgICApIHtcclxuICAgICAgICByc3YxID0gYnl0ZUxlbmd0aCA+PSBwZXJNZXNzYWdlRGVmbGF0ZS5fdGhyZXNob2xkO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMuX2NvbXByZXNzID0gcnN2MTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJzdjEgPSBmYWxzZTtcclxuICAgICAgb3Bjb2RlID0gMDtcclxuICAgIH1cclxuXHJcbiAgICBpZiAob3B0aW9ucy5maW4pIHRoaXMuX2ZpcnN0RnJhZ21lbnQgPSB0cnVlO1xyXG5cclxuICAgIGNvbnN0IG9wdHMgPSB7XHJcbiAgICAgIFtrQnl0ZUxlbmd0aF06IGJ5dGVMZW5ndGgsXHJcbiAgICAgIGZpbjogb3B0aW9ucy5maW4sXHJcbiAgICAgIGdlbmVyYXRlTWFzazogdGhpcy5fZ2VuZXJhdGVNYXNrLFxyXG4gICAgICBtYXNrOiBvcHRpb25zLm1hc2ssXHJcbiAgICAgIG1hc2tCdWZmZXI6IHRoaXMuX21hc2tCdWZmZXIsXHJcbiAgICAgIG9wY29kZSxcclxuICAgICAgcmVhZE9ubHksXHJcbiAgICAgIHJzdjFcclxuICAgIH07XHJcblxyXG4gICAgaWYgKGlzQmxvYihkYXRhKSkge1xyXG4gICAgICBpZiAodGhpcy5fc3RhdGUgIT09IERFRkFVTFQpIHtcclxuICAgICAgICB0aGlzLmVucXVldWUoW3RoaXMuZ2V0QmxvYkRhdGEsIGRhdGEsIHRoaXMuX2NvbXByZXNzLCBvcHRzLCBjYl0pO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMuZ2V0QmxvYkRhdGEoZGF0YSwgdGhpcy5fY29tcHJlc3MsIG9wdHMsIGNiKTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIGlmICh0aGlzLl9zdGF0ZSAhPT0gREVGQVVMVCkge1xyXG4gICAgICB0aGlzLmVucXVldWUoW3RoaXMuZGlzcGF0Y2gsIGRhdGEsIHRoaXMuX2NvbXByZXNzLCBvcHRzLCBjYl0pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5kaXNwYXRjaChkYXRhLCB0aGlzLl9jb21wcmVzcywgb3B0cywgY2IpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0cyB0aGUgY29udGVudHMgb2YgYSBibG9iIGFzIGJpbmFyeSBkYXRhLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtCbG9ifSBibG9iIFRoZSBibG9iXHJcbiAgICogQHBhcmFtIHtCb29sZWFufSBbY29tcHJlc3M9ZmFsc2VdIFNwZWNpZmllcyB3aGV0aGVyIG9yIG5vdCB0byBjb21wcmVzc1xyXG4gICAqICAgICB0aGUgZGF0YVxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIE9wdGlvbnMgb2JqZWN0XHJcbiAgICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5maW49ZmFsc2VdIFNwZWNpZmllcyB3aGV0aGVyIG9yIG5vdCB0byBzZXQgdGhlXHJcbiAgICogICAgIEZJTiBiaXRcclxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbb3B0aW9ucy5nZW5lcmF0ZU1hc2tdIFRoZSBmdW5jdGlvbiB1c2VkIHRvIGdlbmVyYXRlIHRoZVxyXG4gICAqICAgICBtYXNraW5nIGtleVxyXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMubWFzaz1mYWxzZV0gU3BlY2lmaWVzIHdoZXRoZXIgb3Igbm90IHRvIG1hc2tcclxuICAgKiAgICAgYGRhdGFgXHJcbiAgICogQHBhcmFtIHtCdWZmZXJ9IFtvcHRpb25zLm1hc2tCdWZmZXJdIFRoZSBidWZmZXIgdXNlZCB0byBzdG9yZSB0aGUgbWFza2luZ1xyXG4gICAqICAgICBrZXlcclxuICAgKiBAcGFyYW0ge051bWJlcn0gb3B0aW9ucy5vcGNvZGUgVGhlIG9wY29kZVxyXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMucmVhZE9ubHk9ZmFsc2VdIFNwZWNpZmllcyB3aGV0aGVyIGBkYXRhYCBjYW4gYmVcclxuICAgKiAgICAgbW9kaWZpZWRcclxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLnJzdjE9ZmFsc2VdIFNwZWNpZmllcyB3aGV0aGVyIG9yIG5vdCB0byBzZXQgdGhlXHJcbiAgICogICAgIFJTVjEgYml0XHJcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NiXSBDYWxsYmFja1xyXG4gICAqIEBwcml2YXRlXHJcbiAgICovXHJcbiAgZ2V0QmxvYkRhdGEoYmxvYiwgY29tcHJlc3MsIG9wdGlvbnMsIGNiKSB7XHJcbiAgICB0aGlzLl9idWZmZXJlZEJ5dGVzICs9IG9wdGlvbnNba0J5dGVMZW5ndGhdO1xyXG4gICAgdGhpcy5fc3RhdGUgPSBHRVRfQkxPQl9EQVRBO1xyXG5cclxuICAgIGJsb2JcclxuICAgICAgLmFycmF5QnVmZmVyKClcclxuICAgICAgLnRoZW4oKGFycmF5QnVmZmVyKSA9PiB7XHJcbiAgICAgICAgaWYgKHRoaXMuX3NvY2tldC5kZXN0cm95ZWQpIHtcclxuICAgICAgICAgIGNvbnN0IGVyciA9IG5ldyBFcnJvcihcclxuICAgICAgICAgICAgJ1RoZSBzb2NrZXQgd2FzIGNsb3NlZCB3aGlsZSB0aGUgYmxvYiB3YXMgYmVpbmcgcmVhZCdcclxuICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgLy9cclxuICAgICAgICAgIC8vIGBjYWxsQ2FsbGJhY2tzYCBpcyBjYWxsZWQgaW4gdGhlIG5leHQgdGljayB0byBlbnN1cmUgdGhhdCBlcnJvcnNcclxuICAgICAgICAgIC8vIHRoYXQgbWlnaHQgYmUgdGhyb3duIGluIHRoZSBjYWxsYmFja3MgYmVoYXZlIGxpa2UgZXJyb3JzIHRocm93blxyXG4gICAgICAgICAgLy8gb3V0c2lkZSB0aGUgcHJvbWlzZSBjaGFpbi5cclxuICAgICAgICAgIC8vXHJcbiAgICAgICAgICBwcm9jZXNzLm5leHRUaWNrKGNhbGxDYWxsYmFja3MsIHRoaXMsIGVyciwgY2IpO1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fYnVmZmVyZWRCeXRlcyAtPSBvcHRpb25zW2tCeXRlTGVuZ3RoXTtcclxuICAgICAgICBjb25zdCBkYXRhID0gdG9CdWZmZXIoYXJyYXlCdWZmZXIpO1xyXG5cclxuICAgICAgICBpZiAoIWNvbXByZXNzKSB7XHJcbiAgICAgICAgICB0aGlzLl9zdGF0ZSA9IERFRkFVTFQ7XHJcbiAgICAgICAgICB0aGlzLnNlbmRGcmFtZShTZW5kZXIuZnJhbWUoZGF0YSwgb3B0aW9ucyksIGNiKTtcclxuICAgICAgICAgIHRoaXMuZGVxdWV1ZSgpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB0aGlzLmRpc3BhdGNoKGRhdGEsIGNvbXByZXNzLCBvcHRpb25zLCBjYik7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KVxyXG4gICAgICAuY2F0Y2goKGVycikgPT4ge1xyXG4gICAgICAgIC8vXHJcbiAgICAgICAgLy8gYG9uRXJyb3JgIGlzIGNhbGxlZCBpbiB0aGUgbmV4dCB0aWNrIGZvciB0aGUgc2FtZSByZWFzb24gdGhhdFxyXG4gICAgICAgIC8vIGBjYWxsQ2FsbGJhY2tzYCBhYm92ZSBpcy5cclxuICAgICAgICAvL1xyXG4gICAgICAgIHByb2Nlc3MubmV4dFRpY2sob25FcnJvciwgdGhpcywgZXJyLCBjYik7XHJcbiAgICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRGlzcGF0Y2hlcyBhIG1lc3NhZ2UuXHJcbiAgICpcclxuICAgKiBAcGFyYW0geyhCdWZmZXJ8U3RyaW5nKX0gZGF0YSBUaGUgbWVzc2FnZSB0byBzZW5kXHJcbiAgICogQHBhcmFtIHtCb29sZWFufSBbY29tcHJlc3M9ZmFsc2VdIFNwZWNpZmllcyB3aGV0aGVyIG9yIG5vdCB0byBjb21wcmVzc1xyXG4gICAqICAgICBgZGF0YWBcclxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyBPcHRpb25zIG9iamVjdFxyXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMuZmluPWZhbHNlXSBTcGVjaWZpZXMgd2hldGhlciBvciBub3QgdG8gc2V0IHRoZVxyXG4gICAqICAgICBGSU4gYml0XHJcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gW29wdGlvbnMuZ2VuZXJhdGVNYXNrXSBUaGUgZnVuY3Rpb24gdXNlZCB0byBnZW5lcmF0ZSB0aGVcclxuICAgKiAgICAgbWFza2luZyBrZXlcclxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLm1hc2s9ZmFsc2VdIFNwZWNpZmllcyB3aGV0aGVyIG9yIG5vdCB0byBtYXNrXHJcbiAgICogICAgIGBkYXRhYFxyXG4gICAqIEBwYXJhbSB7QnVmZmVyfSBbb3B0aW9ucy5tYXNrQnVmZmVyXSBUaGUgYnVmZmVyIHVzZWQgdG8gc3RvcmUgdGhlIG1hc2tpbmdcclxuICAgKiAgICAga2V5XHJcbiAgICogQHBhcmFtIHtOdW1iZXJ9IG9wdGlvbnMub3Bjb2RlIFRoZSBvcGNvZGVcclxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLnJlYWRPbmx5PWZhbHNlXSBTcGVjaWZpZXMgd2hldGhlciBgZGF0YWAgY2FuIGJlXHJcbiAgICogICAgIG1vZGlmaWVkXHJcbiAgICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5yc3YxPWZhbHNlXSBTcGVjaWZpZXMgd2hldGhlciBvciBub3QgdG8gc2V0IHRoZVxyXG4gICAqICAgICBSU1YxIGJpdFxyXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYl0gQ2FsbGJhY2tcclxuICAgKiBAcHJpdmF0ZVxyXG4gICAqL1xyXG4gIGRpc3BhdGNoKGRhdGEsIGNvbXByZXNzLCBvcHRpb25zLCBjYikge1xyXG4gICAgaWYgKCFjb21wcmVzcykge1xyXG4gICAgICB0aGlzLnNlbmRGcmFtZShTZW5kZXIuZnJhbWUoZGF0YSwgb3B0aW9ucyksIGNiKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHBlck1lc3NhZ2VEZWZsYXRlID0gdGhpcy5fZXh0ZW5zaW9uc1tQZXJNZXNzYWdlRGVmbGF0ZS5leHRlbnNpb25OYW1lXTtcclxuXHJcbiAgICB0aGlzLl9idWZmZXJlZEJ5dGVzICs9IG9wdGlvbnNba0J5dGVMZW5ndGhdO1xyXG4gICAgdGhpcy5fc3RhdGUgPSBERUZMQVRJTkc7XHJcbiAgICBwZXJNZXNzYWdlRGVmbGF0ZS5jb21wcmVzcyhkYXRhLCBvcHRpb25zLmZpbiwgKF8sIGJ1ZikgPT4ge1xyXG4gICAgICBpZiAodGhpcy5fc29ja2V0LmRlc3Ryb3llZCkge1xyXG4gICAgICAgIGNvbnN0IGVyciA9IG5ldyBFcnJvcihcclxuICAgICAgICAgICdUaGUgc29ja2V0IHdhcyBjbG9zZWQgd2hpbGUgZGF0YSB3YXMgYmVpbmcgY29tcHJlc3NlZCdcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICBjYWxsQ2FsbGJhY2tzKHRoaXMsIGVyciwgY2IpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgdGhpcy5fYnVmZmVyZWRCeXRlcyAtPSBvcHRpb25zW2tCeXRlTGVuZ3RoXTtcclxuICAgICAgdGhpcy5fc3RhdGUgPSBERUZBVUxUO1xyXG4gICAgICBvcHRpb25zLnJlYWRPbmx5ID0gZmFsc2U7XHJcbiAgICAgIHRoaXMuc2VuZEZyYW1lKFNlbmRlci5mcmFtZShidWYsIG9wdGlvbnMpLCBjYik7XHJcbiAgICAgIHRoaXMuZGVxdWV1ZSgpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBFeGVjdXRlcyBxdWV1ZWQgc2VuZCBvcGVyYXRpb25zLlxyXG4gICAqXHJcbiAgICogQHByaXZhdGVcclxuICAgKi9cclxuICBkZXF1ZXVlKCkge1xyXG4gICAgd2hpbGUgKHRoaXMuX3N0YXRlID09PSBERUZBVUxUICYmIHRoaXMuX3F1ZXVlLmxlbmd0aCkge1xyXG4gICAgICBjb25zdCBwYXJhbXMgPSB0aGlzLl9xdWV1ZS5zaGlmdCgpO1xyXG5cclxuICAgICAgdGhpcy5fYnVmZmVyZWRCeXRlcyAtPSBwYXJhbXNbM11ba0J5dGVMZW5ndGhdO1xyXG4gICAgICBSZWZsZWN0LmFwcGx5KHBhcmFtc1swXSwgdGhpcywgcGFyYW1zLnNsaWNlKDEpKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEVucXVldWVzIGEgc2VuZCBvcGVyYXRpb24uXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge0FycmF5fSBwYXJhbXMgU2VuZCBvcGVyYXRpb24gcGFyYW1ldGVycy5cclxuICAgKiBAcHJpdmF0ZVxyXG4gICAqL1xyXG4gIGVucXVldWUocGFyYW1zKSB7XHJcbiAgICB0aGlzLl9idWZmZXJlZEJ5dGVzICs9IHBhcmFtc1szXVtrQnl0ZUxlbmd0aF07XHJcbiAgICB0aGlzLl9xdWV1ZS5wdXNoKHBhcmFtcyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTZW5kcyBhIGZyYW1lLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtCdWZmZXJbXX0gbGlzdCBUaGUgZnJhbWUgdG8gc2VuZFxyXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYl0gQ2FsbGJhY2tcclxuICAgKiBAcHJpdmF0ZVxyXG4gICAqL1xyXG4gIHNlbmRGcmFtZShsaXN0LCBjYikge1xyXG4gICAgaWYgKGxpc3QubGVuZ3RoID09PSAyKSB7XHJcbiAgICAgIHRoaXMuX3NvY2tldC5jb3JrKCk7XHJcbiAgICAgIHRoaXMuX3NvY2tldC53cml0ZShsaXN0WzBdKTtcclxuICAgICAgdGhpcy5fc29ja2V0LndyaXRlKGxpc3RbMV0sIGNiKTtcclxuICAgICAgdGhpcy5fc29ja2V0LnVuY29yaygpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5fc29ja2V0LndyaXRlKGxpc3RbMF0sIGNiKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gU2VuZGVyO1xyXG5cclxuLyoqXHJcbiAqIENhbGxzIHF1ZXVlZCBjYWxsYmFja3Mgd2l0aCBhbiBlcnJvci5cclxuICpcclxuICogQHBhcmFtIHtTZW5kZXJ9IHNlbmRlciBUaGUgYFNlbmRlcmAgaW5zdGFuY2VcclxuICogQHBhcmFtIHtFcnJvcn0gZXJyIFRoZSBlcnJvciB0byBjYWxsIHRoZSBjYWxsYmFja3Mgd2l0aFxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2JdIFRoZSBmaXJzdCBjYWxsYmFja1xyXG4gKiBAcHJpdmF0ZVxyXG4gKi9cclxuZnVuY3Rpb24gY2FsbENhbGxiYWNrcyhzZW5kZXIsIGVyciwgY2IpIHtcclxuICBpZiAodHlwZW9mIGNiID09PSAnZnVuY3Rpb24nKSBjYihlcnIpO1xyXG5cclxuICBmb3IgKGxldCBpID0gMDsgaSA8IHNlbmRlci5fcXVldWUubGVuZ3RoOyBpKyspIHtcclxuICAgIGNvbnN0IHBhcmFtcyA9IHNlbmRlci5fcXVldWVbaV07XHJcbiAgICBjb25zdCBjYWxsYmFjayA9IHBhcmFtc1twYXJhbXMubGVuZ3RoIC0gMV07XHJcblxyXG4gICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykgY2FsbGJhY2soZXJyKTtcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBIYW5kbGVzIGEgYFNlbmRlcmAgZXJyb3IuXHJcbiAqXHJcbiAqIEBwYXJhbSB7U2VuZGVyfSBzZW5kZXIgVGhlIGBTZW5kZXJgIGluc3RhbmNlXHJcbiAqIEBwYXJhbSB7RXJyb3J9IGVyciBUaGUgZXJyb3JcclxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2NiXSBUaGUgZmlyc3QgcGVuZGluZyBjYWxsYmFja1xyXG4gKiBAcHJpdmF0ZVxyXG4gKi9cclxuZnVuY3Rpb24gb25FcnJvcihzZW5kZXIsIGVyciwgY2IpIHtcclxuICBjYWxsQ2FsbGJhY2tzKHNlbmRlciwgZXJyLCBjYik7XHJcbiAgc2VuZGVyLm9uZXJyb3IoZXJyKTtcclxufVxyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ws/lib/sender.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ws/lib/stream.js":
/*!***************************************!*\
  !*** ./node_modules/ws/lib/stream.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\r\n\r\nconst { Duplex } = __webpack_require__(/*! stream */ \"stream\");\r\n\r\n/**\r\n * Emits the `'close'` event on a stream.\r\n *\r\n * @param {Duplex} stream The stream.\r\n * @private\r\n */\r\nfunction emitClose(stream) {\r\n  stream.emit('close');\r\n}\r\n\r\n/**\r\n * The listener of the `'end'` event.\r\n *\r\n * @private\r\n */\r\nfunction duplexOnEnd() {\r\n  if (!this.destroyed && this._writableState.finished) {\r\n    this.destroy();\r\n  }\r\n}\r\n\r\n/**\r\n * The listener of the `'error'` event.\r\n *\r\n * @param {Error} err The error\r\n * @private\r\n */\r\nfunction duplexOnError(err) {\r\n  this.removeListener('error', duplexOnError);\r\n  this.destroy();\r\n  if (this.listenerCount('error') === 0) {\r\n    // Do not suppress the throwing behavior.\r\n    this.emit('error', err);\r\n  }\r\n}\r\n\r\n/**\r\n * Wraps a `WebSocket` in a duplex stream.\r\n *\r\n * @param {WebSocket} ws The `WebSocket` to wrap\r\n * @param {Object} [options] The options for the `Duplex` constructor\r\n * @return {Duplex} The duplex stream\r\n * @public\r\n */\r\nfunction createWebSocketStream(ws, options) {\r\n  let terminateOnDestroy = true;\r\n\r\n  const duplex = new Duplex({\r\n    ...options,\r\n    autoDestroy: false,\r\n    emitClose: false,\r\n    objectMode: false,\r\n    writableObjectMode: false\r\n  });\r\n\r\n  ws.on('message', function message(msg, isBinary) {\r\n    const data =\r\n      !isBinary && duplex._readableState.objectMode ? msg.toString() : msg;\r\n\r\n    if (!duplex.push(data)) ws.pause();\r\n  });\r\n\r\n  ws.once('error', function error(err) {\r\n    if (duplex.destroyed) return;\r\n\r\n    // Prevent `ws.terminate()` from being called by `duplex._destroy()`.\r\n    //\r\n    // - If the `'error'` event is emitted before the `'open'` event, then\r\n    //   `ws.terminate()` is a noop as no socket is assigned.\r\n    // - Otherwise, the error is re-emitted by the listener of the `'error'`\r\n    //   event of the `Receiver` object. The listener already closes the\r\n    //   connection by calling `ws.close()`. This allows a close frame to be\r\n    //   sent to the other peer. If `ws.terminate()` is called right after this,\r\n    //   then the close frame might not be sent.\r\n    terminateOnDestroy = false;\r\n    duplex.destroy(err);\r\n  });\r\n\r\n  ws.once('close', function close() {\r\n    if (duplex.destroyed) return;\r\n\r\n    duplex.push(null);\r\n  });\r\n\r\n  duplex._destroy = function (err, callback) {\r\n    if (ws.readyState === ws.CLOSED) {\r\n      callback(err);\r\n      process.nextTick(emitClose, duplex);\r\n      return;\r\n    }\r\n\r\n    let called = false;\r\n\r\n    ws.once('error', function error(err) {\r\n      called = true;\r\n      callback(err);\r\n    });\r\n\r\n    ws.once('close', function close() {\r\n      if (!called) callback(err);\r\n      process.nextTick(emitClose, duplex);\r\n    });\r\n\r\n    if (terminateOnDestroy) ws.terminate();\r\n  };\r\n\r\n  duplex._final = function (callback) {\r\n    if (ws.readyState === ws.CONNECTING) {\r\n      ws.once('open', function open() {\r\n        duplex._final(callback);\r\n      });\r\n      return;\r\n    }\r\n\r\n    // If the value of the `_socket` property is `null` it means that `ws` is a\r\n    // client websocket and the handshake failed. In fact, when this happens, a\r\n    // socket is never assigned to the websocket. Wait for the `'error'` event\r\n    // that will be emitted by the websocket.\r\n    if (ws._socket === null) return;\r\n\r\n    if (ws._socket._writableState.finished) {\r\n      callback();\r\n      if (duplex._readableState.endEmitted) duplex.destroy();\r\n    } else {\r\n      ws._socket.once('finish', function finish() {\r\n        // `duplex` is not destroyed here because the `'end'` event will be\r\n        // emitted on `duplex` after this `'finish'` event. The EOF signaling\r\n        // `null` chunk is, in fact, pushed when the websocket emits `'close'`.\r\n        callback();\r\n      });\r\n      ws.close();\r\n    }\r\n  };\r\n\r\n  duplex._read = function () {\r\n    if (ws.isPaused) ws.resume();\r\n  };\r\n\r\n  duplex._write = function (chunk, encoding, callback) {\r\n    if (ws.readyState === ws.CONNECTING) {\r\n      ws.once('open', function open() {\r\n        duplex._write(chunk, encoding, callback);\r\n      });\r\n      return;\r\n    }\r\n\r\n    ws.send(chunk, callback);\r\n  };\r\n\r\n  duplex.on('end', duplexOnEnd);\r\n  duplex.on('error', duplexOnError);\r\n  return duplex;\r\n}\r\n\r\nmodule.exports = createWebSocketStream;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd3MvbGliL3N0cmVhbS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0EsUUFBUSxTQUFTLEVBQUUsbUJBQU8sQ0FBQyxzQkFBUTtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFdBQVc7QUFDdEIsV0FBVyxRQUFRO0FBQ25CLFlBQVksUUFBUTtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wdWJsaWNpcy1rdi1zeXN0ZW0vLi9ub2RlX21vZHVsZXMvd3MvbGliL3N0cmVhbS5qcz85N2U2Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcclxuXHJcbmNvbnN0IHsgRHVwbGV4IH0gPSByZXF1aXJlKCdzdHJlYW0nKTtcclxuXHJcbi8qKlxyXG4gKiBFbWl0cyB0aGUgYCdjbG9zZSdgIGV2ZW50IG9uIGEgc3RyZWFtLlxyXG4gKlxyXG4gKiBAcGFyYW0ge0R1cGxleH0gc3RyZWFtIFRoZSBzdHJlYW0uXHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5mdW5jdGlvbiBlbWl0Q2xvc2Uoc3RyZWFtKSB7XHJcbiAgc3RyZWFtLmVtaXQoJ2Nsb3NlJyk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUaGUgbGlzdGVuZXIgb2YgdGhlIGAnZW5kJ2AgZXZlbnQuXHJcbiAqXHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5mdW5jdGlvbiBkdXBsZXhPbkVuZCgpIHtcclxuICBpZiAoIXRoaXMuZGVzdHJveWVkICYmIHRoaXMuX3dyaXRhYmxlU3RhdGUuZmluaXNoZWQpIHtcclxuICAgIHRoaXMuZGVzdHJveSgpO1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIFRoZSBsaXN0ZW5lciBvZiB0aGUgYCdlcnJvcidgIGV2ZW50LlxyXG4gKlxyXG4gKiBAcGFyYW0ge0Vycm9yfSBlcnIgVGhlIGVycm9yXHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5mdW5jdGlvbiBkdXBsZXhPbkVycm9yKGVycikge1xyXG4gIHRoaXMucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgZHVwbGV4T25FcnJvcik7XHJcbiAgdGhpcy5kZXN0cm95KCk7XHJcbiAgaWYgKHRoaXMubGlzdGVuZXJDb3VudCgnZXJyb3InKSA9PT0gMCkge1xyXG4gICAgLy8gRG8gbm90IHN1cHByZXNzIHRoZSB0aHJvd2luZyBiZWhhdmlvci5cclxuICAgIHRoaXMuZW1pdCgnZXJyb3InLCBlcnIpO1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIFdyYXBzIGEgYFdlYlNvY2tldGAgaW4gYSBkdXBsZXggc3RyZWFtLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1dlYlNvY2tldH0gd3MgVGhlIGBXZWJTb2NrZXRgIHRvIHdyYXBcclxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSBUaGUgb3B0aW9ucyBmb3IgdGhlIGBEdXBsZXhgIGNvbnN0cnVjdG9yXHJcbiAqIEByZXR1cm4ge0R1cGxleH0gVGhlIGR1cGxleCBzdHJlYW1cclxuICogQHB1YmxpY1xyXG4gKi9cclxuZnVuY3Rpb24gY3JlYXRlV2ViU29ja2V0U3RyZWFtKHdzLCBvcHRpb25zKSB7XHJcbiAgbGV0IHRlcm1pbmF0ZU9uRGVzdHJveSA9IHRydWU7XHJcblxyXG4gIGNvbnN0IGR1cGxleCA9IG5ldyBEdXBsZXgoe1xyXG4gICAgLi4ub3B0aW9ucyxcclxuICAgIGF1dG9EZXN0cm95OiBmYWxzZSxcclxuICAgIGVtaXRDbG9zZTogZmFsc2UsXHJcbiAgICBvYmplY3RNb2RlOiBmYWxzZSxcclxuICAgIHdyaXRhYmxlT2JqZWN0TW9kZTogZmFsc2VcclxuICB9KTtcclxuXHJcbiAgd3Mub24oJ21lc3NhZ2UnLCBmdW5jdGlvbiBtZXNzYWdlKG1zZywgaXNCaW5hcnkpIHtcclxuICAgIGNvbnN0IGRhdGEgPVxyXG4gICAgICAhaXNCaW5hcnkgJiYgZHVwbGV4Ll9yZWFkYWJsZVN0YXRlLm9iamVjdE1vZGUgPyBtc2cudG9TdHJpbmcoKSA6IG1zZztcclxuXHJcbiAgICBpZiAoIWR1cGxleC5wdXNoKGRhdGEpKSB3cy5wYXVzZSgpO1xyXG4gIH0pO1xyXG5cclxuICB3cy5vbmNlKCdlcnJvcicsIGZ1bmN0aW9uIGVycm9yKGVycikge1xyXG4gICAgaWYgKGR1cGxleC5kZXN0cm95ZWQpIHJldHVybjtcclxuXHJcbiAgICAvLyBQcmV2ZW50IGB3cy50ZXJtaW5hdGUoKWAgZnJvbSBiZWluZyBjYWxsZWQgYnkgYGR1cGxleC5fZGVzdHJveSgpYC5cclxuICAgIC8vXHJcbiAgICAvLyAtIElmIHRoZSBgJ2Vycm9yJ2AgZXZlbnQgaXMgZW1pdHRlZCBiZWZvcmUgdGhlIGAnb3BlbidgIGV2ZW50LCB0aGVuXHJcbiAgICAvLyAgIGB3cy50ZXJtaW5hdGUoKWAgaXMgYSBub29wIGFzIG5vIHNvY2tldCBpcyBhc3NpZ25lZC5cclxuICAgIC8vIC0gT3RoZXJ3aXNlLCB0aGUgZXJyb3IgaXMgcmUtZW1pdHRlZCBieSB0aGUgbGlzdGVuZXIgb2YgdGhlIGAnZXJyb3InYFxyXG4gICAgLy8gICBldmVudCBvZiB0aGUgYFJlY2VpdmVyYCBvYmplY3QuIFRoZSBsaXN0ZW5lciBhbHJlYWR5IGNsb3NlcyB0aGVcclxuICAgIC8vICAgY29ubmVjdGlvbiBieSBjYWxsaW5nIGB3cy5jbG9zZSgpYC4gVGhpcyBhbGxvd3MgYSBjbG9zZSBmcmFtZSB0byBiZVxyXG4gICAgLy8gICBzZW50IHRvIHRoZSBvdGhlciBwZWVyLiBJZiBgd3MudGVybWluYXRlKClgIGlzIGNhbGxlZCByaWdodCBhZnRlciB0aGlzLFxyXG4gICAgLy8gICB0aGVuIHRoZSBjbG9zZSBmcmFtZSBtaWdodCBub3QgYmUgc2VudC5cclxuICAgIHRlcm1pbmF0ZU9uRGVzdHJveSA9IGZhbHNlO1xyXG4gICAgZHVwbGV4LmRlc3Ryb3koZXJyKTtcclxuICB9KTtcclxuXHJcbiAgd3Mub25jZSgnY2xvc2UnLCBmdW5jdGlvbiBjbG9zZSgpIHtcclxuICAgIGlmIChkdXBsZXguZGVzdHJveWVkKSByZXR1cm47XHJcblxyXG4gICAgZHVwbGV4LnB1c2gobnVsbCk7XHJcbiAgfSk7XHJcblxyXG4gIGR1cGxleC5fZGVzdHJveSA9IGZ1bmN0aW9uIChlcnIsIGNhbGxiYWNrKSB7XHJcbiAgICBpZiAod3MucmVhZHlTdGF0ZSA9PT0gd3MuQ0xPU0VEKSB7XHJcbiAgICAgIGNhbGxiYWNrKGVycik7XHJcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soZW1pdENsb3NlLCBkdXBsZXgpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IGNhbGxlZCA9IGZhbHNlO1xyXG5cclxuICAgIHdzLm9uY2UoJ2Vycm9yJywgZnVuY3Rpb24gZXJyb3IoZXJyKSB7XHJcbiAgICAgIGNhbGxlZCA9IHRydWU7XHJcbiAgICAgIGNhbGxiYWNrKGVycik7XHJcbiAgICB9KTtcclxuXHJcbiAgICB3cy5vbmNlKCdjbG9zZScsIGZ1bmN0aW9uIGNsb3NlKCkge1xyXG4gICAgICBpZiAoIWNhbGxlZCkgY2FsbGJhY2soZXJyKTtcclxuICAgICAgcHJvY2Vzcy5uZXh0VGljayhlbWl0Q2xvc2UsIGR1cGxleCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpZiAodGVybWluYXRlT25EZXN0cm95KSB3cy50ZXJtaW5hdGUoKTtcclxuICB9O1xyXG5cclxuICBkdXBsZXguX2ZpbmFsID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XHJcbiAgICBpZiAod3MucmVhZHlTdGF0ZSA9PT0gd3MuQ09OTkVDVElORykge1xyXG4gICAgICB3cy5vbmNlKCdvcGVuJywgZnVuY3Rpb24gb3BlbigpIHtcclxuICAgICAgICBkdXBsZXguX2ZpbmFsKGNhbGxiYWNrKTtcclxuICAgICAgfSk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICAvLyBJZiB0aGUgdmFsdWUgb2YgdGhlIGBfc29ja2V0YCBwcm9wZXJ0eSBpcyBgbnVsbGAgaXQgbWVhbnMgdGhhdCBgd3NgIGlzIGFcclxuICAgIC8vIGNsaWVudCB3ZWJzb2NrZXQgYW5kIHRoZSBoYW5kc2hha2UgZmFpbGVkLiBJbiBmYWN0LCB3aGVuIHRoaXMgaGFwcGVucywgYVxyXG4gICAgLy8gc29ja2V0IGlzIG5ldmVyIGFzc2lnbmVkIHRvIHRoZSB3ZWJzb2NrZXQuIFdhaXQgZm9yIHRoZSBgJ2Vycm9yJ2AgZXZlbnRcclxuICAgIC8vIHRoYXQgd2lsbCBiZSBlbWl0dGVkIGJ5IHRoZSB3ZWJzb2NrZXQuXHJcbiAgICBpZiAod3MuX3NvY2tldCA9PT0gbnVsbCkgcmV0dXJuO1xyXG5cclxuICAgIGlmICh3cy5fc29ja2V0Ll93cml0YWJsZVN0YXRlLmZpbmlzaGVkKSB7XHJcbiAgICAgIGNhbGxiYWNrKCk7XHJcbiAgICAgIGlmIChkdXBsZXguX3JlYWRhYmxlU3RhdGUuZW5kRW1pdHRlZCkgZHVwbGV4LmRlc3Ryb3koKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHdzLl9zb2NrZXQub25jZSgnZmluaXNoJywgZnVuY3Rpb24gZmluaXNoKCkge1xyXG4gICAgICAgIC8vIGBkdXBsZXhgIGlzIG5vdCBkZXN0cm95ZWQgaGVyZSBiZWNhdXNlIHRoZSBgJ2VuZCdgIGV2ZW50IHdpbGwgYmVcclxuICAgICAgICAvLyBlbWl0dGVkIG9uIGBkdXBsZXhgIGFmdGVyIHRoaXMgYCdmaW5pc2gnYCBldmVudC4gVGhlIEVPRiBzaWduYWxpbmdcclxuICAgICAgICAvLyBgbnVsbGAgY2h1bmsgaXMsIGluIGZhY3QsIHB1c2hlZCB3aGVuIHRoZSB3ZWJzb2NrZXQgZW1pdHMgYCdjbG9zZSdgLlxyXG4gICAgICAgIGNhbGxiYWNrKCk7XHJcbiAgICAgIH0pO1xyXG4gICAgICB3cy5jbG9zZSgpO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIGR1cGxleC5fcmVhZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIGlmICh3cy5pc1BhdXNlZCkgd3MucmVzdW1lKCk7XHJcbiAgfTtcclxuXHJcbiAgZHVwbGV4Ll93cml0ZSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNhbGxiYWNrKSB7XHJcbiAgICBpZiAod3MucmVhZHlTdGF0ZSA9PT0gd3MuQ09OTkVDVElORykge1xyXG4gICAgICB3cy5vbmNlKCdvcGVuJywgZnVuY3Rpb24gb3BlbigpIHtcclxuICAgICAgICBkdXBsZXguX3dyaXRlKGNodW5rLCBlbmNvZGluZywgY2FsbGJhY2spO1xyXG4gICAgICB9KTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIHdzLnNlbmQoY2h1bmssIGNhbGxiYWNrKTtcclxuICB9O1xyXG5cclxuICBkdXBsZXgub24oJ2VuZCcsIGR1cGxleE9uRW5kKTtcclxuICBkdXBsZXgub24oJ2Vycm9yJywgZHVwbGV4T25FcnJvcik7XHJcbiAgcmV0dXJuIGR1cGxleDtcclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVXZWJTb2NrZXRTdHJlYW07XHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ws/lib/stream.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ws/lib/subprotocol.js":
/*!********************************************!*\
  !*** ./node_modules/ws/lib/subprotocol.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\r\n\r\nconst { tokenChars } = __webpack_require__(/*! ./validation */ \"(ssr)/./node_modules/ws/lib/validation.js\");\r\n\r\n/**\r\n * Parses the `Sec-WebSocket-Protocol` header into a set of subprotocol names.\r\n *\r\n * @param {String} header The field value of the header\r\n * @return {Set} The subprotocol names\r\n * @public\r\n */\r\nfunction parse(header) {\r\n  const protocols = new Set();\r\n  let start = -1;\r\n  let end = -1;\r\n  let i = 0;\r\n\r\n  for (i; i < header.length; i++) {\r\n    const code = header.charCodeAt(i);\r\n\r\n    if (end === -1 && tokenChars[code] === 1) {\r\n      if (start === -1) start = i;\r\n    } else if (\r\n      i !== 0 &&\r\n      (code === 0x20 /* ' ' */ || code === 0x09) /* '\\t' */\r\n    ) {\r\n      if (end === -1 && start !== -1) end = i;\r\n    } else if (code === 0x2c /* ',' */) {\r\n      if (start === -1) {\r\n        throw new SyntaxError(`Unexpected character at index ${i}`);\r\n      }\r\n\r\n      if (end === -1) end = i;\r\n\r\n      const protocol = header.slice(start, end);\r\n\r\n      if (protocols.has(protocol)) {\r\n        throw new SyntaxError(`The \"${protocol}\" subprotocol is duplicated`);\r\n      }\r\n\r\n      protocols.add(protocol);\r\n      start = end = -1;\r\n    } else {\r\n      throw new SyntaxError(`Unexpected character at index ${i}`);\r\n    }\r\n  }\r\n\r\n  if (start === -1 || end !== -1) {\r\n    throw new SyntaxError('Unexpected end of input');\r\n  }\r\n\r\n  const protocol = header.slice(start, i);\r\n\r\n  if (protocols.has(protocol)) {\r\n    throw new SyntaxError(`The \"${protocol}\" subprotocol is duplicated`);\r\n  }\r\n\r\n  protocols.add(protocol);\r\n  return protocols;\r\n}\r\n\r\nmodule.exports = { parse };\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd3MvbGliL3N1YnByb3RvY29sLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSxRQUFRLGFBQWEsRUFBRSxtQkFBTyxDQUFDLCtEQUFjO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFlBQVksS0FBSztBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSxtQkFBbUI7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQSwrREFBK0QsRUFBRTtBQUNqRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQyxTQUFTO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOLDZEQUE2RCxFQUFFO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLFNBQVM7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHVibGljaXMta3Ytc3lzdGVtLy4vbm9kZV9tb2R1bGVzL3dzL2xpYi9zdWJwcm90b2NvbC5qcz85NDkwIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcclxuXHJcbmNvbnN0IHsgdG9rZW5DaGFycyB9ID0gcmVxdWlyZSgnLi92YWxpZGF0aW9uJyk7XHJcblxyXG4vKipcclxuICogUGFyc2VzIHRoZSBgU2VjLVdlYlNvY2tldC1Qcm90b2NvbGAgaGVhZGVyIGludG8gYSBzZXQgb2Ygc3VicHJvdG9jb2wgbmFtZXMuXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBoZWFkZXIgVGhlIGZpZWxkIHZhbHVlIG9mIHRoZSBoZWFkZXJcclxuICogQHJldHVybiB7U2V0fSBUaGUgc3VicHJvdG9jb2wgbmFtZXNcclxuICogQHB1YmxpY1xyXG4gKi9cclxuZnVuY3Rpb24gcGFyc2UoaGVhZGVyKSB7XHJcbiAgY29uc3QgcHJvdG9jb2xzID0gbmV3IFNldCgpO1xyXG4gIGxldCBzdGFydCA9IC0xO1xyXG4gIGxldCBlbmQgPSAtMTtcclxuICBsZXQgaSA9IDA7XHJcblxyXG4gIGZvciAoaTsgaSA8IGhlYWRlci5sZW5ndGg7IGkrKykge1xyXG4gICAgY29uc3QgY29kZSA9IGhlYWRlci5jaGFyQ29kZUF0KGkpO1xyXG5cclxuICAgIGlmIChlbmQgPT09IC0xICYmIHRva2VuQ2hhcnNbY29kZV0gPT09IDEpIHtcclxuICAgICAgaWYgKHN0YXJ0ID09PSAtMSkgc3RhcnQgPSBpO1xyXG4gICAgfSBlbHNlIGlmIChcclxuICAgICAgaSAhPT0gMCAmJlxyXG4gICAgICAoY29kZSA9PT0gMHgyMCAvKiAnICcgKi8gfHwgY29kZSA9PT0gMHgwOSkgLyogJ1xcdCcgKi9cclxuICAgICkge1xyXG4gICAgICBpZiAoZW5kID09PSAtMSAmJiBzdGFydCAhPT0gLTEpIGVuZCA9IGk7XHJcbiAgICB9IGVsc2UgaWYgKGNvZGUgPT09IDB4MmMgLyogJywnICovKSB7XHJcbiAgICAgIGlmIChzdGFydCA9PT0gLTEpIHtcclxuICAgICAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoYFVuZXhwZWN0ZWQgY2hhcmFjdGVyIGF0IGluZGV4ICR7aX1gKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGVuZCA9PT0gLTEpIGVuZCA9IGk7XHJcblxyXG4gICAgICBjb25zdCBwcm90b2NvbCA9IGhlYWRlci5zbGljZShzdGFydCwgZW5kKTtcclxuXHJcbiAgICAgIGlmIChwcm90b2NvbHMuaGFzKHByb3RvY29sKSkge1xyXG4gICAgICAgIHRocm93IG5ldyBTeW50YXhFcnJvcihgVGhlIFwiJHtwcm90b2NvbH1cIiBzdWJwcm90b2NvbCBpcyBkdXBsaWNhdGVkYCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHByb3RvY29scy5hZGQocHJvdG9jb2wpO1xyXG4gICAgICBzdGFydCA9IGVuZCA9IC0xO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKGBVbmV4cGVjdGVkIGNoYXJhY3RlciBhdCBpbmRleCAke2l9YCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBpZiAoc3RhcnQgPT09IC0xIHx8IGVuZCAhPT0gLTEpIHtcclxuICAgIHRocm93IG5ldyBTeW50YXhFcnJvcignVW5leHBlY3RlZCBlbmQgb2YgaW5wdXQnKTtcclxuICB9XHJcblxyXG4gIGNvbnN0IHByb3RvY29sID0gaGVhZGVyLnNsaWNlKHN0YXJ0LCBpKTtcclxuXHJcbiAgaWYgKHByb3RvY29scy5oYXMocHJvdG9jb2wpKSB7XHJcbiAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoYFRoZSBcIiR7cHJvdG9jb2x9XCIgc3VicHJvdG9jb2wgaXMgZHVwbGljYXRlZGApO1xyXG4gIH1cclxuXHJcbiAgcHJvdG9jb2xzLmFkZChwcm90b2NvbCk7XHJcbiAgcmV0dXJuIHByb3RvY29scztcclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7IHBhcnNlIH07XHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ws/lib/subprotocol.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ws/lib/validation.js":
/*!*******************************************!*\
  !*** ./node_modules/ws/lib/validation.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\r\n\r\nconst { isUtf8 } = __webpack_require__(/*! buffer */ \"buffer\");\r\n\r\nconst { hasBlob } = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/ws/lib/constants.js\");\r\n\r\n//\r\n// Allowed token characters:\r\n//\r\n// '!', '#', '$', '%', '&', ''', '*', '+', '-',\r\n// '.', 0-9, A-Z, '^', '_', '`', a-z, '|', '~'\r\n//\r\n// tokenChars[32] === 0 // ' '\r\n// tokenChars[33] === 1 // '!'\r\n// tokenChars[34] === 0 // '\"'\r\n// ...\r\n//\r\n// prettier-ignore\r\nconst tokenChars = [\r\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 0 - 15\r\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 16 - 31\r\n  0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, // 32 - 47\r\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, // 48 - 63\r\n  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 64 - 79\r\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, // 80 - 95\r\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 96 - 111\r\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0 // 112 - 127\r\n];\r\n\r\n/**\r\n * Checks if a status code is allowed in a close frame.\r\n *\r\n * @param {Number} code The status code\r\n * @return {Boolean} `true` if the status code is valid, else `false`\r\n * @public\r\n */\r\nfunction isValidStatusCode(code) {\r\n  return (\r\n    (code >= 1000 &&\r\n      code <= 1014 &&\r\n      code !== 1004 &&\r\n      code !== 1005 &&\r\n      code !== 1006) ||\r\n    (code >= 3000 && code <= 4999)\r\n  );\r\n}\r\n\r\n/**\r\n * Checks if a given buffer contains only correct UTF-8.\r\n * Ported from https://www.cl.cam.ac.uk/%7Emgk25/ucs/utf8_check.c by\r\n * Markus Kuhn.\r\n *\r\n * @param {Buffer} buf The buffer to check\r\n * @return {Boolean} `true` if `buf` contains only correct UTF-8, else `false`\r\n * @public\r\n */\r\nfunction _isValidUTF8(buf) {\r\n  const len = buf.length;\r\n  let i = 0;\r\n\r\n  while (i < len) {\r\n    if ((buf[i] & 0x80) === 0) {\r\n      // 0xxxxxxx\r\n      i++;\r\n    } else if ((buf[i] & 0xe0) === 0xc0) {\r\n      // 110xxxxx 10xxxxxx\r\n      if (\r\n        i + 1 === len ||\r\n        (buf[i + 1] & 0xc0) !== 0x80 ||\r\n        (buf[i] & 0xfe) === 0xc0 // Overlong\r\n      ) {\r\n        return false;\r\n      }\r\n\r\n      i += 2;\r\n    } else if ((buf[i] & 0xf0) === 0xe0) {\r\n      // 1110xxxx 10xxxxxx 10xxxxxx\r\n      if (\r\n        i + 2 >= len ||\r\n        (buf[i + 1] & 0xc0) !== 0x80 ||\r\n        (buf[i + 2] & 0xc0) !== 0x80 ||\r\n        (buf[i] === 0xe0 && (buf[i + 1] & 0xe0) === 0x80) || // Overlong\r\n        (buf[i] === 0xed && (buf[i + 1] & 0xe0) === 0xa0) // Surrogate (U+D800 - U+DFFF)\r\n      ) {\r\n        return false;\r\n      }\r\n\r\n      i += 3;\r\n    } else if ((buf[i] & 0xf8) === 0xf0) {\r\n      // 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\r\n      if (\r\n        i + 3 >= len ||\r\n        (buf[i + 1] & 0xc0) !== 0x80 ||\r\n        (buf[i + 2] & 0xc0) !== 0x80 ||\r\n        (buf[i + 3] & 0xc0) !== 0x80 ||\r\n        (buf[i] === 0xf0 && (buf[i + 1] & 0xf0) === 0x80) || // Overlong\r\n        (buf[i] === 0xf4 && buf[i + 1] > 0x8f) ||\r\n        buf[i] > 0xf4 // > U+10FFFF\r\n      ) {\r\n        return false;\r\n      }\r\n\r\n      i += 4;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n/**\r\n * Determines whether a value is a `Blob`.\r\n *\r\n * @param {*} value The value to be tested\r\n * @return {Boolean} `true` if `value` is a `Blob`, else `false`\r\n * @private\r\n */\r\nfunction isBlob(value) {\r\n  return (\r\n    hasBlob &&\r\n    typeof value === 'object' &&\r\n    typeof value.arrayBuffer === 'function' &&\r\n    typeof value.type === 'string' &&\r\n    typeof value.stream === 'function' &&\r\n    (value[Symbol.toStringTag] === 'Blob' ||\r\n      value[Symbol.toStringTag] === 'File')\r\n  );\r\n}\r\n\r\nmodule.exports = {\r\n  isBlob,\r\n  isValidStatusCode,\r\n  isValidUTF8: _isValidUTF8,\r\n  tokenChars\r\n};\r\n\r\nif (isUtf8) {\r\n  module.exports.isValidUTF8 = function (buf) {\r\n    return buf.length < 24 ? _isValidUTF8(buf) : isUtf8(buf);\r\n  };\r\n} /* istanbul ignore else  */ else if (!process.env.WS_NO_UTF_8_VALIDATE) {\r\n  try {\r\n    const isValidUTF8 = __webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'utf-8-validate'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\r\n\r\n    module.exports.isValidUTF8 = function (buf) {\r\n      return buf.length < 32 ? _isValidUTF8(buf) : isValidUTF8(buf);\r\n    };\r\n  } catch (e) {\r\n    // Continue regardless of the error.\r\n  }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd3MvbGliL3ZhbGlkYXRpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLFFBQVEsU0FBUyxFQUFFLG1CQUFPLENBQUMsc0JBQVE7QUFDbkM7QUFDQSxRQUFRLFVBQVUsRUFBRSxtQkFBTyxDQUFDLDZEQUFhO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixZQUFZLFNBQVM7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFlBQVksU0FBUztBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsR0FBRztBQUNkLFlBQVksU0FBUztBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUUsMEJBQTBCO0FBQzVCO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQSx3QkFBd0IsbUJBQU8sQ0FBQyw2SUFBZ0I7QUFDaEQ7QUFDQSxJQUFJLDBCQUEwQjtBQUM5QjtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3B1YmxpY2lzLWt2LXN5c3RlbS8uL25vZGVfbW9kdWxlcy93cy9saWIvdmFsaWRhdGlvbi5qcz9lZTU0Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcclxuXHJcbmNvbnN0IHsgaXNVdGY4IH0gPSByZXF1aXJlKCdidWZmZXInKTtcclxuXHJcbmNvbnN0IHsgaGFzQmxvYiB9ID0gcmVxdWlyZSgnLi9jb25zdGFudHMnKTtcclxuXHJcbi8vXHJcbi8vIEFsbG93ZWQgdG9rZW4gY2hhcmFjdGVyczpcclxuLy9cclxuLy8gJyEnLCAnIycsICckJywgJyUnLCAnJicsICcnJywgJyonLCAnKycsICctJyxcclxuLy8gJy4nLCAwLTksIEEtWiwgJ14nLCAnXycsICdgJywgYS16LCAnfCcsICd+J1xyXG4vL1xyXG4vLyB0b2tlbkNoYXJzWzMyXSA9PT0gMCAvLyAnICdcclxuLy8gdG9rZW5DaGFyc1szM10gPT09IDEgLy8gJyEnXHJcbi8vIHRva2VuQ2hhcnNbMzRdID09PSAwIC8vICdcIidcclxuLy8gLi4uXHJcbi8vXHJcbi8vIHByZXR0aWVyLWlnbm9yZVxyXG5jb25zdCB0b2tlbkNoYXJzID0gW1xyXG4gIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIC8vIDAgLSAxNVxyXG4gIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIC8vIDE2IC0gMzFcclxuICAwLCAxLCAwLCAxLCAxLCAxLCAxLCAxLCAwLCAwLCAxLCAxLCAwLCAxLCAxLCAwLCAvLyAzMiAtIDQ3XHJcbiAgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMCwgMCwgMCwgMCwgMCwgMCwgLy8gNDggLSA2M1xyXG4gIDAsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIC8vIDY0IC0gNzlcclxuICAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAwLCAwLCAwLCAxLCAxLCAvLyA4MCAtIDk1XHJcbiAgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgLy8gOTYgLSAxMTFcclxuICAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAwLCAxLCAwLCAxLCAwIC8vIDExMiAtIDEyN1xyXG5dO1xyXG5cclxuLyoqXHJcbiAqIENoZWNrcyBpZiBhIHN0YXR1cyBjb2RlIGlzIGFsbG93ZWQgaW4gYSBjbG9zZSBmcmFtZS5cclxuICpcclxuICogQHBhcmFtIHtOdW1iZXJ9IGNvZGUgVGhlIHN0YXR1cyBjb2RlXHJcbiAqIEByZXR1cm4ge0Jvb2xlYW59IGB0cnVlYCBpZiB0aGUgc3RhdHVzIGNvZGUgaXMgdmFsaWQsIGVsc2UgYGZhbHNlYFxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5mdW5jdGlvbiBpc1ZhbGlkU3RhdHVzQ29kZShjb2RlKSB7XHJcbiAgcmV0dXJuIChcclxuICAgIChjb2RlID49IDEwMDAgJiZcclxuICAgICAgY29kZSA8PSAxMDE0ICYmXHJcbiAgICAgIGNvZGUgIT09IDEwMDQgJiZcclxuICAgICAgY29kZSAhPT0gMTAwNSAmJlxyXG4gICAgICBjb2RlICE9PSAxMDA2KSB8fFxyXG4gICAgKGNvZGUgPj0gMzAwMCAmJiBjb2RlIDw9IDQ5OTkpXHJcbiAgKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIENoZWNrcyBpZiBhIGdpdmVuIGJ1ZmZlciBjb250YWlucyBvbmx5IGNvcnJlY3QgVVRGLTguXHJcbiAqIFBvcnRlZCBmcm9tIGh0dHBzOi8vd3d3LmNsLmNhbS5hYy51ay8lN0VtZ2syNS91Y3MvdXRmOF9jaGVjay5jIGJ5XHJcbiAqIE1hcmt1cyBLdWhuLlxyXG4gKlxyXG4gKiBAcGFyYW0ge0J1ZmZlcn0gYnVmIFRoZSBidWZmZXIgdG8gY2hlY2tcclxuICogQHJldHVybiB7Qm9vbGVhbn0gYHRydWVgIGlmIGBidWZgIGNvbnRhaW5zIG9ubHkgY29ycmVjdCBVVEYtOCwgZWxzZSBgZmFsc2VgXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmZ1bmN0aW9uIF9pc1ZhbGlkVVRGOChidWYpIHtcclxuICBjb25zdCBsZW4gPSBidWYubGVuZ3RoO1xyXG4gIGxldCBpID0gMDtcclxuXHJcbiAgd2hpbGUgKGkgPCBsZW4pIHtcclxuICAgIGlmICgoYnVmW2ldICYgMHg4MCkgPT09IDApIHtcclxuICAgICAgLy8gMHh4eHh4eHhcclxuICAgICAgaSsrO1xyXG4gICAgfSBlbHNlIGlmICgoYnVmW2ldICYgMHhlMCkgPT09IDB4YzApIHtcclxuICAgICAgLy8gMTEweHh4eHggMTB4eHh4eHhcclxuICAgICAgaWYgKFxyXG4gICAgICAgIGkgKyAxID09PSBsZW4gfHxcclxuICAgICAgICAoYnVmW2kgKyAxXSAmIDB4YzApICE9PSAweDgwIHx8XHJcbiAgICAgICAgKGJ1ZltpXSAmIDB4ZmUpID09PSAweGMwIC8vIE92ZXJsb25nXHJcbiAgICAgICkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaSArPSAyO1xyXG4gICAgfSBlbHNlIGlmICgoYnVmW2ldICYgMHhmMCkgPT09IDB4ZTApIHtcclxuICAgICAgLy8gMTExMHh4eHggMTB4eHh4eHggMTB4eHh4eHhcclxuICAgICAgaWYgKFxyXG4gICAgICAgIGkgKyAyID49IGxlbiB8fFxyXG4gICAgICAgIChidWZbaSArIDFdICYgMHhjMCkgIT09IDB4ODAgfHxcclxuICAgICAgICAoYnVmW2kgKyAyXSAmIDB4YzApICE9PSAweDgwIHx8XHJcbiAgICAgICAgKGJ1ZltpXSA9PT0gMHhlMCAmJiAoYnVmW2kgKyAxXSAmIDB4ZTApID09PSAweDgwKSB8fCAvLyBPdmVybG9uZ1xyXG4gICAgICAgIChidWZbaV0gPT09IDB4ZWQgJiYgKGJ1ZltpICsgMV0gJiAweGUwKSA9PT0gMHhhMCkgLy8gU3Vycm9nYXRlIChVK0Q4MDAgLSBVK0RGRkYpXHJcbiAgICAgICkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaSArPSAzO1xyXG4gICAgfSBlbHNlIGlmICgoYnVmW2ldICYgMHhmOCkgPT09IDB4ZjApIHtcclxuICAgICAgLy8gMTExMTB4eHggMTB4eHh4eHggMTB4eHh4eHggMTB4eHh4eHhcclxuICAgICAgaWYgKFxyXG4gICAgICAgIGkgKyAzID49IGxlbiB8fFxyXG4gICAgICAgIChidWZbaSArIDFdICYgMHhjMCkgIT09IDB4ODAgfHxcclxuICAgICAgICAoYnVmW2kgKyAyXSAmIDB4YzApICE9PSAweDgwIHx8XHJcbiAgICAgICAgKGJ1ZltpICsgM10gJiAweGMwKSAhPT0gMHg4MCB8fFxyXG4gICAgICAgIChidWZbaV0gPT09IDB4ZjAgJiYgKGJ1ZltpICsgMV0gJiAweGYwKSA9PT0gMHg4MCkgfHwgLy8gT3ZlcmxvbmdcclxuICAgICAgICAoYnVmW2ldID09PSAweGY0ICYmIGJ1ZltpICsgMV0gPiAweDhmKSB8fFxyXG4gICAgICAgIGJ1ZltpXSA+IDB4ZjQgLy8gPiBVKzEwRkZGRlxyXG4gICAgICApIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGkgKz0gNDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJldHVybiB0cnVlO1xyXG59XHJcblxyXG4vKipcclxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIGEgdmFsdWUgaXMgYSBgQmxvYmAuXHJcbiAqXHJcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGJlIHRlc3RlZFxyXG4gKiBAcmV0dXJuIHtCb29sZWFufSBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGBCbG9iYCwgZWxzZSBgZmFsc2VgXHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5mdW5jdGlvbiBpc0Jsb2IodmFsdWUpIHtcclxuICByZXR1cm4gKFxyXG4gICAgaGFzQmxvYiAmJlxyXG4gICAgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJlxyXG4gICAgdHlwZW9mIHZhbHVlLmFycmF5QnVmZmVyID09PSAnZnVuY3Rpb24nICYmXHJcbiAgICB0eXBlb2YgdmFsdWUudHlwZSA9PT0gJ3N0cmluZycgJiZcclxuICAgIHR5cGVvZiB2YWx1ZS5zdHJlYW0gPT09ICdmdW5jdGlvbicgJiZcclxuICAgICh2YWx1ZVtTeW1ib2wudG9TdHJpbmdUYWddID09PSAnQmxvYicgfHxcclxuICAgICAgdmFsdWVbU3ltYm9sLnRvU3RyaW5nVGFnXSA9PT0gJ0ZpbGUnKVxyXG4gICk7XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gIGlzQmxvYixcclxuICBpc1ZhbGlkU3RhdHVzQ29kZSxcclxuICBpc1ZhbGlkVVRGODogX2lzVmFsaWRVVEY4LFxyXG4gIHRva2VuQ2hhcnNcclxufTtcclxuXHJcbmlmIChpc1V0ZjgpIHtcclxuICBtb2R1bGUuZXhwb3J0cy5pc1ZhbGlkVVRGOCA9IGZ1bmN0aW9uIChidWYpIHtcclxuICAgIHJldHVybiBidWYubGVuZ3RoIDwgMjQgPyBfaXNWYWxpZFVURjgoYnVmKSA6IGlzVXRmOChidWYpO1xyXG4gIH07XHJcbn0gLyogaXN0YW5idWwgaWdub3JlIGVsc2UgICovIGVsc2UgaWYgKCFwcm9jZXNzLmVudi5XU19OT19VVEZfOF9WQUxJREFURSkge1xyXG4gIHRyeSB7XHJcbiAgICBjb25zdCBpc1ZhbGlkVVRGOCA9IHJlcXVpcmUoJ3V0Zi04LXZhbGlkYXRlJyk7XHJcblxyXG4gICAgbW9kdWxlLmV4cG9ydHMuaXNWYWxpZFVURjggPSBmdW5jdGlvbiAoYnVmKSB7XHJcbiAgICAgIHJldHVybiBidWYubGVuZ3RoIDwgMzIgPyBfaXNWYWxpZFVURjgoYnVmKSA6IGlzVmFsaWRVVEY4KGJ1Zik7XHJcbiAgICB9O1xyXG4gIH0gY2F0Y2ggKGUpIHtcclxuICAgIC8vIENvbnRpbnVlIHJlZ2FyZGxlc3Mgb2YgdGhlIGVycm9yLlxyXG4gIH1cclxufVxyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ws/lib/validation.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ws/lib/websocket-server.js":
/*!*************************************************!*\
  !*** ./node_modules/ws/lib/websocket-server.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"^Duplex$\", \"caughtErrors\": \"none\" }] */\r\n\r\n\r\n\r\nconst EventEmitter = __webpack_require__(/*! events */ \"events\");\r\nconst http = __webpack_require__(/*! http */ \"http\");\r\nconst { Duplex } = __webpack_require__(/*! stream */ \"stream\");\r\nconst { createHash } = __webpack_require__(/*! crypto */ \"crypto\");\r\n\r\nconst extension = __webpack_require__(/*! ./extension */ \"(ssr)/./node_modules/ws/lib/extension.js\");\r\nconst PerMessageDeflate = __webpack_require__(/*! ./permessage-deflate */ \"(ssr)/./node_modules/ws/lib/permessage-deflate.js\");\r\nconst subprotocol = __webpack_require__(/*! ./subprotocol */ \"(ssr)/./node_modules/ws/lib/subprotocol.js\");\r\nconst WebSocket = __webpack_require__(/*! ./websocket */ \"(ssr)/./node_modules/ws/lib/websocket.js\");\r\nconst { GUID, kWebSocket } = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/ws/lib/constants.js\");\r\n\r\nconst keyRegex = /^[+/0-9A-Za-z]{22}==$/;\r\n\r\nconst RUNNING = 0;\r\nconst CLOSING = 1;\r\nconst CLOSED = 2;\r\n\r\n/**\r\n * Class representing a WebSocket server.\r\n *\r\n * @extends EventEmitter\r\n */\r\nclass WebSocketServer extends EventEmitter {\r\n  /**\r\n   * Create a `WebSocketServer` instance.\r\n   *\r\n   * @param {Object} options Configuration options\r\n   * @param {Boolean} [options.allowSynchronousEvents=true] Specifies whether\r\n   *     any of the `'message'`, `'ping'`, and `'pong'` events can be emitted\r\n   *     multiple times in the same tick\r\n   * @param {Boolean} [options.autoPong=true] Specifies whether or not to\r\n   *     automatically send a pong in response to a ping\r\n   * @param {Number} [options.backlog=511] The maximum length of the queue of\r\n   *     pending connections\r\n   * @param {Boolean} [options.clientTracking=true] Specifies whether or not to\r\n   *     track clients\r\n   * @param {Function} [options.handleProtocols] A hook to handle protocols\r\n   * @param {String} [options.host] The hostname where to bind the server\r\n   * @param {Number} [options.maxPayload=104857600] The maximum allowed message\r\n   *     size\r\n   * @param {Boolean} [options.noServer=false] Enable no server mode\r\n   * @param {String} [options.path] Accept only connections matching this path\r\n   * @param {(Boolean|Object)} [options.perMessageDeflate=false] Enable/disable\r\n   *     permessage-deflate\r\n   * @param {Number} [options.port] The port where to bind the server\r\n   * @param {(http.Server|https.Server)} [options.server] A pre-created HTTP/S\r\n   *     server to use\r\n   * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or\r\n   *     not to skip UTF-8 validation for text and close messages\r\n   * @param {Function} [options.verifyClient] A hook to reject connections\r\n   * @param {Function} [options.WebSocket=WebSocket] Specifies the `WebSocket`\r\n   *     class to use. It must be the `WebSocket` class or class that extends it\r\n   * @param {Function} [callback] A listener for the `listening` event\r\n   */\r\n  constructor(options, callback) {\r\n    super();\r\n\r\n    options = {\r\n      allowSynchronousEvents: true,\r\n      autoPong: true,\r\n      maxPayload: 100 * 1024 * 1024,\r\n      skipUTF8Validation: false,\r\n      perMessageDeflate: false,\r\n      handleProtocols: null,\r\n      clientTracking: true,\r\n      verifyClient: null,\r\n      noServer: false,\r\n      backlog: null, // use default (511 as implemented in net.js)\r\n      server: null,\r\n      host: null,\r\n      path: null,\r\n      port: null,\r\n      WebSocket,\r\n      ...options\r\n    };\r\n\r\n    if (\r\n      (options.port == null && !options.server && !options.noServer) ||\r\n      (options.port != null && (options.server || options.noServer)) ||\r\n      (options.server && options.noServer)\r\n    ) {\r\n      throw new TypeError(\r\n        'One and only one of the \"port\", \"server\", or \"noServer\" options ' +\r\n          'must be specified'\r\n      );\r\n    }\r\n\r\n    if (options.port != null) {\r\n      this._server = http.createServer((req, res) => {\r\n        const body = http.STATUS_CODES[426];\r\n\r\n        res.writeHead(426, {\r\n          'Content-Length': body.length,\r\n          'Content-Type': 'text/plain'\r\n        });\r\n        res.end(body);\r\n      });\r\n      this._server.listen(\r\n        options.port,\r\n        options.host,\r\n        options.backlog,\r\n        callback\r\n      );\r\n    } else if (options.server) {\r\n      this._server = options.server;\r\n    }\r\n\r\n    if (this._server) {\r\n      const emitConnection = this.emit.bind(this, 'connection');\r\n\r\n      this._removeListeners = addListeners(this._server, {\r\n        listening: this.emit.bind(this, 'listening'),\r\n        error: this.emit.bind(this, 'error'),\r\n        upgrade: (req, socket, head) => {\r\n          this.handleUpgrade(req, socket, head, emitConnection);\r\n        }\r\n      });\r\n    }\r\n\r\n    if (options.perMessageDeflate === true) options.perMessageDeflate = {};\r\n    if (options.clientTracking) {\r\n      this.clients = new Set();\r\n      this._shouldEmitClose = false;\r\n    }\r\n\r\n    this.options = options;\r\n    this._state = RUNNING;\r\n  }\r\n\r\n  /**\r\n   * Returns the bound address, the address family name, and port of the server\r\n   * as reported by the operating system if listening on an IP socket.\r\n   * If the server is listening on a pipe or UNIX domain socket, the name is\r\n   * returned as a string.\r\n   *\r\n   * @return {(Object|String|null)} The address of the server\r\n   * @public\r\n   */\r\n  address() {\r\n    if (this.options.noServer) {\r\n      throw new Error('The server is operating in \"noServer\" mode');\r\n    }\r\n\r\n    if (!this._server) return null;\r\n    return this._server.address();\r\n  }\r\n\r\n  /**\r\n   * Stop the server from accepting new connections and emit the `'close'` event\r\n   * when all existing connections are closed.\r\n   *\r\n   * @param {Function} [cb] A one-time listener for the `'close'` event\r\n   * @public\r\n   */\r\n  close(cb) {\r\n    if (this._state === CLOSED) {\r\n      if (cb) {\r\n        this.once('close', () => {\r\n          cb(new Error('The server is not running'));\r\n        });\r\n      }\r\n\r\n      process.nextTick(emitClose, this);\r\n      return;\r\n    }\r\n\r\n    if (cb) this.once('close', cb);\r\n\r\n    if (this._state === CLOSING) return;\r\n    this._state = CLOSING;\r\n\r\n    if (this.options.noServer || this.options.server) {\r\n      if (this._server) {\r\n        this._removeListeners();\r\n        this._removeListeners = this._server = null;\r\n      }\r\n\r\n      if (this.clients) {\r\n        if (!this.clients.size) {\r\n          process.nextTick(emitClose, this);\r\n        } else {\r\n          this._shouldEmitClose = true;\r\n        }\r\n      } else {\r\n        process.nextTick(emitClose, this);\r\n      }\r\n    } else {\r\n      const server = this._server;\r\n\r\n      this._removeListeners();\r\n      this._removeListeners = this._server = null;\r\n\r\n      //\r\n      // The HTTP/S server was created internally. Close it, and rely on its\r\n      // `'close'` event.\r\n      //\r\n      server.close(() => {\r\n        emitClose(this);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * See if a given request should be handled by this server instance.\r\n   *\r\n   * @param {http.IncomingMessage} req Request object to inspect\r\n   * @return {Boolean} `true` if the request is valid, else `false`\r\n   * @public\r\n   */\r\n  shouldHandle(req) {\r\n    if (this.options.path) {\r\n      const index = req.url.indexOf('?');\r\n      const pathname = index !== -1 ? req.url.slice(0, index) : req.url;\r\n\r\n      if (pathname !== this.options.path) return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Handle a HTTP Upgrade request.\r\n   *\r\n   * @param {http.IncomingMessage} req The request object\r\n   * @param {Duplex} socket The network socket between the server and client\r\n   * @param {Buffer} head The first packet of the upgraded stream\r\n   * @param {Function} cb Callback\r\n   * @public\r\n   */\r\n  handleUpgrade(req, socket, head, cb) {\r\n    socket.on('error', socketOnError);\r\n\r\n    const key = req.headers['sec-websocket-key'];\r\n    const upgrade = req.headers.upgrade;\r\n    const version = +req.headers['sec-websocket-version'];\r\n\r\n    if (req.method !== 'GET') {\r\n      const message = 'Invalid HTTP method';\r\n      abortHandshakeOrEmitwsClientError(this, req, socket, 405, message);\r\n      return;\r\n    }\r\n\r\n    if (upgrade === undefined || upgrade.toLowerCase() !== 'websocket') {\r\n      const message = 'Invalid Upgrade header';\r\n      abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);\r\n      return;\r\n    }\r\n\r\n    if (key === undefined || !keyRegex.test(key)) {\r\n      const message = 'Missing or invalid Sec-WebSocket-Key header';\r\n      abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);\r\n      return;\r\n    }\r\n\r\n    if (version !== 8 && version !== 13) {\r\n      const message = 'Missing or invalid Sec-WebSocket-Version header';\r\n      abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);\r\n      return;\r\n    }\r\n\r\n    if (!this.shouldHandle(req)) {\r\n      abortHandshake(socket, 400);\r\n      return;\r\n    }\r\n\r\n    const secWebSocketProtocol = req.headers['sec-websocket-protocol'];\r\n    let protocols = new Set();\r\n\r\n    if (secWebSocketProtocol !== undefined) {\r\n      try {\r\n        protocols = subprotocol.parse(secWebSocketProtocol);\r\n      } catch (err) {\r\n        const message = 'Invalid Sec-WebSocket-Protocol header';\r\n        abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);\r\n        return;\r\n      }\r\n    }\r\n\r\n    const secWebSocketExtensions = req.headers['sec-websocket-extensions'];\r\n    const extensions = {};\r\n\r\n    if (\r\n      this.options.perMessageDeflate &&\r\n      secWebSocketExtensions !== undefined\r\n    ) {\r\n      const perMessageDeflate = new PerMessageDeflate(\r\n        this.options.perMessageDeflate,\r\n        true,\r\n        this.options.maxPayload\r\n      );\r\n\r\n      try {\r\n        const offers = extension.parse(secWebSocketExtensions);\r\n\r\n        if (offers[PerMessageDeflate.extensionName]) {\r\n          perMessageDeflate.accept(offers[PerMessageDeflate.extensionName]);\r\n          extensions[PerMessageDeflate.extensionName] = perMessageDeflate;\r\n        }\r\n      } catch (err) {\r\n        const message =\r\n          'Invalid or unacceptable Sec-WebSocket-Extensions header';\r\n        abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);\r\n        return;\r\n      }\r\n    }\r\n\r\n    //\r\n    // Optionally call external client verification handler.\r\n    //\r\n    if (this.options.verifyClient) {\r\n      const info = {\r\n        origin:\r\n          req.headers[`${version === 8 ? 'sec-websocket-origin' : 'origin'}`],\r\n        secure: !!(req.socket.authorized || req.socket.encrypted),\r\n        req\r\n      };\r\n\r\n      if (this.options.verifyClient.length === 2) {\r\n        this.options.verifyClient(info, (verified, code, message, headers) => {\r\n          if (!verified) {\r\n            return abortHandshake(socket, code || 401, message, headers);\r\n          }\r\n\r\n          this.completeUpgrade(\r\n            extensions,\r\n            key,\r\n            protocols,\r\n            req,\r\n            socket,\r\n            head,\r\n            cb\r\n          );\r\n        });\r\n        return;\r\n      }\r\n\r\n      if (!this.options.verifyClient(info)) return abortHandshake(socket, 401);\r\n    }\r\n\r\n    this.completeUpgrade(extensions, key, protocols, req, socket, head, cb);\r\n  }\r\n\r\n  /**\r\n   * Upgrade the connection to WebSocket.\r\n   *\r\n   * @param {Object} extensions The accepted extensions\r\n   * @param {String} key The value of the `Sec-WebSocket-Key` header\r\n   * @param {Set} protocols The subprotocols\r\n   * @param {http.IncomingMessage} req The request object\r\n   * @param {Duplex} socket The network socket between the server and client\r\n   * @param {Buffer} head The first packet of the upgraded stream\r\n   * @param {Function} cb Callback\r\n   * @throws {Error} If called more than once with the same socket\r\n   * @private\r\n   */\r\n  completeUpgrade(extensions, key, protocols, req, socket, head, cb) {\r\n    //\r\n    // Destroy the socket if the client has already sent a FIN packet.\r\n    //\r\n    if (!socket.readable || !socket.writable) return socket.destroy();\r\n\r\n    if (socket[kWebSocket]) {\r\n      throw new Error(\r\n        'server.handleUpgrade() was called more than once with the same ' +\r\n          'socket, possibly due to a misconfiguration'\r\n      );\r\n    }\r\n\r\n    if (this._state > RUNNING) return abortHandshake(socket, 503);\r\n\r\n    const digest = createHash('sha1')\r\n      .update(key + GUID)\r\n      .digest('base64');\r\n\r\n    const headers = [\r\n      'HTTP/1.1 101 Switching Protocols',\r\n      'Upgrade: websocket',\r\n      'Connection: Upgrade',\r\n      `Sec-WebSocket-Accept: ${digest}`\r\n    ];\r\n\r\n    const ws = new this.options.WebSocket(null, undefined, this.options);\r\n\r\n    if (protocols.size) {\r\n      //\r\n      // Optionally call external protocol selection handler.\r\n      //\r\n      const protocol = this.options.handleProtocols\r\n        ? this.options.handleProtocols(protocols, req)\r\n        : protocols.values().next().value;\r\n\r\n      if (protocol) {\r\n        headers.push(`Sec-WebSocket-Protocol: ${protocol}`);\r\n        ws._protocol = protocol;\r\n      }\r\n    }\r\n\r\n    if (extensions[PerMessageDeflate.extensionName]) {\r\n      const params = extensions[PerMessageDeflate.extensionName].params;\r\n      const value = extension.format({\r\n        [PerMessageDeflate.extensionName]: [params]\r\n      });\r\n      headers.push(`Sec-WebSocket-Extensions: ${value}`);\r\n      ws._extensions = extensions;\r\n    }\r\n\r\n    //\r\n    // Allow external modification/inspection of handshake headers.\r\n    //\r\n    this.emit('headers', headers, req);\r\n\r\n    socket.write(headers.concat('\\r\\n').join('\\r\\n'));\r\n    socket.removeListener('error', socketOnError);\r\n\r\n    ws.setSocket(socket, head, {\r\n      allowSynchronousEvents: this.options.allowSynchronousEvents,\r\n      maxPayload: this.options.maxPayload,\r\n      skipUTF8Validation: this.options.skipUTF8Validation\r\n    });\r\n\r\n    if (this.clients) {\r\n      this.clients.add(ws);\r\n      ws.on('close', () => {\r\n        this.clients.delete(ws);\r\n\r\n        if (this._shouldEmitClose && !this.clients.size) {\r\n          process.nextTick(emitClose, this);\r\n        }\r\n      });\r\n    }\r\n\r\n    cb(ws, req);\r\n  }\r\n}\r\n\r\nmodule.exports = WebSocketServer;\r\n\r\n/**\r\n * Add event listeners on an `EventEmitter` using a map of <event, listener>\r\n * pairs.\r\n *\r\n * @param {EventEmitter} server The event emitter\r\n * @param {Object.<String, Function>} map The listeners to add\r\n * @return {Function} A function that will remove the added listeners when\r\n *     called\r\n * @private\r\n */\r\nfunction addListeners(server, map) {\r\n  for (const event of Object.keys(map)) server.on(event, map[event]);\r\n\r\n  return function removeListeners() {\r\n    for (const event of Object.keys(map)) {\r\n      server.removeListener(event, map[event]);\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * Emit a `'close'` event on an `EventEmitter`.\r\n *\r\n * @param {EventEmitter} server The event emitter\r\n * @private\r\n */\r\nfunction emitClose(server) {\r\n  server._state = CLOSED;\r\n  server.emit('close');\r\n}\r\n\r\n/**\r\n * Handle socket errors.\r\n *\r\n * @private\r\n */\r\nfunction socketOnError() {\r\n  this.destroy();\r\n}\r\n\r\n/**\r\n * Close the connection when preconditions are not fulfilled.\r\n *\r\n * @param {Duplex} socket The socket of the upgrade request\r\n * @param {Number} code The HTTP response status code\r\n * @param {String} [message] The HTTP response body\r\n * @param {Object} [headers] Additional HTTP response headers\r\n * @private\r\n */\r\nfunction abortHandshake(socket, code, message, headers) {\r\n  //\r\n  // The socket is writable unless the user destroyed or ended it before calling\r\n  // `server.handleUpgrade()` or in the `verifyClient` function, which is a user\r\n  // error. Handling this does not make much sense as the worst that can happen\r\n  // is that some of the data written by the user might be discarded due to the\r\n  // call to `socket.end()` below, which triggers an `'error'` event that in\r\n  // turn causes the socket to be destroyed.\r\n  //\r\n  message = message || http.STATUS_CODES[code];\r\n  headers = {\r\n    Connection: 'close',\r\n    'Content-Type': 'text/html',\r\n    'Content-Length': Buffer.byteLength(message),\r\n    ...headers\r\n  };\r\n\r\n  socket.once('finish', socket.destroy);\r\n\r\n  socket.end(\r\n    `HTTP/1.1 ${code} ${http.STATUS_CODES[code]}\\r\\n` +\r\n      Object.keys(headers)\r\n        .map((h) => `${h}: ${headers[h]}`)\r\n        .join('\\r\\n') +\r\n      '\\r\\n\\r\\n' +\r\n      message\r\n  );\r\n}\r\n\r\n/**\r\n * Emit a `'wsClientError'` event on a `WebSocketServer` if there is at least\r\n * one listener for it, otherwise call `abortHandshake()`.\r\n *\r\n * @param {WebSocketServer} server The WebSocket server\r\n * @param {http.IncomingMessage} req The request object\r\n * @param {Duplex} socket The socket of the upgrade request\r\n * @param {Number} code The HTTP response status code\r\n * @param {String} message The HTTP response body\r\n * @private\r\n */\r\nfunction abortHandshakeOrEmitwsClientError(server, req, socket, code, message) {\r\n  if (server.listenerCount('wsClientError')) {\r\n    const err = new Error(message);\r\n    Error.captureStackTrace(err, abortHandshakeOrEmitwsClientError);\r\n\r\n    server.emit('wsClientError', err, socket, req);\r\n  } else {\r\n    abortHandshake(socket, code, message);\r\n  }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ws/lib/websocket-server.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ws/lib/websocket.js":
/*!******************************************!*\
  !*** ./node_modules/ws/lib/websocket.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"^Duplex|Readable$\", \"caughtErrors\": \"none\" }] */\r\n\r\n\r\n\r\nconst EventEmitter = __webpack_require__(/*! events */ \"events\");\r\nconst https = __webpack_require__(/*! https */ \"https\");\r\nconst http = __webpack_require__(/*! http */ \"http\");\r\nconst net = __webpack_require__(/*! net */ \"net\");\r\nconst tls = __webpack_require__(/*! tls */ \"tls\");\r\nconst { randomBytes, createHash } = __webpack_require__(/*! crypto */ \"crypto\");\r\nconst { Duplex, Readable } = __webpack_require__(/*! stream */ \"stream\");\r\nconst { URL } = __webpack_require__(/*! url */ \"url\");\r\n\r\nconst PerMessageDeflate = __webpack_require__(/*! ./permessage-deflate */ \"(ssr)/./node_modules/ws/lib/permessage-deflate.js\");\r\nconst Receiver = __webpack_require__(/*! ./receiver */ \"(ssr)/./node_modules/ws/lib/receiver.js\");\r\nconst Sender = __webpack_require__(/*! ./sender */ \"(ssr)/./node_modules/ws/lib/sender.js\");\r\nconst { isBlob } = __webpack_require__(/*! ./validation */ \"(ssr)/./node_modules/ws/lib/validation.js\");\r\n\r\nconst {\r\n  BINARY_TYPES,\r\n  EMPTY_BUFFER,\r\n  GUID,\r\n  kForOnEventAttribute,\r\n  kListener,\r\n  kStatusCode,\r\n  kWebSocket,\r\n  NOOP\r\n} = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/ws/lib/constants.js\");\r\nconst {\r\n  EventTarget: { addEventListener, removeEventListener }\r\n} = __webpack_require__(/*! ./event-target */ \"(ssr)/./node_modules/ws/lib/event-target.js\");\r\nconst { format, parse } = __webpack_require__(/*! ./extension */ \"(ssr)/./node_modules/ws/lib/extension.js\");\r\nconst { toBuffer } = __webpack_require__(/*! ./buffer-util */ \"(ssr)/./node_modules/ws/lib/buffer-util.js\");\r\n\r\nconst closeTimeout = 30 * 1000;\r\nconst kAborted = Symbol('kAborted');\r\nconst protocolVersions = [8, 13];\r\nconst readyStates = ['CONNECTING', 'OPEN', 'CLOSING', 'CLOSED'];\r\nconst subprotocolRegex = /^[!#$%&'*+\\-.0-9A-Z^_`|a-z~]+$/;\r\n\r\n/**\r\n * Class representing a WebSocket.\r\n *\r\n * @extends EventEmitter\r\n */\r\nclass WebSocket extends EventEmitter {\r\n  /**\r\n   * Create a new `WebSocket`.\r\n   *\r\n   * @param {(String|URL)} address The URL to which to connect\r\n   * @param {(String|String[])} [protocols] The subprotocols\r\n   * @param {Object} [options] Connection options\r\n   */\r\n  constructor(address, protocols, options) {\r\n    super();\r\n\r\n    this._binaryType = BINARY_TYPES[0];\r\n    this._closeCode = 1006;\r\n    this._closeFrameReceived = false;\r\n    this._closeFrameSent = false;\r\n    this._closeMessage = EMPTY_BUFFER;\r\n    this._closeTimer = null;\r\n    this._errorEmitted = false;\r\n    this._extensions = {};\r\n    this._paused = false;\r\n    this._protocol = '';\r\n    this._readyState = WebSocket.CONNECTING;\r\n    this._receiver = null;\r\n    this._sender = null;\r\n    this._socket = null;\r\n\r\n    if (address !== null) {\r\n      this._bufferedAmount = 0;\r\n      this._isServer = false;\r\n      this._redirects = 0;\r\n\r\n      if (protocols === undefined) {\r\n        protocols = [];\r\n      } else if (!Array.isArray(protocols)) {\r\n        if (typeof protocols === 'object' && protocols !== null) {\r\n          options = protocols;\r\n          protocols = [];\r\n        } else {\r\n          protocols = [protocols];\r\n        }\r\n      }\r\n\r\n      initAsClient(this, address, protocols, options);\r\n    } else {\r\n      this._autoPong = options.autoPong;\r\n      this._isServer = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * For historical reasons, the custom \"nodebuffer\" type is used by the default\r\n   * instead of \"blob\".\r\n   *\r\n   * @type {String}\r\n   */\r\n  get binaryType() {\r\n    return this._binaryType;\r\n  }\r\n\r\n  set binaryType(type) {\r\n    if (!BINARY_TYPES.includes(type)) return;\r\n\r\n    this._binaryType = type;\r\n\r\n    //\r\n    // Allow to change `binaryType` on the fly.\r\n    //\r\n    if (this._receiver) this._receiver._binaryType = type;\r\n  }\r\n\r\n  /**\r\n   * @type {Number}\r\n   */\r\n  get bufferedAmount() {\r\n    if (!this._socket) return this._bufferedAmount;\r\n\r\n    return this._socket._writableState.length + this._sender._bufferedBytes;\r\n  }\r\n\r\n  /**\r\n   * @type {String}\r\n   */\r\n  get extensions() {\r\n    return Object.keys(this._extensions).join();\r\n  }\r\n\r\n  /**\r\n   * @type {Boolean}\r\n   */\r\n  get isPaused() {\r\n    return this._paused;\r\n  }\r\n\r\n  /**\r\n   * @type {Function}\r\n   */\r\n  /* istanbul ignore next */\r\n  get onclose() {\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * @type {Function}\r\n   */\r\n  /* istanbul ignore next */\r\n  get onerror() {\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * @type {Function}\r\n   */\r\n  /* istanbul ignore next */\r\n  get onopen() {\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * @type {Function}\r\n   */\r\n  /* istanbul ignore next */\r\n  get onmessage() {\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * @type {String}\r\n   */\r\n  get protocol() {\r\n    return this._protocol;\r\n  }\r\n\r\n  /**\r\n   * @type {Number}\r\n   */\r\n  get readyState() {\r\n    return this._readyState;\r\n  }\r\n\r\n  /**\r\n   * @type {String}\r\n   */\r\n  get url() {\r\n    return this._url;\r\n  }\r\n\r\n  /**\r\n   * Set up the socket and the internal resources.\r\n   *\r\n   * @param {Duplex} socket The network socket between the server and client\r\n   * @param {Buffer} head The first packet of the upgraded stream\r\n   * @param {Object} options Options object\r\n   * @param {Boolean} [options.allowSynchronousEvents=false] Specifies whether\r\n   *     any of the `'message'`, `'ping'`, and `'pong'` events can be emitted\r\n   *     multiple times in the same tick\r\n   * @param {Function} [options.generateMask] The function used to generate the\r\n   *     masking key\r\n   * @param {Number} [options.maxPayload=0] The maximum allowed message size\r\n   * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or\r\n   *     not to skip UTF-8 validation for text and close messages\r\n   * @private\r\n   */\r\n  setSocket(socket, head, options) {\r\n    const receiver = new Receiver({\r\n      allowSynchronousEvents: options.allowSynchronousEvents,\r\n      binaryType: this.binaryType,\r\n      extensions: this._extensions,\r\n      isServer: this._isServer,\r\n      maxPayload: options.maxPayload,\r\n      skipUTF8Validation: options.skipUTF8Validation\r\n    });\r\n\r\n    const sender = new Sender(socket, this._extensions, options.generateMask);\r\n\r\n    this._receiver = receiver;\r\n    this._sender = sender;\r\n    this._socket = socket;\r\n\r\n    receiver[kWebSocket] = this;\r\n    sender[kWebSocket] = this;\r\n    socket[kWebSocket] = this;\r\n\r\n    receiver.on('conclude', receiverOnConclude);\r\n    receiver.on('drain', receiverOnDrain);\r\n    receiver.on('error', receiverOnError);\r\n    receiver.on('message', receiverOnMessage);\r\n    receiver.on('ping', receiverOnPing);\r\n    receiver.on('pong', receiverOnPong);\r\n\r\n    sender.onerror = senderOnError;\r\n\r\n    //\r\n    // These methods may not be available if `socket` is just a `Duplex`.\r\n    //\r\n    if (socket.setTimeout) socket.setTimeout(0);\r\n    if (socket.setNoDelay) socket.setNoDelay();\r\n\r\n    if (head.length > 0) socket.unshift(head);\r\n\r\n    socket.on('close', socketOnClose);\r\n    socket.on('data', socketOnData);\r\n    socket.on('end', socketOnEnd);\r\n    socket.on('error', socketOnError);\r\n\r\n    this._readyState = WebSocket.OPEN;\r\n    this.emit('open');\r\n  }\r\n\r\n  /**\r\n   * Emit the `'close'` event.\r\n   *\r\n   * @private\r\n   */\r\n  emitClose() {\r\n    if (!this._socket) {\r\n      this._readyState = WebSocket.CLOSED;\r\n      this.emit('close', this._closeCode, this._closeMessage);\r\n      return;\r\n    }\r\n\r\n    if (this._extensions[PerMessageDeflate.extensionName]) {\r\n      this._extensions[PerMessageDeflate.extensionName].cleanup();\r\n    }\r\n\r\n    this._receiver.removeAllListeners();\r\n    this._readyState = WebSocket.CLOSED;\r\n    this.emit('close', this._closeCode, this._closeMessage);\r\n  }\r\n\r\n  /**\r\n   * Start a closing handshake.\r\n   *\r\n   *          +----------+   +-----------+   +----------+\r\n   *     - - -|ws.close()|-->|close frame|-->|ws.close()|- - -\r\n   *    |     +----------+   +-----------+   +----------+     |\r\n   *          +----------+   +-----------+         |\r\n   * CLOSING  |ws.close()|<--|close frame|<--+-----+       CLOSING\r\n   *          +----------+   +-----------+   |\r\n   *    |           |                        |   +---+        |\r\n   *                +------------------------+-->|fin| - - - -\r\n   *    |         +---+                      |   +---+\r\n   *     - - - - -|fin|<---------------------+\r\n   *              +---+\r\n   *\r\n   * @param {Number} [code] Status code explaining why the connection is closing\r\n   * @param {(String|Buffer)} [data] The reason why the connection is\r\n   *     closing\r\n   * @public\r\n   */\r\n  close(code, data) {\r\n    if (this.readyState === WebSocket.CLOSED) return;\r\n    if (this.readyState === WebSocket.CONNECTING) {\r\n      const msg = 'WebSocket was closed before the connection was established';\r\n      abortHandshake(this, this._req, msg);\r\n      return;\r\n    }\r\n\r\n    if (this.readyState === WebSocket.CLOSING) {\r\n      if (\r\n        this._closeFrameSent &&\r\n        (this._closeFrameReceived || this._receiver._writableState.errorEmitted)\r\n      ) {\r\n        this._socket.end();\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    this._readyState = WebSocket.CLOSING;\r\n    this._sender.close(code, data, !this._isServer, (err) => {\r\n      //\r\n      // This error is handled by the `'error'` listener on the socket. We only\r\n      // want to know if the close frame has been sent here.\r\n      //\r\n      if (err) return;\r\n\r\n      this._closeFrameSent = true;\r\n\r\n      if (\r\n        this._closeFrameReceived ||\r\n        this._receiver._writableState.errorEmitted\r\n      ) {\r\n        this._socket.end();\r\n      }\r\n    });\r\n\r\n    setCloseTimer(this);\r\n  }\r\n\r\n  /**\r\n   * Pause the socket.\r\n   *\r\n   * @public\r\n   */\r\n  pause() {\r\n    if (\r\n      this.readyState === WebSocket.CONNECTING ||\r\n      this.readyState === WebSocket.CLOSED\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    this._paused = true;\r\n    this._socket.pause();\r\n  }\r\n\r\n  /**\r\n   * Send a ping.\r\n   *\r\n   * @param {*} [data] The data to send\r\n   * @param {Boolean} [mask] Indicates whether or not to mask `data`\r\n   * @param {Function} [cb] Callback which is executed when the ping is sent\r\n   * @public\r\n   */\r\n  ping(data, mask, cb) {\r\n    if (this.readyState === WebSocket.CONNECTING) {\r\n      throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');\r\n    }\r\n\r\n    if (typeof data === 'function') {\r\n      cb = data;\r\n      data = mask = undefined;\r\n    } else if (typeof mask === 'function') {\r\n      cb = mask;\r\n      mask = undefined;\r\n    }\r\n\r\n    if (typeof data === 'number') data = data.toString();\r\n\r\n    if (this.readyState !== WebSocket.OPEN) {\r\n      sendAfterClose(this, data, cb);\r\n      return;\r\n    }\r\n\r\n    if (mask === undefined) mask = !this._isServer;\r\n    this._sender.ping(data || EMPTY_BUFFER, mask, cb);\r\n  }\r\n\r\n  /**\r\n   * Send a pong.\r\n   *\r\n   * @param {*} [data] The data to send\r\n   * @param {Boolean} [mask] Indicates whether or not to mask `data`\r\n   * @param {Function} [cb] Callback which is executed when the pong is sent\r\n   * @public\r\n   */\r\n  pong(data, mask, cb) {\r\n    if (this.readyState === WebSocket.CONNECTING) {\r\n      throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');\r\n    }\r\n\r\n    if (typeof data === 'function') {\r\n      cb = data;\r\n      data = mask = undefined;\r\n    } else if (typeof mask === 'function') {\r\n      cb = mask;\r\n      mask = undefined;\r\n    }\r\n\r\n    if (typeof data === 'number') data = data.toString();\r\n\r\n    if (this.readyState !== WebSocket.OPEN) {\r\n      sendAfterClose(this, data, cb);\r\n      return;\r\n    }\r\n\r\n    if (mask === undefined) mask = !this._isServer;\r\n    this._sender.pong(data || EMPTY_BUFFER, mask, cb);\r\n  }\r\n\r\n  /**\r\n   * Resume the socket.\r\n   *\r\n   * @public\r\n   */\r\n  resume() {\r\n    if (\r\n      this.readyState === WebSocket.CONNECTING ||\r\n      this.readyState === WebSocket.CLOSED\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    this._paused = false;\r\n    if (!this._receiver._writableState.needDrain) this._socket.resume();\r\n  }\r\n\r\n  /**\r\n   * Send a data message.\r\n   *\r\n   * @param {*} data The message to send\r\n   * @param {Object} [options] Options object\r\n   * @param {Boolean} [options.binary] Specifies whether `data` is binary or\r\n   *     text\r\n   * @param {Boolean} [options.compress] Specifies whether or not to compress\r\n   *     `data`\r\n   * @param {Boolean} [options.fin=true] Specifies whether the fragment is the\r\n   *     last one\r\n   * @param {Boolean} [options.mask] Specifies whether or not to mask `data`\r\n   * @param {Function} [cb] Callback which is executed when data is written out\r\n   * @public\r\n   */\r\n  send(data, options, cb) {\r\n    if (this.readyState === WebSocket.CONNECTING) {\r\n      throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');\r\n    }\r\n\r\n    if (typeof options === 'function') {\r\n      cb = options;\r\n      options = {};\r\n    }\r\n\r\n    if (typeof data === 'number') data = data.toString();\r\n\r\n    if (this.readyState !== WebSocket.OPEN) {\r\n      sendAfterClose(this, data, cb);\r\n      return;\r\n    }\r\n\r\n    const opts = {\r\n      binary: typeof data !== 'string',\r\n      mask: !this._isServer,\r\n      compress: true,\r\n      fin: true,\r\n      ...options\r\n    };\r\n\r\n    if (!this._extensions[PerMessageDeflate.extensionName]) {\r\n      opts.compress = false;\r\n    }\r\n\r\n    this._sender.send(data || EMPTY_BUFFER, opts, cb);\r\n  }\r\n\r\n  /**\r\n   * Forcibly close the connection.\r\n   *\r\n   * @public\r\n   */\r\n  terminate() {\r\n    if (this.readyState === WebSocket.CLOSED) return;\r\n    if (this.readyState === WebSocket.CONNECTING) {\r\n      const msg = 'WebSocket was closed before the connection was established';\r\n      abortHandshake(this, this._req, msg);\r\n      return;\r\n    }\r\n\r\n    if (this._socket) {\r\n      this._readyState = WebSocket.CLOSING;\r\n      this._socket.destroy();\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @constant {Number} CONNECTING\r\n * @memberof WebSocket\r\n */\r\nObject.defineProperty(WebSocket, 'CONNECTING', {\r\n  enumerable: true,\r\n  value: readyStates.indexOf('CONNECTING')\r\n});\r\n\r\n/**\r\n * @constant {Number} CONNECTING\r\n * @memberof WebSocket.prototype\r\n */\r\nObject.defineProperty(WebSocket.prototype, 'CONNECTING', {\r\n  enumerable: true,\r\n  value: readyStates.indexOf('CONNECTING')\r\n});\r\n\r\n/**\r\n * @constant {Number} OPEN\r\n * @memberof WebSocket\r\n */\r\nObject.defineProperty(WebSocket, 'OPEN', {\r\n  enumerable: true,\r\n  value: readyStates.indexOf('OPEN')\r\n});\r\n\r\n/**\r\n * @constant {Number} OPEN\r\n * @memberof WebSocket.prototype\r\n */\r\nObject.defineProperty(WebSocket.prototype, 'OPEN', {\r\n  enumerable: true,\r\n  value: readyStates.indexOf('OPEN')\r\n});\r\n\r\n/**\r\n * @constant {Number} CLOSING\r\n * @memberof WebSocket\r\n */\r\nObject.defineProperty(WebSocket, 'CLOSING', {\r\n  enumerable: true,\r\n  value: readyStates.indexOf('CLOSING')\r\n});\r\n\r\n/**\r\n * @constant {Number} CLOSING\r\n * @memberof WebSocket.prototype\r\n */\r\nObject.defineProperty(WebSocket.prototype, 'CLOSING', {\r\n  enumerable: true,\r\n  value: readyStates.indexOf('CLOSING')\r\n});\r\n\r\n/**\r\n * @constant {Number} CLOSED\r\n * @memberof WebSocket\r\n */\r\nObject.defineProperty(WebSocket, 'CLOSED', {\r\n  enumerable: true,\r\n  value: readyStates.indexOf('CLOSED')\r\n});\r\n\r\n/**\r\n * @constant {Number} CLOSED\r\n * @memberof WebSocket.prototype\r\n */\r\nObject.defineProperty(WebSocket.prototype, 'CLOSED', {\r\n  enumerable: true,\r\n  value: readyStates.indexOf('CLOSED')\r\n});\r\n\r\n[\r\n  'binaryType',\r\n  'bufferedAmount',\r\n  'extensions',\r\n  'isPaused',\r\n  'protocol',\r\n  'readyState',\r\n  'url'\r\n].forEach((property) => {\r\n  Object.defineProperty(WebSocket.prototype, property, { enumerable: true });\r\n});\r\n\r\n//\r\n// Add the `onopen`, `onerror`, `onclose`, and `onmessage` attributes.\r\n// See https://html.spec.whatwg.org/multipage/comms.html#the-websocket-interface\r\n//\r\n['open', 'error', 'close', 'message'].forEach((method) => {\r\n  Object.defineProperty(WebSocket.prototype, `on${method}`, {\r\n    enumerable: true,\r\n    get() {\r\n      for (const listener of this.listeners(method)) {\r\n        if (listener[kForOnEventAttribute]) return listener[kListener];\r\n      }\r\n\r\n      return null;\r\n    },\r\n    set(handler) {\r\n      for (const listener of this.listeners(method)) {\r\n        if (listener[kForOnEventAttribute]) {\r\n          this.removeListener(method, listener);\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (typeof handler !== 'function') return;\r\n\r\n      this.addEventListener(method, handler, {\r\n        [kForOnEventAttribute]: true\r\n      });\r\n    }\r\n  });\r\n});\r\n\r\nWebSocket.prototype.addEventListener = addEventListener;\r\nWebSocket.prototype.removeEventListener = removeEventListener;\r\n\r\nmodule.exports = WebSocket;\r\n\r\n/**\r\n * Initialize a WebSocket client.\r\n *\r\n * @param {WebSocket} websocket The client to initialize\r\n * @param {(String|URL)} address The URL to which to connect\r\n * @param {Array} protocols The subprotocols\r\n * @param {Object} [options] Connection options\r\n * @param {Boolean} [options.allowSynchronousEvents=true] Specifies whether any\r\n *     of the `'message'`, `'ping'`, and `'pong'` events can be emitted multiple\r\n *     times in the same tick\r\n * @param {Boolean} [options.autoPong=true] Specifies whether or not to\r\n *     automatically send a pong in response to a ping\r\n * @param {Function} [options.finishRequest] A function which can be used to\r\n *     customize the headers of each http request before it is sent\r\n * @param {Boolean} [options.followRedirects=false] Whether or not to follow\r\n *     redirects\r\n * @param {Function} [options.generateMask] The function used to generate the\r\n *     masking key\r\n * @param {Number} [options.handshakeTimeout] Timeout in milliseconds for the\r\n *     handshake request\r\n * @param {Number} [options.maxPayload=104857600] The maximum allowed message\r\n *     size\r\n * @param {Number} [options.maxRedirects=10] The maximum number of redirects\r\n *     allowed\r\n * @param {String} [options.origin] Value of the `Origin` or\r\n *     `Sec-WebSocket-Origin` header\r\n * @param {(Boolean|Object)} [options.perMessageDeflate=true] Enable/disable\r\n *     permessage-deflate\r\n * @param {Number} [options.protocolVersion=13] Value of the\r\n *     `Sec-WebSocket-Version` header\r\n * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or\r\n *     not to skip UTF-8 validation for text and close messages\r\n * @private\r\n */\r\nfunction initAsClient(websocket, address, protocols, options) {\r\n  const opts = {\r\n    allowSynchronousEvents: true,\r\n    autoPong: true,\r\n    protocolVersion: protocolVersions[1],\r\n    maxPayload: 100 * 1024 * 1024,\r\n    skipUTF8Validation: false,\r\n    perMessageDeflate: true,\r\n    followRedirects: false,\r\n    maxRedirects: 10,\r\n    ...options,\r\n    socketPath: undefined,\r\n    hostname: undefined,\r\n    protocol: undefined,\r\n    timeout: undefined,\r\n    method: 'GET',\r\n    host: undefined,\r\n    path: undefined,\r\n    port: undefined\r\n  };\r\n\r\n  websocket._autoPong = opts.autoPong;\r\n\r\n  if (!protocolVersions.includes(opts.protocolVersion)) {\r\n    throw new RangeError(\r\n      `Unsupported protocol version: ${opts.protocolVersion} ` +\r\n        `(supported versions: ${protocolVersions.join(', ')})`\r\n    );\r\n  }\r\n\r\n  let parsedUrl;\r\n\r\n  if (address instanceof URL) {\r\n    parsedUrl = address;\r\n  } else {\r\n    try {\r\n      parsedUrl = new URL(address);\r\n    } catch (e) {\r\n      throw new SyntaxError(`Invalid URL: ${address}`);\r\n    }\r\n  }\r\n\r\n  if (parsedUrl.protocol === 'http:') {\r\n    parsedUrl.protocol = 'ws:';\r\n  } else if (parsedUrl.protocol === 'https:') {\r\n    parsedUrl.protocol = 'wss:';\r\n  }\r\n\r\n  websocket._url = parsedUrl.href;\r\n\r\n  const isSecure = parsedUrl.protocol === 'wss:';\r\n  const isIpcUrl = parsedUrl.protocol === 'ws+unix:';\r\n  let invalidUrlMessage;\r\n\r\n  if (parsedUrl.protocol !== 'ws:' && !isSecure && !isIpcUrl) {\r\n    invalidUrlMessage =\r\n      'The URL\\'s protocol must be one of \"ws:\", \"wss:\", ' +\r\n      '\"http:\", \"https\", or \"ws+unix:\"';\r\n  } else if (isIpcUrl && !parsedUrl.pathname) {\r\n    invalidUrlMessage = \"The URL's pathname is empty\";\r\n  } else if (parsedUrl.hash) {\r\n    invalidUrlMessage = 'The URL contains a fragment identifier';\r\n  }\r\n\r\n  if (invalidUrlMessage) {\r\n    const err = new SyntaxError(invalidUrlMessage);\r\n\r\n    if (websocket._redirects === 0) {\r\n      throw err;\r\n    } else {\r\n      emitErrorAndClose(websocket, err);\r\n      return;\r\n    }\r\n  }\r\n\r\n  const defaultPort = isSecure ? 443 : 80;\r\n  const key = randomBytes(16).toString('base64');\r\n  const request = isSecure ? https.request : http.request;\r\n  const protocolSet = new Set();\r\n  let perMessageDeflate;\r\n\r\n  opts.createConnection =\r\n    opts.createConnection || (isSecure ? tlsConnect : netConnect);\r\n  opts.defaultPort = opts.defaultPort || defaultPort;\r\n  opts.port = parsedUrl.port || defaultPort;\r\n  opts.host = parsedUrl.hostname.startsWith('[')\r\n    ? parsedUrl.hostname.slice(1, -1)\r\n    : parsedUrl.hostname;\r\n  opts.headers = {\r\n    ...opts.headers,\r\n    'Sec-WebSocket-Version': opts.protocolVersion,\r\n    'Sec-WebSocket-Key': key,\r\n    Connection: 'Upgrade',\r\n    Upgrade: 'websocket'\r\n  };\r\n  opts.path = parsedUrl.pathname + parsedUrl.search;\r\n  opts.timeout = opts.handshakeTimeout;\r\n\r\n  if (opts.perMessageDeflate) {\r\n    perMessageDeflate = new PerMessageDeflate(\r\n      opts.perMessageDeflate !== true ? opts.perMessageDeflate : {},\r\n      false,\r\n      opts.maxPayload\r\n    );\r\n    opts.headers['Sec-WebSocket-Extensions'] = format({\r\n      [PerMessageDeflate.extensionName]: perMessageDeflate.offer()\r\n    });\r\n  }\r\n  if (protocols.length) {\r\n    for (const protocol of protocols) {\r\n      if (\r\n        typeof protocol !== 'string' ||\r\n        !subprotocolRegex.test(protocol) ||\r\n        protocolSet.has(protocol)\r\n      ) {\r\n        throw new SyntaxError(\r\n          'An invalid or duplicated subprotocol was specified'\r\n        );\r\n      }\r\n\r\n      protocolSet.add(protocol);\r\n    }\r\n\r\n    opts.headers['Sec-WebSocket-Protocol'] = protocols.join(',');\r\n  }\r\n  if (opts.origin) {\r\n    if (opts.protocolVersion < 13) {\r\n      opts.headers['Sec-WebSocket-Origin'] = opts.origin;\r\n    } else {\r\n      opts.headers.Origin = opts.origin;\r\n    }\r\n  }\r\n  if (parsedUrl.username || parsedUrl.password) {\r\n    opts.auth = `${parsedUrl.username}:${parsedUrl.password}`;\r\n  }\r\n\r\n  if (isIpcUrl) {\r\n    const parts = opts.path.split(':');\r\n\r\n    opts.socketPath = parts[0];\r\n    opts.path = parts[1];\r\n  }\r\n\r\n  let req;\r\n\r\n  if (opts.followRedirects) {\r\n    if (websocket._redirects === 0) {\r\n      websocket._originalIpc = isIpcUrl;\r\n      websocket._originalSecure = isSecure;\r\n      websocket._originalHostOrSocketPath = isIpcUrl\r\n        ? opts.socketPath\r\n        : parsedUrl.host;\r\n\r\n      const headers = options && options.headers;\r\n\r\n      //\r\n      // Shallow copy the user provided options so that headers can be changed\r\n      // without mutating the original object.\r\n      //\r\n      options = { ...options, headers: {} };\r\n\r\n      if (headers) {\r\n        for (const [key, value] of Object.entries(headers)) {\r\n          options.headers[key.toLowerCase()] = value;\r\n        }\r\n      }\r\n    } else if (websocket.listenerCount('redirect') === 0) {\r\n      const isSameHost = isIpcUrl\r\n        ? websocket._originalIpc\r\n          ? opts.socketPath === websocket._originalHostOrSocketPath\r\n          : false\r\n        : websocket._originalIpc\r\n          ? false\r\n          : parsedUrl.host === websocket._originalHostOrSocketPath;\r\n\r\n      if (!isSameHost || (websocket._originalSecure && !isSecure)) {\r\n        //\r\n        // Match curl 7.77.0 behavior and drop the following headers. These\r\n        // headers are also dropped when following a redirect to a subdomain.\r\n        //\r\n        delete opts.headers.authorization;\r\n        delete opts.headers.cookie;\r\n\r\n        if (!isSameHost) delete opts.headers.host;\r\n\r\n        opts.auth = undefined;\r\n      }\r\n    }\r\n\r\n    //\r\n    // Match curl 7.77.0 behavior and make the first `Authorization` header win.\r\n    // If the `Authorization` header is set, then there is nothing to do as it\r\n    // will take precedence.\r\n    //\r\n    if (opts.auth && !options.headers.authorization) {\r\n      options.headers.authorization =\r\n        'Basic ' + Buffer.from(opts.auth).toString('base64');\r\n    }\r\n\r\n    req = websocket._req = request(opts);\r\n\r\n    if (websocket._redirects) {\r\n      //\r\n      // Unlike what is done for the `'upgrade'` event, no early exit is\r\n      // triggered here if the user calls `websocket.close()` or\r\n      // `websocket.terminate()` from a listener of the `'redirect'` event. This\r\n      // is because the user can also call `request.destroy()` with an error\r\n      // before calling `websocket.close()` or `websocket.terminate()` and this\r\n      // would result in an error being emitted on the `request` object with no\r\n      // `'error'` event listeners attached.\r\n      //\r\n      websocket.emit('redirect', websocket.url, req);\r\n    }\r\n  } else {\r\n    req = websocket._req = request(opts);\r\n  }\r\n\r\n  if (opts.timeout) {\r\n    req.on('timeout', () => {\r\n      abortHandshake(websocket, req, 'Opening handshake has timed out');\r\n    });\r\n  }\r\n\r\n  req.on('error', (err) => {\r\n    if (req === null || req[kAborted]) return;\r\n\r\n    req = websocket._req = null;\r\n    emitErrorAndClose(websocket, err);\r\n  });\r\n\r\n  req.on('response', (res) => {\r\n    const location = res.headers.location;\r\n    const statusCode = res.statusCode;\r\n\r\n    if (\r\n      location &&\r\n      opts.followRedirects &&\r\n      statusCode >= 300 &&\r\n      statusCode < 400\r\n    ) {\r\n      if (++websocket._redirects > opts.maxRedirects) {\r\n        abortHandshake(websocket, req, 'Maximum redirects exceeded');\r\n        return;\r\n      }\r\n\r\n      req.abort();\r\n\r\n      let addr;\r\n\r\n      try {\r\n        addr = new URL(location, address);\r\n      } catch (e) {\r\n        const err = new SyntaxError(`Invalid URL: ${location}`);\r\n        emitErrorAndClose(websocket, err);\r\n        return;\r\n      }\r\n\r\n      initAsClient(websocket, addr, protocols, options);\r\n    } else if (!websocket.emit('unexpected-response', req, res)) {\r\n      abortHandshake(\r\n        websocket,\r\n        req,\r\n        `Unexpected server response: ${res.statusCode}`\r\n      );\r\n    }\r\n  });\r\n\r\n  req.on('upgrade', (res, socket, head) => {\r\n    websocket.emit('upgrade', res);\r\n\r\n    //\r\n    // The user may have closed the connection from a listener of the\r\n    // `'upgrade'` event.\r\n    //\r\n    if (websocket.readyState !== WebSocket.CONNECTING) return;\r\n\r\n    req = websocket._req = null;\r\n\r\n    const upgrade = res.headers.upgrade;\r\n\r\n    if (upgrade === undefined || upgrade.toLowerCase() !== 'websocket') {\r\n      abortHandshake(websocket, socket, 'Invalid Upgrade header');\r\n      return;\r\n    }\r\n\r\n    const digest = createHash('sha1')\r\n      .update(key + GUID)\r\n      .digest('base64');\r\n\r\n    if (res.headers['sec-websocket-accept'] !== digest) {\r\n      abortHandshake(websocket, socket, 'Invalid Sec-WebSocket-Accept header');\r\n      return;\r\n    }\r\n\r\n    const serverProt = res.headers['sec-websocket-protocol'];\r\n    let protError;\r\n\r\n    if (serverProt !== undefined) {\r\n      if (!protocolSet.size) {\r\n        protError = 'Server sent a subprotocol but none was requested';\r\n      } else if (!protocolSet.has(serverProt)) {\r\n        protError = 'Server sent an invalid subprotocol';\r\n      }\r\n    } else if (protocolSet.size) {\r\n      protError = 'Server sent no subprotocol';\r\n    }\r\n\r\n    if (protError) {\r\n      abortHandshake(websocket, socket, protError);\r\n      return;\r\n    }\r\n\r\n    if (serverProt) websocket._protocol = serverProt;\r\n\r\n    const secWebSocketExtensions = res.headers['sec-websocket-extensions'];\r\n\r\n    if (secWebSocketExtensions !== undefined) {\r\n      if (!perMessageDeflate) {\r\n        const message =\r\n          'Server sent a Sec-WebSocket-Extensions header but no extension ' +\r\n          'was requested';\r\n        abortHandshake(websocket, socket, message);\r\n        return;\r\n      }\r\n\r\n      let extensions;\r\n\r\n      try {\r\n        extensions = parse(secWebSocketExtensions);\r\n      } catch (err) {\r\n        const message = 'Invalid Sec-WebSocket-Extensions header';\r\n        abortHandshake(websocket, socket, message);\r\n        return;\r\n      }\r\n\r\n      const extensionNames = Object.keys(extensions);\r\n\r\n      if (\r\n        extensionNames.length !== 1 ||\r\n        extensionNames[0] !== PerMessageDeflate.extensionName\r\n      ) {\r\n        const message = 'Server indicated an extension that was not requested';\r\n        abortHandshake(websocket, socket, message);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        perMessageDeflate.accept(extensions[PerMessageDeflate.extensionName]);\r\n      } catch (err) {\r\n        const message = 'Invalid Sec-WebSocket-Extensions header';\r\n        abortHandshake(websocket, socket, message);\r\n        return;\r\n      }\r\n\r\n      websocket._extensions[PerMessageDeflate.extensionName] =\r\n        perMessageDeflate;\r\n    }\r\n\r\n    websocket.setSocket(socket, head, {\r\n      allowSynchronousEvents: opts.allowSynchronousEvents,\r\n      generateMask: opts.generateMask,\r\n      maxPayload: opts.maxPayload,\r\n      skipUTF8Validation: opts.skipUTF8Validation\r\n    });\r\n  });\r\n\r\n  if (opts.finishRequest) {\r\n    opts.finishRequest(req, websocket);\r\n  } else {\r\n    req.end();\r\n  }\r\n}\r\n\r\n/**\r\n * Emit the `'error'` and `'close'` events.\r\n *\r\n * @param {WebSocket} websocket The WebSocket instance\r\n * @param {Error} The error to emit\r\n * @private\r\n */\r\nfunction emitErrorAndClose(websocket, err) {\r\n  websocket._readyState = WebSocket.CLOSING;\r\n  //\r\n  // The following assignment is practically useless and is done only for\r\n  // consistency.\r\n  //\r\n  websocket._errorEmitted = true;\r\n  websocket.emit('error', err);\r\n  websocket.emitClose();\r\n}\r\n\r\n/**\r\n * Create a `net.Socket` and initiate a connection.\r\n *\r\n * @param {Object} options Connection options\r\n * @return {net.Socket} The newly created socket used to start the connection\r\n * @private\r\n */\r\nfunction netConnect(options) {\r\n  options.path = options.socketPath;\r\n  return net.connect(options);\r\n}\r\n\r\n/**\r\n * Create a `tls.TLSSocket` and initiate a connection.\r\n *\r\n * @param {Object} options Connection options\r\n * @return {tls.TLSSocket} The newly created socket used to start the connection\r\n * @private\r\n */\r\nfunction tlsConnect(options) {\r\n  options.path = undefined;\r\n\r\n  if (!options.servername && options.servername !== '') {\r\n    options.servername = net.isIP(options.host) ? '' : options.host;\r\n  }\r\n\r\n  return tls.connect(options);\r\n}\r\n\r\n/**\r\n * Abort the handshake and emit an error.\r\n *\r\n * @param {WebSocket} websocket The WebSocket instance\r\n * @param {(http.ClientRequest|net.Socket|tls.Socket)} stream The request to\r\n *     abort or the socket to destroy\r\n * @param {String} message The error message\r\n * @private\r\n */\r\nfunction abortHandshake(websocket, stream, message) {\r\n  websocket._readyState = WebSocket.CLOSING;\r\n\r\n  const err = new Error(message);\r\n  Error.captureStackTrace(err, abortHandshake);\r\n\r\n  if (stream.setHeader) {\r\n    stream[kAborted] = true;\r\n    stream.abort();\r\n\r\n    if (stream.socket && !stream.socket.destroyed) {\r\n      //\r\n      // On Node.js >= 14.3.0 `request.abort()` does not destroy the socket if\r\n      // called after the request completed. See\r\n      // https://github.com/websockets/ws/issues/1869.\r\n      //\r\n      stream.socket.destroy();\r\n    }\r\n\r\n    process.nextTick(emitErrorAndClose, websocket, err);\r\n  } else {\r\n    stream.destroy(err);\r\n    stream.once('error', websocket.emit.bind(websocket, 'error'));\r\n    stream.once('close', websocket.emitClose.bind(websocket));\r\n  }\r\n}\r\n\r\n/**\r\n * Handle cases where the `ping()`, `pong()`, or `send()` methods are called\r\n * when the `readyState` attribute is `CLOSING` or `CLOSED`.\r\n *\r\n * @param {WebSocket} websocket The WebSocket instance\r\n * @param {*} [data] The data to send\r\n * @param {Function} [cb] Callback\r\n * @private\r\n */\r\nfunction sendAfterClose(websocket, data, cb) {\r\n  if (data) {\r\n    const length = isBlob(data) ? data.size : toBuffer(data).length;\r\n\r\n    //\r\n    // The `_bufferedAmount` property is used only when the peer is a client and\r\n    // the opening handshake fails. Under these circumstances, in fact, the\r\n    // `setSocket()` method is not called, so the `_socket` and `_sender`\r\n    // properties are set to `null`.\r\n    //\r\n    if (websocket._socket) websocket._sender._bufferedBytes += length;\r\n    else websocket._bufferedAmount += length;\r\n  }\r\n\r\n  if (cb) {\r\n    const err = new Error(\r\n      `WebSocket is not open: readyState ${websocket.readyState} ` +\r\n        `(${readyStates[websocket.readyState]})`\r\n    );\r\n    process.nextTick(cb, err);\r\n  }\r\n}\r\n\r\n/**\r\n * The listener of the `Receiver` `'conclude'` event.\r\n *\r\n * @param {Number} code The status code\r\n * @param {Buffer} reason The reason for closing\r\n * @private\r\n */\r\nfunction receiverOnConclude(code, reason) {\r\n  const websocket = this[kWebSocket];\r\n\r\n  websocket._closeFrameReceived = true;\r\n  websocket._closeMessage = reason;\r\n  websocket._closeCode = code;\r\n\r\n  if (websocket._socket[kWebSocket] === undefined) return;\r\n\r\n  websocket._socket.removeListener('data', socketOnData);\r\n  process.nextTick(resume, websocket._socket);\r\n\r\n  if (code === 1005) websocket.close();\r\n  else websocket.close(code, reason);\r\n}\r\n\r\n/**\r\n * The listener of the `Receiver` `'drain'` event.\r\n *\r\n * @private\r\n */\r\nfunction receiverOnDrain() {\r\n  const websocket = this[kWebSocket];\r\n\r\n  if (!websocket.isPaused) websocket._socket.resume();\r\n}\r\n\r\n/**\r\n * The listener of the `Receiver` `'error'` event.\r\n *\r\n * @param {(RangeError|Error)} err The emitted error\r\n * @private\r\n */\r\nfunction receiverOnError(err) {\r\n  const websocket = this[kWebSocket];\r\n\r\n  if (websocket._socket[kWebSocket] !== undefined) {\r\n    websocket._socket.removeListener('data', socketOnData);\r\n\r\n    //\r\n    // On Node.js < 14.0.0 the `'error'` event is emitted synchronously. See\r\n    // https://github.com/websockets/ws/issues/1940.\r\n    //\r\n    process.nextTick(resume, websocket._socket);\r\n\r\n    websocket.close(err[kStatusCode]);\r\n  }\r\n\r\n  if (!websocket._errorEmitted) {\r\n    websocket._errorEmitted = true;\r\n    websocket.emit('error', err);\r\n  }\r\n}\r\n\r\n/**\r\n * The listener of the `Receiver` `'finish'` event.\r\n *\r\n * @private\r\n */\r\nfunction receiverOnFinish() {\r\n  this[kWebSocket].emitClose();\r\n}\r\n\r\n/**\r\n * The listener of the `Receiver` `'message'` event.\r\n *\r\n * @param {Buffer|ArrayBuffer|Buffer[])} data The message\r\n * @param {Boolean} isBinary Specifies whether the message is binary or not\r\n * @private\r\n */\r\nfunction receiverOnMessage(data, isBinary) {\r\n  this[kWebSocket].emit('message', data, isBinary);\r\n}\r\n\r\n/**\r\n * The listener of the `Receiver` `'ping'` event.\r\n *\r\n * @param {Buffer} data The data included in the ping frame\r\n * @private\r\n */\r\nfunction receiverOnPing(data) {\r\n  const websocket = this[kWebSocket];\r\n\r\n  if (websocket._autoPong) websocket.pong(data, !this._isServer, NOOP);\r\n  websocket.emit('ping', data);\r\n}\r\n\r\n/**\r\n * The listener of the `Receiver` `'pong'` event.\r\n *\r\n * @param {Buffer} data The data included in the pong frame\r\n * @private\r\n */\r\nfunction receiverOnPong(data) {\r\n  this[kWebSocket].emit('pong', data);\r\n}\r\n\r\n/**\r\n * Resume a readable stream\r\n *\r\n * @param {Readable} stream The readable stream\r\n * @private\r\n */\r\nfunction resume(stream) {\r\n  stream.resume();\r\n}\r\n\r\n/**\r\n * The `Sender` error event handler.\r\n *\r\n * @param {Error} The error\r\n * @private\r\n */\r\nfunction senderOnError(err) {\r\n  const websocket = this[kWebSocket];\r\n\r\n  if (websocket.readyState === WebSocket.CLOSED) return;\r\n  if (websocket.readyState === WebSocket.OPEN) {\r\n    websocket._readyState = WebSocket.CLOSING;\r\n    setCloseTimer(websocket);\r\n  }\r\n\r\n  //\r\n  // `socket.end()` is used instead of `socket.destroy()` to allow the other\r\n  // peer to finish sending queued data. There is no need to set a timer here\r\n  // because `CLOSING` means that it is already set or not needed.\r\n  //\r\n  this._socket.end();\r\n\r\n  if (!websocket._errorEmitted) {\r\n    websocket._errorEmitted = true;\r\n    websocket.emit('error', err);\r\n  }\r\n}\r\n\r\n/**\r\n * Set a timer to destroy the underlying raw socket of a WebSocket.\r\n *\r\n * @param {WebSocket} websocket The WebSocket instance\r\n * @private\r\n */\r\nfunction setCloseTimer(websocket) {\r\n  websocket._closeTimer = setTimeout(\r\n    websocket._socket.destroy.bind(websocket._socket),\r\n    closeTimeout\r\n  );\r\n}\r\n\r\n/**\r\n * The listener of the socket `'close'` event.\r\n *\r\n * @private\r\n */\r\nfunction socketOnClose() {\r\n  const websocket = this[kWebSocket];\r\n\r\n  this.removeListener('close', socketOnClose);\r\n  this.removeListener('data', socketOnData);\r\n  this.removeListener('end', socketOnEnd);\r\n\r\n  websocket._readyState = WebSocket.CLOSING;\r\n\r\n  let chunk;\r\n\r\n  //\r\n  // The close frame might not have been received or the `'end'` event emitted,\r\n  // for example, if the socket was destroyed due to an error. Ensure that the\r\n  // `receiver` stream is closed after writing any remaining buffered data to\r\n  // it. If the readable side of the socket is in flowing mode then there is no\r\n  // buffered data as everything has been already written and `readable.read()`\r\n  // will return `null`. If instead, the socket is paused, any possible buffered\r\n  // data will be read as a single chunk.\r\n  //\r\n  if (\r\n    !this._readableState.endEmitted &&\r\n    !websocket._closeFrameReceived &&\r\n    !websocket._receiver._writableState.errorEmitted &&\r\n    (chunk = websocket._socket.read()) !== null\r\n  ) {\r\n    websocket._receiver.write(chunk);\r\n  }\r\n\r\n  websocket._receiver.end();\r\n\r\n  this[kWebSocket] = undefined;\r\n\r\n  clearTimeout(websocket._closeTimer);\r\n\r\n  if (\r\n    websocket._receiver._writableState.finished ||\r\n    websocket._receiver._writableState.errorEmitted\r\n  ) {\r\n    websocket.emitClose();\r\n  } else {\r\n    websocket._receiver.on('error', receiverOnFinish);\r\n    websocket._receiver.on('finish', receiverOnFinish);\r\n  }\r\n}\r\n\r\n/**\r\n * The listener of the socket `'data'` event.\r\n *\r\n * @param {Buffer} chunk A chunk of data\r\n * @private\r\n */\r\nfunction socketOnData(chunk) {\r\n  if (!this[kWebSocket]._receiver.write(chunk)) {\r\n    this.pause();\r\n  }\r\n}\r\n\r\n/**\r\n * The listener of the socket `'end'` event.\r\n *\r\n * @private\r\n */\r\nfunction socketOnEnd() {\r\n  const websocket = this[kWebSocket];\r\n\r\n  websocket._readyState = WebSocket.CLOSING;\r\n  websocket._receiver.end();\r\n  this.end();\r\n}\r\n\r\n/**\r\n * The listener of the socket `'error'` event.\r\n *\r\n * @private\r\n */\r\nfunction socketOnError() {\r\n  const websocket = this[kWebSocket];\r\n\r\n  this.removeListener('error', socketOnError);\r\n  this.on('error', NOOP);\r\n\r\n  if (websocket) {\r\n    websocket._readyState = WebSocket.CLOSING;\r\n    this.destroy();\r\n  }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ws/lib/websocket.js\n");

/***/ })

};
;